/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.ric.action.Function');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ric.action.Function = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ric.action.Function.repeatedFields_, null);
};
goog.inherits(proto.ric.action.Function, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ric.action.Function.displayName = 'proto.ric.action.Function';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ric.action.Function.repeatedFields_ = [14,15,16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ric.action.Function.prototype.toObject = function(opt_includeInstance) {
  return proto.ric.action.Function.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ric.action.Function} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ric.action.Function.toObject = function(includeInstance, msg) {
  var f, obj = {
    handler: jspb.Message.getFieldWithDefault(msg, 1, ""),
    body: jspb.Message.getFieldWithDefault(msg, 2, ""),
    deps: jspb.Message.getFieldWithDefault(msg, 3, ""),
    runtime: jspb.Message.getFieldWithDefault(msg, 4, ""),
    runtimeimage: jspb.Message.getFieldWithDefault(msg, 5, ""),
    mem: jspb.Message.getFieldWithDefault(msg, 6, ""),
    cpu: jspb.Message.getFieldWithDefault(msg, 7, ""),
    timeout: jspb.Message.getFieldWithDefault(msg, 8, ""),
    imagepullpolicy: jspb.Message.getFieldWithDefault(msg, 9, ""),
    schedule: jspb.Message.getFieldWithDefault(msg, 10, ""),
    port: jspb.Message.getFieldWithDefault(msg, 11, 0),
    serviceport: jspb.Message.getFieldWithDefault(msg, 12, 0),
    headless: jspb.Message.getFieldWithDefault(msg, 13, false),
    envsList: jspb.Message.getRepeatedField(msg, 14),
    labelsList: jspb.Message.getRepeatedField(msg, 15),
    secretsList: jspb.Message.getRepeatedField(msg, 16)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ric.action.Function}
 */
proto.ric.action.Function.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ric.action.Function;
  return proto.ric.action.Function.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ric.action.Function} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ric.action.Function}
 */
proto.ric.action.Function.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHandler(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeps(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRuntime(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRuntimeimage(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMem(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCpu(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeout(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setImagepullpolicy(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchedule(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServiceport(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHeadless(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.addEnvs(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.addLabels(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.addSecrets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ric.action.Function.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ric.action.Function.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ric.action.Function} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ric.action.Function.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHandler();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDeps();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRuntime();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRuntimeimage();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMem();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCpu();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTimeout();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getImagepullpolicy();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSchedule();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getServiceport();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getHeadless();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getEnvsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      14,
      f
    );
  }
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      15,
      f
    );
  }
  f = message.getSecretsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      16,
      f
    );
  }
};


/**
 * optional string handler = 1;
 * @return {string}
 */
proto.ric.action.Function.prototype.getHandler = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ric.action.Function.prototype.setHandler = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string body = 2;
 * @return {string}
 */
proto.ric.action.Function.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ric.action.Function.prototype.setBody = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string deps = 3;
 * @return {string}
 */
proto.ric.action.Function.prototype.getDeps = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ric.action.Function.prototype.setDeps = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string runtime = 4;
 * @return {string}
 */
proto.ric.action.Function.prototype.getRuntime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ric.action.Function.prototype.setRuntime = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string runtimeImage = 5;
 * @return {string}
 */
proto.ric.action.Function.prototype.getRuntimeimage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.ric.action.Function.prototype.setRuntimeimage = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string mem = 6;
 * @return {string}
 */
proto.ric.action.Function.prototype.getMem = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.ric.action.Function.prototype.setMem = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string cpu = 7;
 * @return {string}
 */
proto.ric.action.Function.prototype.getCpu = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.ric.action.Function.prototype.setCpu = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string timeout = 8;
 * @return {string}
 */
proto.ric.action.Function.prototype.getTimeout = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.ric.action.Function.prototype.setTimeout = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string imagePullPolicy = 9;
 * @return {string}
 */
proto.ric.action.Function.prototype.getImagepullpolicy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.ric.action.Function.prototype.setImagepullpolicy = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string schedule = 10;
 * @return {string}
 */
proto.ric.action.Function.prototype.getSchedule = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.ric.action.Function.prototype.setSchedule = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int32 port = 11;
 * @return {number}
 */
proto.ric.action.Function.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.ric.action.Function.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 servicePort = 12;
 * @return {number}
 */
proto.ric.action.Function.prototype.getServiceport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.ric.action.Function.prototype.setServiceport = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional bool headless = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ric.action.Function.prototype.getHeadless = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 13, false));
};


/** @param {boolean} value */
proto.ric.action.Function.prototype.setHeadless = function(value) {
  jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * repeated string envs = 14;
 * @return {!Array<string>}
 */
proto.ric.action.Function.prototype.getEnvsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 14));
};


/** @param {!Array<string>} value */
proto.ric.action.Function.prototype.setEnvsList = function(value) {
  jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.ric.action.Function.prototype.addEnvs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


proto.ric.action.Function.prototype.clearEnvsList = function() {
  this.setEnvsList([]);
};


/**
 * repeated string labels = 15;
 * @return {!Array<string>}
 */
proto.ric.action.Function.prototype.getLabelsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 15));
};


/** @param {!Array<string>} value */
proto.ric.action.Function.prototype.setLabelsList = function(value) {
  jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.ric.action.Function.prototype.addLabels = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


proto.ric.action.Function.prototype.clearLabelsList = function() {
  this.setLabelsList([]);
};


/**
 * repeated string secrets = 16;
 * @return {!Array<string>}
 */
proto.ric.action.Function.prototype.getSecretsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 16));
};


/** @param {!Array<string>} value */
proto.ric.action.Function.prototype.setSecretsList = function(value) {
  jspb.Message.setField(this, 16, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.ric.action.Function.prototype.addSecrets = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};


proto.ric.action.Function.prototype.clearSecretsList = function() {
  this.setSecretsList([]);
};


