/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.ric.TranspileResponse');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.ric.LibRequest');
goog.require('proto.ric.VarDecl');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ric.TranspileResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ric.TranspileResponse.repeatedFields_, null);
};
goog.inherits(proto.ric.TranspileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ric.TranspileResponse.displayName = 'proto.ric.TranspileResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ric.TranspileResponse.repeatedFields_ = [3,4,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ric.TranspileResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ric.TranspileResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ric.TranspileResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ric.TranspileResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    codees5: jspb.Message.getFieldWithDefault(msg, 1, ""),
    async: jspb.Message.getFieldWithDefault(msg, 2, false),
    inputList: jspb.Message.toObjectList(msg.getInputList(),
    proto.ric.VarDecl.toObject, includeInstance),
    outputList: jspb.Message.toObjectList(msg.getOutputList(),
    proto.ric.VarDecl.toObject, includeInstance),
    packetList: jspb.Message.toObjectList(msg.getPacketList(),
    proto.ric.VarDecl.toObject, includeInstance),
    libsList: jspb.Message.toObjectList(msg.getLibsList(),
    proto.ric.LibRequest.toObject, includeInstance),
    errorsList: jspb.Message.getRepeatedField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ric.TranspileResponse}
 */
proto.ric.TranspileResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ric.TranspileResponse;
  return proto.ric.TranspileResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ric.TranspileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ric.TranspileResponse}
 */
proto.ric.TranspileResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodees5(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAsync(value);
      break;
    case 3:
      var value = new proto.ric.VarDecl;
      reader.readMessage(value,proto.ric.VarDecl.deserializeBinaryFromReader);
      msg.addInput(value);
      break;
    case 4:
      var value = new proto.ric.VarDecl;
      reader.readMessage(value,proto.ric.VarDecl.deserializeBinaryFromReader);
      msg.addOutput(value);
      break;
    case 5:
      var value = new proto.ric.VarDecl;
      reader.readMessage(value,proto.ric.VarDecl.deserializeBinaryFromReader);
      msg.addPacket(value);
      break;
    case 6:
      var value = new proto.ric.LibRequest;
      reader.readMessage(value,proto.ric.LibRequest.deserializeBinaryFromReader);
      msg.addLibs(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addErrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ric.TranspileResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ric.TranspileResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ric.TranspileResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ric.TranspileResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCodees5();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAsync();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getInputList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ric.VarDecl.serializeBinaryToWriter
    );
  }
  f = message.getOutputList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.ric.VarDecl.serializeBinaryToWriter
    );
  }
  f = message.getPacketList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.ric.VarDecl.serializeBinaryToWriter
    );
  }
  f = message.getLibsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.ric.LibRequest.serializeBinaryToWriter
    );
  }
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
};


/**
 * optional string codeEs5 = 1;
 * @return {string}
 */
proto.ric.TranspileResponse.prototype.getCodees5 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ric.TranspileResponse.prototype.setCodees5 = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool async = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ric.TranspileResponse.prototype.getAsync = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.ric.TranspileResponse.prototype.setAsync = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * repeated VarDecl input = 3;
 * @return {!Array<!proto.ric.VarDecl>}
 */
proto.ric.TranspileResponse.prototype.getInputList = function() {
  return /** @type{!Array<!proto.ric.VarDecl>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ric.VarDecl, 3));
};


/** @param {!Array<!proto.ric.VarDecl>} value */
proto.ric.TranspileResponse.prototype.setInputList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ric.VarDecl=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ric.VarDecl}
 */
proto.ric.TranspileResponse.prototype.addInput = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ric.VarDecl, opt_index);
};


proto.ric.TranspileResponse.prototype.clearInputList = function() {
  this.setInputList([]);
};


/**
 * repeated VarDecl output = 4;
 * @return {!Array<!proto.ric.VarDecl>}
 */
proto.ric.TranspileResponse.prototype.getOutputList = function() {
  return /** @type{!Array<!proto.ric.VarDecl>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ric.VarDecl, 4));
};


/** @param {!Array<!proto.ric.VarDecl>} value */
proto.ric.TranspileResponse.prototype.setOutputList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.ric.VarDecl=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ric.VarDecl}
 */
proto.ric.TranspileResponse.prototype.addOutput = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.ric.VarDecl, opt_index);
};


proto.ric.TranspileResponse.prototype.clearOutputList = function() {
  this.setOutputList([]);
};


/**
 * repeated VarDecl packet = 5;
 * @return {!Array<!proto.ric.VarDecl>}
 */
proto.ric.TranspileResponse.prototype.getPacketList = function() {
  return /** @type{!Array<!proto.ric.VarDecl>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ric.VarDecl, 5));
};


/** @param {!Array<!proto.ric.VarDecl>} value */
proto.ric.TranspileResponse.prototype.setPacketList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ric.VarDecl=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ric.VarDecl}
 */
proto.ric.TranspileResponse.prototype.addPacket = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ric.VarDecl, opt_index);
};


proto.ric.TranspileResponse.prototype.clearPacketList = function() {
  this.setPacketList([]);
};


/**
 * repeated LibRequest libs = 6;
 * @return {!Array<!proto.ric.LibRequest>}
 */
proto.ric.TranspileResponse.prototype.getLibsList = function() {
  return /** @type{!Array<!proto.ric.LibRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ric.LibRequest, 6));
};


/** @param {!Array<!proto.ric.LibRequest>} value */
proto.ric.TranspileResponse.prototype.setLibsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.ric.LibRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ric.LibRequest}
 */
proto.ric.TranspileResponse.prototype.addLibs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.ric.LibRequest, opt_index);
};


proto.ric.TranspileResponse.prototype.clearLibsList = function() {
  this.setLibsList([]);
};


/**
 * repeated string errors = 7;
 * @return {!Array<string>}
 */
proto.ric.TranspileResponse.prototype.getErrorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array<string>} value */
proto.ric.TranspileResponse.prototype.setErrorsList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.ric.TranspileResponse.prototype.addErrors = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.ric.TranspileResponse.prototype.clearErrorsList = function() {
  this.setErrorsList([]);
};


