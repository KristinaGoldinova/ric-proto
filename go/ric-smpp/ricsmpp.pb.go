// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.7.0
// source: ric-smpp/ricsmpp.proto

package ricsmpp

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StatusResponse_State int32

const (
	StatusResponse_UNKNOWN              StatusResponse_State = 0
	StatusResponse_SCHEDULE             StatusResponse_State = 1
	StatusResponse_SEND_ERROR           StatusResponse_State = 2
	StatusResponse_MAX_RETRIES_EXCEEDED StatusResponse_State = 3
	StatusResponse_SENT                 StatusResponse_State = 4
	StatusResponse_ERROR                StatusResponse_State = 5
)

// Enum value maps for StatusResponse_State.
var (
	StatusResponse_State_name = map[int32]string{
		0: "UNKNOWN",
		1: "SCHEDULE",
		2: "SEND_ERROR",
		3: "MAX_RETRIES_EXCEEDED",
		4: "SENT",
		5: "ERROR",
	}
	StatusResponse_State_value = map[string]int32{
		"UNKNOWN":              0,
		"SCHEDULE":             1,
		"SEND_ERROR":           2,
		"MAX_RETRIES_EXCEEDED": 3,
		"SENT":                 4,
		"ERROR":                5,
	}
)

func (x StatusResponse_State) Enum() *StatusResponse_State {
	p := new(StatusResponse_State)
	*p = x
	return p
}

func (x StatusResponse_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusResponse_State) Descriptor() protoreflect.EnumDescriptor {
	return file_ric_smpp_ricsmpp_proto_enumTypes[0].Descriptor()
}

func (StatusResponse_State) Type() protoreflect.EnumType {
	return &file_ric_smpp_ricsmpp_proto_enumTypes[0]
}

func (x StatusResponse_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusResponse_State.Descriptor instead.
func (StatusResponse_State) EnumDescriptor() ([]byte, []int) {
	return file_ric_smpp_ricsmpp_proto_rawDescGZIP(), []int{4, 0}
}

type UserContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId  string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SpanId  string `protobuf:"bytes,3,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
}

func (x *UserContext) Reset() {
	*x = UserContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_smpp_ricsmpp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserContext) ProtoMessage() {}

func (x *UserContext) ProtoReflect() protoreflect.Message {
	mi := &file_ric_smpp_ricsmpp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserContext.ProtoReflect.Descriptor instead.
func (*UserContext) Descriptor() ([]byte, []int) {
	return file_ric_smpp_ricsmpp_proto_rawDescGZIP(), []int{0}
}

func (x *UserContext) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *UserContext) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserContext) GetSpanId() string {
	if x != nil {
		return x.SpanId
	}
	return ""
}

type SendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *UserContext `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	GatewayId string       `protobuf:"bytes,2,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	Phone     string       `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Message   string       `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SendRequest) Reset() {
	*x = SendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_smpp_ricsmpp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRequest) ProtoMessage() {}

func (x *SendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_smpp_ricsmpp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRequest.ProtoReflect.Descriptor instead.
func (*SendRequest) Descriptor() ([]byte, []int) {
	return file_ric_smpp_ricsmpp_proto_rawDescGZIP(), []int{1}
}

func (x *SendRequest) GetCtx() *UserContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *SendRequest) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

func (x *SendRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *SendRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *SendResponse) Reset() {
	*x = SendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_smpp_ricsmpp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendResponse) ProtoMessage() {}

func (x *SendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_smpp_ricsmpp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendResponse.ProtoReflect.Descriptor instead.
func (*SendResponse) Descriptor() ([]byte, []int) {
	return file_ric_smpp_ricsmpp_proto_rawDescGZIP(), []int{2}
}

func (x *SendResponse) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

type StatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayId string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	MessageId string `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_smpp_ricsmpp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_smpp_ricsmpp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_ric_smpp_ricsmpp_proto_rawDescGZIP(), []int{3}
}

func (x *StatusRequest) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

func (x *StatusRequest) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State       StatusResponse_State       `protobuf:"varint,1,opt,name=state,proto3,enum=ric.smpp.StatusResponse_State" json:"state,omitempty"`
	Description string                     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	SmppStatus  *StatusResponse_SMPPStatus `protobuf:"bytes,3,opt,name=smpp_status,json=smppStatus,proto3" json:"smpp_status,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_smpp_ricsmpp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_smpp_ricsmpp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_ric_smpp_ricsmpp_proto_rawDescGZIP(), []int{4}
}

func (x *StatusResponse) GetState() StatusResponse_State {
	if x != nil {
		return x.State
	}
	return StatusResponse_UNKNOWN
}

func (x *StatusResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StatusResponse) GetSmppStatus() *StatusResponse_SMPPStatus {
	if x != nil {
		return x.SmppStatus
	}
	return nil
}

type GatewayInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayId string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
}

func (x *GatewayInfoRequest) Reset() {
	*x = GatewayInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_smpp_ricsmpp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayInfoRequest) ProtoMessage() {}

func (x *GatewayInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_smpp_ricsmpp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayInfoRequest.ProtoReflect.Descriptor instead.
func (*GatewayInfoRequest) Descriptor() ([]byte, []int) {
	return file_ric_smpp_ricsmpp_proto_rawDescGZIP(), []int{5}
}

func (x *GatewayInfoRequest) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

type GatewayInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Online bool  `protobuf:"varint,1,opt,name=online,proto3" json:"online,omitempty"`
	Uptime int64 `protobuf:"varint,2,opt,name=uptime,proto3" json:"uptime,omitempty"`
}

func (x *GatewayInfoResponse) Reset() {
	*x = GatewayInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_smpp_ricsmpp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayInfoResponse) ProtoMessage() {}

func (x *GatewayInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_smpp_ricsmpp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayInfoResponse.ProtoReflect.Descriptor instead.
func (*GatewayInfoResponse) Descriptor() ([]byte, []int) {
	return file_ric_smpp_ricsmpp_proto_rawDescGZIP(), []int{6}
}

func (x *GatewayInfoResponse) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *GatewayInfoResponse) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

type StatusResponse_SMPPStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId     string `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	MsgState  string `protobuf:"bytes,2,opt,name=msg_state,json=msgState,proto3" json:"msg_state,omitempty"`
	FinalDate string `protobuf:"bytes,3,opt,name=final_date,json=finalDate,proto3" json:"final_date,omitempty"`
	ErrCode   int32  `protobuf:"varint,4,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"`
}

func (x *StatusResponse_SMPPStatus) Reset() {
	*x = StatusResponse_SMPPStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_smpp_ricsmpp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse_SMPPStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse_SMPPStatus) ProtoMessage() {}

func (x *StatusResponse_SMPPStatus) ProtoReflect() protoreflect.Message {
	mi := &file_ric_smpp_ricsmpp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse_SMPPStatus.ProtoReflect.Descriptor instead.
func (*StatusResponse_SMPPStatus) Descriptor() ([]byte, []int) {
	return file_ric_smpp_ricsmpp_proto_rawDescGZIP(), []int{4, 0}
}

func (x *StatusResponse_SMPPStatus) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *StatusResponse_SMPPStatus) GetMsgState() string {
	if x != nil {
		return x.MsgState
	}
	return ""
}

func (x *StatusResponse_SMPPStatus) GetFinalDate() string {
	if x != nil {
		return x.FinalDate
	}
	return ""
}

func (x *StatusResponse_SMPPStatus) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

var File_ric_smpp_ricsmpp_proto protoreflect.FileDescriptor

var file_ric_smpp_ricsmpp_proto_rawDesc = []byte{
	0x0a, 0x16, 0x72, 0x69, 0x63, 0x2d, 0x73, 0x6d, 0x70, 0x70, 0x2f, 0x72, 0x69, 0x63, 0x73, 0x6d,
	0x70, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x72, 0x69, 0x63, 0x2e, 0x73, 0x6d,
	0x70, 0x70, 0x22, 0x5a, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x85,
	0x01, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x69,
	0x63, 0x2e, 0x73, 0x6d, 0x70, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2d, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x22, 0x8d, 0x03, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x73, 0x6d, 0x70,
	0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x44, 0x0a, 0x0b, 0x73, 0x6d, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x73, 0x6d, 0x70, 0x70, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x4d, 0x50, 0x50, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x73, 0x6d, 0x70, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x7a, 0x0a, 0x0a, 0x53, 0x4d, 0x50, 0x50, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x73,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x61, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x43, 0x48, 0x45, 0x44,
	0x55, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x54,
	0x52, 0x49, 0x45, 0x53, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x08, 0x0a, 0x04, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x05, 0x22, 0x33, 0x0a, 0x12, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x13, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x32, 0xc6, 0x01, 0x0a, 0x04, 0x53, 0x4d, 0x50, 0x50, 0x12, 0x35, 0x0a, 0x04, 0x53, 0x65, 0x6e,
	0x64, 0x12, 0x15, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x73, 0x6d, 0x70, 0x70, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x73,
	0x6d, 0x70, 0x70, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x2e, 0x72, 0x69, 0x63,
	0x2e, 0x73, 0x6d, 0x70, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x73, 0x6d, 0x70, 0x70, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a,
	0x0b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x73, 0x6d, 0x70, 0x70, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x69, 0x63,
	0x2e, 0x73, 0x6d, 0x70, 0x70, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x14, 0x5a, 0x12, 0x2e, 0x2f, 0x72,
	0x69, 0x63, 0x2d, 0x73, 0x6d, 0x70, 0x70, 0x3b, 0x72, 0x69, 0x63, 0x73, 0x6d, 0x70, 0x70, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ric_smpp_ricsmpp_proto_rawDescOnce sync.Once
	file_ric_smpp_ricsmpp_proto_rawDescData = file_ric_smpp_ricsmpp_proto_rawDesc
)

func file_ric_smpp_ricsmpp_proto_rawDescGZIP() []byte {
	file_ric_smpp_ricsmpp_proto_rawDescOnce.Do(func() {
		file_ric_smpp_ricsmpp_proto_rawDescData = protoimpl.X.CompressGZIP(file_ric_smpp_ricsmpp_proto_rawDescData)
	})
	return file_ric_smpp_ricsmpp_proto_rawDescData
}

var file_ric_smpp_ricsmpp_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ric_smpp_ricsmpp_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_ric_smpp_ricsmpp_proto_goTypes = []interface{}{
	(StatusResponse_State)(0),         // 0: ric.smpp.StatusResponse.State
	(*UserContext)(nil),               // 1: ric.smpp.UserContext
	(*SendRequest)(nil),               // 2: ric.smpp.SendRequest
	(*SendResponse)(nil),              // 3: ric.smpp.SendResponse
	(*StatusRequest)(nil),             // 4: ric.smpp.StatusRequest
	(*StatusResponse)(nil),            // 5: ric.smpp.StatusResponse
	(*GatewayInfoRequest)(nil),        // 6: ric.smpp.GatewayInfoRequest
	(*GatewayInfoResponse)(nil),       // 7: ric.smpp.GatewayInfoResponse
	(*StatusResponse_SMPPStatus)(nil), // 8: ric.smpp.StatusResponse.SMPPStatus
}
var file_ric_smpp_ricsmpp_proto_depIdxs = []int32{
	1, // 0: ric.smpp.SendRequest.ctx:type_name -> ric.smpp.UserContext
	0, // 1: ric.smpp.StatusResponse.state:type_name -> ric.smpp.StatusResponse.State
	8, // 2: ric.smpp.StatusResponse.smpp_status:type_name -> ric.smpp.StatusResponse.SMPPStatus
	2, // 3: ric.smpp.SMPP.Send:input_type -> ric.smpp.SendRequest
	4, // 4: ric.smpp.SMPP.Status:input_type -> ric.smpp.StatusRequest
	6, // 5: ric.smpp.SMPP.GatewayInfo:input_type -> ric.smpp.GatewayInfoRequest
	3, // 6: ric.smpp.SMPP.Send:output_type -> ric.smpp.SendResponse
	5, // 7: ric.smpp.SMPP.Status:output_type -> ric.smpp.StatusResponse
	7, // 8: ric.smpp.SMPP.GatewayInfo:output_type -> ric.smpp.GatewayInfoResponse
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_ric_smpp_ricsmpp_proto_init() }
func file_ric_smpp_ricsmpp_proto_init() {
	if File_ric_smpp_ricsmpp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ric_smpp_ricsmpp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_smpp_ricsmpp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_smpp_ricsmpp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_smpp_ricsmpp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_smpp_ricsmpp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_smpp_ricsmpp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_smpp_ricsmpp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_smpp_ricsmpp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse_SMPPStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ric_smpp_ricsmpp_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ric_smpp_ricsmpp_proto_goTypes,
		DependencyIndexes: file_ric_smpp_ricsmpp_proto_depIdxs,
		EnumInfos:         file_ric_smpp_ricsmpp_proto_enumTypes,
		MessageInfos:      file_ric_smpp_ricsmpp_proto_msgTypes,
	}.Build()
	File_ric_smpp_ricsmpp_proto = out.File
	file_ric_smpp_ricsmpp_proto_rawDesc = nil
	file_ric_smpp_ricsmpp_proto_goTypes = nil
	file_ric_smpp_ricsmpp_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SMPPClient is the client API for SMPP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SMPPClient interface {
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	GatewayInfo(ctx context.Context, in *GatewayInfoRequest, opts ...grpc.CallOption) (*GatewayInfoResponse, error)
}

type sMPPClient struct {
	cc grpc.ClientConnInterface
}

func NewSMPPClient(cc grpc.ClientConnInterface) SMPPClient {
	return &sMPPClient{cc}
}

func (c *sMPPClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, "/ric.smpp.SMPP/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMPPClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/ric.smpp.SMPP/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMPPClient) GatewayInfo(ctx context.Context, in *GatewayInfoRequest, opts ...grpc.CallOption) (*GatewayInfoResponse, error) {
	out := new(GatewayInfoResponse)
	err := c.cc.Invoke(ctx, "/ric.smpp.SMPP/GatewayInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SMPPServer is the server API for SMPP service.
type SMPPServer interface {
	Send(context.Context, *SendRequest) (*SendResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	GatewayInfo(context.Context, *GatewayInfoRequest) (*GatewayInfoResponse, error)
}

// UnimplementedSMPPServer can be embedded to have forward compatible implementations.
type UnimplementedSMPPServer struct {
}

func (*UnimplementedSMPPServer) Send(context.Context, *SendRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (*UnimplementedSMPPServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedSMPPServer) GatewayInfo(context.Context, *GatewayInfoRequest) (*GatewayInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayInfo not implemented")
}

func RegisterSMPPServer(s *grpc.Server, srv SMPPServer) {
	s.RegisterService(&_SMPP_serviceDesc, srv)
}

func _SMPP_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMPPServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.smpp.SMPP/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMPPServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMPP_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMPPServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.smpp.SMPP/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMPPServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMPP_GatewayInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMPPServer).GatewayInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.smpp.SMPP/GatewayInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMPPServer).GatewayInfo(ctx, req.(*GatewayInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SMPP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ric.smpp.SMPP",
	HandlerType: (*SMPPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _SMPP_Send_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _SMPP_Status_Handler,
		},
		{
			MethodName: "GatewayInfo",
			Handler:    _SMPP_GatewayInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ric-smpp/ricsmpp.proto",
}
