// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ric-geo/ricgeo.proto

package ricgeo

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EmptyResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyResponse) Reset()         { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()    {}
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd0c87ff6803edb, []int{0}
}

func (m *EmptyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyResponse.Unmarshal(m, b)
}
func (m *EmptyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyResponse.Marshal(b, m, deterministic)
}
func (m *EmptyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyResponse.Merge(m, src)
}
func (m *EmptyResponse) XXX_Size() int {
	return xxx_messageInfo_EmptyResponse.Size(m)
}
func (m *EmptyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyResponse proto.InternalMessageInfo

type WatchRequest struct {
	Oid                  string   `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	GeofenceID           string   `protobuf:"bytes,2,opt,name=geofenceID,proto3" json:"geofenceID,omitempty"`
	EventType            string   `protobuf:"bytes,3,opt,name=eventType,proto3" json:"eventType,omitempty"`
	ShapeID              string   `protobuf:"bytes,4,opt,name=shapeID,proto3" json:"shapeID,omitempty"`
	RoomID               string   `protobuf:"bytes,5,opt,name=roomID,proto3" json:"roomID,omitempty"`
	RouteID              string   `protobuf:"bytes,6,opt,name=routeID,proto3" json:"routeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchRequest) Reset()         { *m = WatchRequest{} }
func (m *WatchRequest) String() string { return proto.CompactTextString(m) }
func (*WatchRequest) ProtoMessage()    {}
func (*WatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd0c87ff6803edb, []int{1}
}

func (m *WatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchRequest.Unmarshal(m, b)
}
func (m *WatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchRequest.Marshal(b, m, deterministic)
}
func (m *WatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchRequest.Merge(m, src)
}
func (m *WatchRequest) XXX_Size() int {
	return xxx_messageInfo_WatchRequest.Size(m)
}
func (m *WatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchRequest proto.InternalMessageInfo

func (m *WatchRequest) GetOid() string {
	if m != nil {
		return m.Oid
	}
	return ""
}

func (m *WatchRequest) GetGeofenceID() string {
	if m != nil {
		return m.GeofenceID
	}
	return ""
}

func (m *WatchRequest) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *WatchRequest) GetShapeID() string {
	if m != nil {
		return m.ShapeID
	}
	return ""
}

func (m *WatchRequest) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

func (m *WatchRequest) GetRouteID() string {
	if m != nil {
		return m.RouteID
	}
	return ""
}

type ControlRequest struct {
	Oid                  string   `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Time                 *Time    `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Circle               *Circle  `protobuf:"bytes,3,opt,name=circle,proto3" json:"circle,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControlRequest) Reset()         { *m = ControlRequest{} }
func (m *ControlRequest) String() string { return proto.CompactTextString(m) }
func (*ControlRequest) ProtoMessage()    {}
func (*ControlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd0c87ff6803edb, []int{2}
}

func (m *ControlRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlRequest.Unmarshal(m, b)
}
func (m *ControlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlRequest.Marshal(b, m, deterministic)
}
func (m *ControlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlRequest.Merge(m, src)
}
func (m *ControlRequest) XXX_Size() int {
	return xxx_messageInfo_ControlRequest.Size(m)
}
func (m *ControlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ControlRequest proto.InternalMessageInfo

func (m *ControlRequest) GetOid() string {
	if m != nil {
		return m.Oid
	}
	return ""
}

func (m *ControlRequest) GetTime() *Time {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *ControlRequest) GetCircle() *Circle {
	if m != nil {
		return m.Circle
	}
	return nil
}

type Time struct {
	Start                int64    `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	Interval             int64    `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Time) Reset()         { *m = Time{} }
func (m *Time) String() string { return proto.CompactTextString(m) }
func (*Time) ProtoMessage()    {}
func (*Time) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd0c87ff6803edb, []int{3}
}

func (m *Time) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Time.Unmarshal(m, b)
}
func (m *Time) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Time.Marshal(b, m, deterministic)
}
func (m *Time) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Time.Merge(m, src)
}
func (m *Time) XXX_Size() int {
	return xxx_messageInfo_Time.Size(m)
}
func (m *Time) XXX_DiscardUnknown() {
	xxx_messageInfo_Time.DiscardUnknown(m)
}

var xxx_messageInfo_Time proto.InternalMessageInfo

func (m *Time) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Time) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

type Circle struct {
	Lat                  float64  `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon                  float64  `protobuf:"fixed64,2,opt,name=lon,proto3" json:"lon,omitempty"`
	Radius               float64  `protobuf:"fixed64,3,opt,name=radius,proto3" json:"radius,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Circle) Reset()         { *m = Circle{} }
func (m *Circle) String() string { return proto.CompactTextString(m) }
func (*Circle) ProtoMessage()    {}
func (*Circle) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd0c87ff6803edb, []int{4}
}

func (m *Circle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Circle.Unmarshal(m, b)
}
func (m *Circle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Circle.Marshal(b, m, deterministic)
}
func (m *Circle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Circle.Merge(m, src)
}
func (m *Circle) XXX_Size() int {
	return xxx_messageInfo_Circle.Size(m)
}
func (m *Circle) XXX_DiscardUnknown() {
	xxx_messageInfo_Circle.DiscardUnknown(m)
}

var xxx_messageInfo_Circle proto.InternalMessageInfo

func (m *Circle) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Circle) GetLon() float64 {
	if m != nil {
		return m.Lon
	}
	return 0
}

func (m *Circle) GetRadius() float64 {
	if m != nil {
		return m.Radius
	}
	return 0
}

type OSMResponse struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OSMResponse) Reset()         { *m = OSMResponse{} }
func (m *OSMResponse) String() string { return proto.CompactTextString(m) }
func (*OSMResponse) ProtoMessage()    {}
func (*OSMResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd0c87ff6803edb, []int{5}
}

func (m *OSMResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OSMResponse.Unmarshal(m, b)
}
func (m *OSMResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OSMResponse.Marshal(b, m, deterministic)
}
func (m *OSMResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSMResponse.Merge(m, src)
}
func (m *OSMResponse) XXX_Size() int {
	return xxx_messageInfo_OSMResponse.Size(m)
}
func (m *OSMResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OSMResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OSMResponse proto.InternalMessageInfo

func (m *OSMResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type GeocodeRequest struct {
	Query                string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GeocodeRequest) Reset()         { *m = GeocodeRequest{} }
func (m *GeocodeRequest) String() string { return proto.CompactTextString(m) }
func (*GeocodeRequest) ProtoMessage()    {}
func (*GeocodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd0c87ff6803edb, []int{6}
}

func (m *GeocodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeocodeRequest.Unmarshal(m, b)
}
func (m *GeocodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeocodeRequest.Marshal(b, m, deterministic)
}
func (m *GeocodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeocodeRequest.Merge(m, src)
}
func (m *GeocodeRequest) XXX_Size() int {
	return xxx_messageInfo_GeocodeRequest.Size(m)
}
func (m *GeocodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GeocodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GeocodeRequest proto.InternalMessageInfo

func (m *GeocodeRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type Point struct {
	Lat                  float64  `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon                  float64  `protobuf:"fixed64,2,opt,name=lon,proto3" json:"lon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd0c87ff6803edb, []int{7}
}

func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Point) GetLon() float64 {
	if m != nil {
		return m.Lon
	}
	return 0
}

type GeocodeReverseRequest struct {
	Point                *Point   `protobuf:"bytes,1,opt,name=point,proto3" json:"point,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GeocodeReverseRequest) Reset()         { *m = GeocodeReverseRequest{} }
func (m *GeocodeReverseRequest) String() string { return proto.CompactTextString(m) }
func (*GeocodeReverseRequest) ProtoMessage()    {}
func (*GeocodeReverseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd0c87ff6803edb, []int{8}
}

func (m *GeocodeReverseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeocodeReverseRequest.Unmarshal(m, b)
}
func (m *GeocodeReverseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeocodeReverseRequest.Marshal(b, m, deterministic)
}
func (m *GeocodeReverseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeocodeReverseRequest.Merge(m, src)
}
func (m *GeocodeReverseRequest) XXX_Size() int {
	return xxx_messageInfo_GeocodeReverseRequest.Size(m)
}
func (m *GeocodeReverseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GeocodeReverseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GeocodeReverseRequest proto.InternalMessageInfo

func (m *GeocodeReverseRequest) GetPoint() *Point {
	if m != nil {
		return m.Point
	}
	return nil
}

type GetRouteRequest struct {
	Coordinates          []*Point `protobuf:"bytes,1,rep,name=coordinates,proto3" json:"coordinates,omitempty"`
	Options              []byte   `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRouteRequest) Reset()         { *m = GetRouteRequest{} }
func (m *GetRouteRequest) String() string { return proto.CompactTextString(m) }
func (*GetRouteRequest) ProtoMessage()    {}
func (*GetRouteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd0c87ff6803edb, []int{9}
}

func (m *GetRouteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRouteRequest.Unmarshal(m, b)
}
func (m *GetRouteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRouteRequest.Marshal(b, m, deterministic)
}
func (m *GetRouteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRouteRequest.Merge(m, src)
}
func (m *GetRouteRequest) XXX_Size() int {
	return xxx_messageInfo_GetRouteRequest.Size(m)
}
func (m *GetRouteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRouteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRouteRequest proto.InternalMessageInfo

func (m *GetRouteRequest) GetCoordinates() []*Point {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *GetRouteRequest) GetOptions() []byte {
	if m != nil {
		return m.Options
	}
	return nil
}

func init() {
	proto.RegisterType((*EmptyResponse)(nil), "ric.geo.EmptyResponse")
	proto.RegisterType((*WatchRequest)(nil), "ric.geo.WatchRequest")
	proto.RegisterType((*ControlRequest)(nil), "ric.geo.ControlRequest")
	proto.RegisterType((*Time)(nil), "ric.geo.Time")
	proto.RegisterType((*Circle)(nil), "ric.geo.Circle")
	proto.RegisterType((*OSMResponse)(nil), "ric.geo.OSMResponse")
	proto.RegisterType((*GeocodeRequest)(nil), "ric.geo.GeocodeRequest")
	proto.RegisterType((*Point)(nil), "ric.geo.Point")
	proto.RegisterType((*GeocodeReverseRequest)(nil), "ric.geo.GeocodeReverseRequest")
	proto.RegisterType((*GetRouteRequest)(nil), "ric.geo.GetRouteRequest")
}

func init() { proto.RegisterFile("ric-geo/ricgeo.proto", fileDescriptor_7dd0c87ff6803edb) }

var fileDescriptor_7dd0c87ff6803edb = []byte{
	// 580 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xdf, 0x6a, 0x13, 0x4f,
	0x14, 0x66, 0x7f, 0x9b, 0xdd, 0xb4, 0x27, 0x4d, 0xf2, 0xeb, 0x90, 0xd6, 0x25, 0x48, 0x69, 0x17,
	0x51, 0x41, 0x8c, 0x12, 0x6f, 0x4a, 0xc4, 0x8a, 0x6d, 0x34, 0xf4, 0xa2, 0x44, 0x26, 0x05, 0x41,
	0xf0, 0x62, 0xdd, 0x3d, 0xa6, 0x03, 0xc9, 0x9c, 0xed, 0xec, 0x24, 0x90, 0x07, 0xf0, 0x65, 0x7c,
	0x0d, 0x5f, 0x4c, 0x76, 0xf6, 0x4f, 0x37, 0xd8, 0x80, 0xd1, 0xbb, 0xf3, 0x67, 0xbe, 0x6f, 0xbe,
	0x3d, 0xfb, 0x9d, 0x81, 0x8e, 0x12, 0xe1, 0xf3, 0x29, 0xd2, 0x0b, 0x25, 0xc2, 0x29, 0x52, 0x2f,
	0x56, 0xa4, 0x89, 0xd5, 0x95, 0x08, 0x7b, 0x53, 0x24, 0xbf, 0x0d, 0xcd, 0xf7, 0xf3, 0x58, 0xaf,
	0x38, 0x26, 0x31, 0xc9, 0x04, 0xfd, 0x1f, 0x16, 0xec, 0x7d, 0x0a, 0x74, 0x78, 0xc3, 0xf1, 0x76,
	0x81, 0x89, 0x66, 0xff, 0x83, 0x4d, 0x22, 0xf2, 0xac, 0x63, 0xeb, 0xe9, 0x2e, 0x4f, 0x43, 0x76,
	0x04, 0x30, 0x45, 0xfa, 0x86, 0x32, 0xc4, 0xcb, 0xa1, 0xf7, 0x9f, 0x69, 0x54, 0x2a, 0xec, 0x21,
	0xec, 0xe2, 0x12, 0xa5, 0xbe, 0x5e, 0xc5, 0xe8, 0xd9, 0xa6, 0x7d, 0x57, 0x60, 0x1e, 0xd4, 0x93,
	0x9b, 0x20, 0x4e, 0xa1, 0x35, 0xd3, 0x2b, 0x52, 0x76, 0x08, 0xae, 0x22, 0x9a, 0x5f, 0x0e, 0x3d,
	0xc7, 0x34, 0xf2, 0x2c, 0x45, 0x28, 0x5a, 0xe8, 0x14, 0xe1, 0x66, 0x88, 0x3c, 0xf5, 0x25, 0xb4,
	0x2e, 0x48, 0x6a, 0x45, 0xb3, 0xcd, 0x6a, 0x4f, 0xa0, 0xa6, 0xc5, 0x1c, 0x8d, 0xce, 0x46, 0xbf,
	0xd9, 0xcb, 0xbf, 0xbc, 0x77, 0x2d, 0xe6, 0xc8, 0x4d, 0x8b, 0x3d, 0x01, 0x37, 0x14, 0x2a, 0x9c,
	0x65, 0x6a, 0x1b, 0xfd, 0x76, 0x79, 0xe8, 0xc2, 0x94, 0x79, 0xde, 0xf6, 0x4f, 0xa1, 0x96, 0xc2,
	0x58, 0x07, 0x9c, 0x44, 0x07, 0x4a, 0x9b, 0x7b, 0x6c, 0x9e, 0x25, 0xac, 0x0b, 0x3b, 0x42, 0x6a,
	0x54, 0xcb, 0x60, 0x66, 0x6e, 0xb3, 0x79, 0x99, 0xfb, 0x43, 0x70, 0x33, 0xae, 0x54, 0xe1, 0x2c,
	0xc8, 0x90, 0x16, 0x4f, 0x43, 0x53, 0x21, 0x69, 0x20, 0x69, 0x85, 0xa4, 0x99, 0x44, 0x10, 0x89,
	0x45, 0x62, 0x04, 0x59, 0x3c, 0xcf, 0xfc, 0x13, 0x68, 0x8c, 0x27, 0x57, 0xc5, 0xbf, 0x62, 0x0c,
	0x6a, 0x51, 0xa0, 0x03, 0xc3, 0xb5, 0xc7, 0x4d, 0xec, 0x3f, 0x86, 0xd6, 0x08, 0x29, 0xa4, 0x08,
	0x8b, 0x91, 0x74, 0xc0, 0xb9, 0x5d, 0xa0, 0x5a, 0xe5, 0x43, 0xc9, 0x12, 0xff, 0x19, 0x38, 0x1f,
	0x49, 0x48, 0xfd, 0x27, 0x7a, 0xfc, 0x37, 0x70, 0x50, 0x92, 0x2e, 0x51, 0x25, 0x25, 0xf7, 0x23,
	0x70, 0xe2, 0x94, 0xc5, 0xc0, 0x1b, 0xfd, 0x56, 0x39, 0x38, 0xc3, 0xcd, 0xb3, 0xa6, 0xff, 0x05,
	0xda, 0x23, 0xd4, 0x3c, 0xfd, 0x69, 0x05, 0xf0, 0x25, 0x34, 0x42, 0x22, 0x15, 0x09, 0x19, 0x68,
	0x4c, 0x3c, 0xeb, 0xd8, 0xbe, 0x07, 0x5e, 0x3d, 0x92, 0xba, 0x80, 0x62, 0x2d, 0x48, 0x26, 0x46,
	0xd9, 0x1e, 0x2f, 0xd2, 0xfe, 0x77, 0x1b, 0x1c, 0x63, 0x59, 0x76, 0x06, 0x4d, 0x13, 0x8c, 0x72,
	0x33, 0xb2, 0x83, 0x92, 0xb1, 0xea, 0xe9, 0xee, 0x61, 0x59, 0x5e, 0x33, 0x3f, 0x3b, 0x87, 0xfd,
	0x89, 0xa6, 0xf8, 0x9f, 0x38, 0x06, 0xb0, 0x9b, 0x9d, 0x23, 0x9a, 0x6f, 0x8b, 0x3d, 0x83, 0x66,
	0x79, 0xff, 0xdf, 0xe0, 0x5f, 0x03, 0xe4, 0xd8, 0x85, 0xde, 0x5a, 0xf8, 0x5b, 0x68, 0x55, 0x2e,
	0xdf, 0x9e, 0xa0, 0x3f, 0x86, 0xfd, 0x77, 0x5a, 0xa3, 0x8c, 0x02, 0x19, 0x62, 0xbe, 0x97, 0x6c,
	0x00, 0xf5, 0x22, 0x7c, 0x70, 0xb7, 0x56, 0x6b, 0x4b, 0xbb, 0x91, 0xf0, 0xa7, 0x05, 0xf6, 0x78,
	0x72, 0xc5, 0x4e, 0xa1, 0x9e, 0xdb, 0xaf, 0xc2, 0xb1, 0xee, 0xf2, 0x6e, 0xa7, 0x6c, 0x54, 0x37,
	0xe4, 0x43, 0x65, 0x1b, 0x8c, 0x71, 0xd9, 0xd1, 0xef, 0x04, 0x55, 0x47, 0x6f, 0xe0, 0x19, 0xc0,
	0x4e, 0xe1, 0x60, 0xe6, 0x55, 0x18, 0xd6, 0x4c, 0x7d, 0x3f, 0xf6, 0x7c, 0xe7, 0xb3, 0x9b, 0xbd,
	0xbd, 0x5f, 0x5d, 0xf3, 0xf8, 0xbe, 0xfa, 0x15, 0x00, 0x00, 0xff, 0xff, 0x0e, 0xf7, 0x53, 0x43,
	0x94, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WatchClient is the client API for Watch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WatchClient interface {
	WatchGeofence(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	StopWatchGeofence(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	WatchRoom(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	StopWatchRoom(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	WatchRoute(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	StopWatchRoute(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type watchClient struct {
	cc *grpc.ClientConn
}

func NewWatchClient(cc *grpc.ClientConn) WatchClient {
	return &watchClient{cc}
}

func (c *watchClient) WatchGeofence(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.Watch/WatchGeofence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchClient) StopWatchGeofence(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.Watch/StopWatchGeofence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchClient) WatchRoom(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.Watch/WatchRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchClient) StopWatchRoom(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.Watch/StopWatchRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchClient) WatchRoute(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.Watch/WatchRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchClient) StopWatchRoute(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.Watch/StopWatchRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatchServer is the server API for Watch service.
type WatchServer interface {
	WatchGeofence(context.Context, *WatchRequest) (*EmptyResponse, error)
	StopWatchGeofence(context.Context, *WatchRequest) (*EmptyResponse, error)
	WatchRoom(context.Context, *WatchRequest) (*EmptyResponse, error)
	StopWatchRoom(context.Context, *WatchRequest) (*EmptyResponse, error)
	WatchRoute(context.Context, *WatchRequest) (*EmptyResponse, error)
	StopWatchRoute(context.Context, *WatchRequest) (*EmptyResponse, error)
}

func RegisterWatchServer(s *grpc.Server, srv WatchServer) {
	s.RegisterService(&_Watch_serviceDesc, srv)
}

func _Watch_WatchGeofence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServer).WatchGeofence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.Watch/WatchGeofence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServer).WatchGeofence(ctx, req.(*WatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watch_StopWatchGeofence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServer).StopWatchGeofence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.Watch/StopWatchGeofence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServer).StopWatchGeofence(ctx, req.(*WatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watch_WatchRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServer).WatchRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.Watch/WatchRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServer).WatchRoom(ctx, req.(*WatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watch_StopWatchRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServer).StopWatchRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.Watch/StopWatchRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServer).StopWatchRoom(ctx, req.(*WatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watch_WatchRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServer).WatchRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.Watch/WatchRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServer).WatchRoute(ctx, req.(*WatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watch_StopWatchRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServer).StopWatchRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.Watch/StopWatchRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServer).StopWatchRoute(ctx, req.(*WatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Watch_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ric.geo.Watch",
	HandlerType: (*WatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WatchGeofence",
			Handler:    _Watch_WatchGeofence_Handler,
		},
		{
			MethodName: "StopWatchGeofence",
			Handler:    _Watch_StopWatchGeofence_Handler,
		},
		{
			MethodName: "WatchRoom",
			Handler:    _Watch_WatchRoom_Handler,
		},
		{
			MethodName: "StopWatchRoom",
			Handler:    _Watch_StopWatchRoom_Handler,
		},
		{
			MethodName: "WatchRoute",
			Handler:    _Watch_WatchRoute_Handler,
		},
		{
			MethodName: "StopWatchRoute",
			Handler:    _Watch_StopWatchRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ric-geo/ricgeo.proto",
}

// AttendanceControlClient is the client API for AttendanceControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AttendanceControlClient interface {
	Control(ctx context.Context, in *ControlRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type attendanceControlClient struct {
	cc *grpc.ClientConn
}

func NewAttendanceControlClient(cc *grpc.ClientConn) AttendanceControlClient {
	return &attendanceControlClient{cc}
}

func (c *attendanceControlClient) Control(ctx context.Context, in *ControlRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.AttendanceControl/Control", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttendanceControlServer is the server API for AttendanceControl service.
type AttendanceControlServer interface {
	Control(context.Context, *ControlRequest) (*EmptyResponse, error)
}

func RegisterAttendanceControlServer(s *grpc.Server, srv AttendanceControlServer) {
	s.RegisterService(&_AttendanceControl_serviceDesc, srv)
}

func _AttendanceControl_Control_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceControlServer).Control(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.AttendanceControl/Control",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceControlServer).Control(ctx, req.(*ControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AttendanceControl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ric.geo.AttendanceControl",
	HandlerType: (*AttendanceControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Control",
			Handler:    _AttendanceControl_Control_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ric-geo/ricgeo.proto",
}

// OSMClient is the client API for OSM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OSMClient interface {
	Geocode(ctx context.Context, in *GeocodeRequest, opts ...grpc.CallOption) (*OSMResponse, error)
	GeocodeReverse(ctx context.Context, in *GeocodeReverseRequest, opts ...grpc.CallOption) (*OSMResponse, error)
	GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*OSMResponse, error)
}

type oSMClient struct {
	cc *grpc.ClientConn
}

func NewOSMClient(cc *grpc.ClientConn) OSMClient {
	return &oSMClient{cc}
}

func (c *oSMClient) Geocode(ctx context.Context, in *GeocodeRequest, opts ...grpc.CallOption) (*OSMResponse, error) {
	out := new(OSMResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.OSM/Geocode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSMClient) GeocodeReverse(ctx context.Context, in *GeocodeReverseRequest, opts ...grpc.CallOption) (*OSMResponse, error) {
	out := new(OSMResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.OSM/GeocodeReverse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSMClient) GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*OSMResponse, error) {
	out := new(OSMResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.OSM/GetRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OSMServer is the server API for OSM service.
type OSMServer interface {
	Geocode(context.Context, *GeocodeRequest) (*OSMResponse, error)
	GeocodeReverse(context.Context, *GeocodeReverseRequest) (*OSMResponse, error)
	GetRoute(context.Context, *GetRouteRequest) (*OSMResponse, error)
}

func RegisterOSMServer(s *grpc.Server, srv OSMServer) {
	s.RegisterService(&_OSM_serviceDesc, srv)
}

func _OSM_Geocode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeocodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSMServer).Geocode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.OSM/Geocode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSMServer).Geocode(ctx, req.(*GeocodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSM_GeocodeReverse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeocodeReverseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSMServer).GeocodeReverse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.OSM/GeocodeReverse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSMServer).GeocodeReverse(ctx, req.(*GeocodeReverseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSM_GetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSMServer).GetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.OSM/GetRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSMServer).GetRoute(ctx, req.(*GetRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OSM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ric.geo.OSM",
	HandlerType: (*OSMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Geocode",
			Handler:    _OSM_Geocode_Handler,
		},
		{
			MethodName: "GeocodeReverse",
			Handler:    _OSM_GeocodeReverse_Handler,
		},
		{
			MethodName: "GetRoute",
			Handler:    _OSM_GetRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ric-geo/ricgeo.proto",
}
