// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ric-geo/ricgeo.proto

#include "ric-geo/ricgeo.pb.h"
#include "ric-geo/ricgeo.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ric {
namespace geo {

static const char* Watch_method_names[] = {
  "/ric.geo.Watch/WatchGeofence",
  "/ric.geo.Watch/StopWatchGeofence",
  "/ric.geo.Watch/WatchRoom",
  "/ric.geo.Watch/StopWatchRoom",
  "/ric.geo.Watch/WatchRoute",
  "/ric.geo.Watch/StopWatchRoute",
  "/ric.geo.Watch/UpdateGeo",
  "/ric.geo.Watch/GetObjectInfo",
};

std::unique_ptr< Watch::Stub> Watch::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Watch::Stub> stub(new Watch::Stub(channel));
  return stub;
}

Watch::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_WatchGeofence_(Watch_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopWatchGeofence_(Watch_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WatchRoom_(Watch_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopWatchRoom_(Watch_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WatchRoute_(Watch_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopWatchRoute_(Watch_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateGeo_(Watch_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetObjectInfo_(Watch_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Watch::Stub::WatchGeofence(::grpc::ClientContext* context, const ::ric::geo::WatchGeofenceRequest& request, ::ric::geo::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_WatchGeofence_, context, request, response);
}

void Watch::Stub::experimental_async::WatchGeofence(::grpc::ClientContext* context, const ::ric::geo::WatchGeofenceRequest* request, ::ric::geo::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WatchGeofence_, context, request, response, std::move(f));
}

void Watch::Stub::experimental_async::WatchGeofence(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WatchGeofence_, context, request, response, std::move(f));
}

void Watch::Stub::experimental_async::WatchGeofence(::grpc::ClientContext* context, const ::ric::geo::WatchGeofenceRequest* request, ::ric::geo::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WatchGeofence_, context, request, response, reactor);
}

void Watch::Stub::experimental_async::WatchGeofence(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WatchGeofence_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::EmptyResponse>* Watch::Stub::AsyncWatchGeofenceRaw(::grpc::ClientContext* context, const ::ric::geo::WatchGeofenceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_WatchGeofence_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::EmptyResponse>* Watch::Stub::PrepareAsyncWatchGeofenceRaw(::grpc::ClientContext* context, const ::ric::geo::WatchGeofenceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_WatchGeofence_, context, request, false);
}

::grpc::Status Watch::Stub::StopWatchGeofence(::grpc::ClientContext* context, const ::ric::geo::WatchGeofenceRequest& request, ::ric::geo::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopWatchGeofence_, context, request, response);
}

void Watch::Stub::experimental_async::StopWatchGeofence(::grpc::ClientContext* context, const ::ric::geo::WatchGeofenceRequest* request, ::ric::geo::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopWatchGeofence_, context, request, response, std::move(f));
}

void Watch::Stub::experimental_async::StopWatchGeofence(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopWatchGeofence_, context, request, response, std::move(f));
}

void Watch::Stub::experimental_async::StopWatchGeofence(::grpc::ClientContext* context, const ::ric::geo::WatchGeofenceRequest* request, ::ric::geo::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopWatchGeofence_, context, request, response, reactor);
}

void Watch::Stub::experimental_async::StopWatchGeofence(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopWatchGeofence_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::EmptyResponse>* Watch::Stub::AsyncStopWatchGeofenceRaw(::grpc::ClientContext* context, const ::ric::geo::WatchGeofenceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_StopWatchGeofence_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::EmptyResponse>* Watch::Stub::PrepareAsyncStopWatchGeofenceRaw(::grpc::ClientContext* context, const ::ric::geo::WatchGeofenceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_StopWatchGeofence_, context, request, false);
}

::grpc::Status Watch::Stub::WatchRoom(::grpc::ClientContext* context, const ::ric::geo::WatchRoomRequest& request, ::ric::geo::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_WatchRoom_, context, request, response);
}

void Watch::Stub::experimental_async::WatchRoom(::grpc::ClientContext* context, const ::ric::geo::WatchRoomRequest* request, ::ric::geo::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WatchRoom_, context, request, response, std::move(f));
}

void Watch::Stub::experimental_async::WatchRoom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WatchRoom_, context, request, response, std::move(f));
}

void Watch::Stub::experimental_async::WatchRoom(::grpc::ClientContext* context, const ::ric::geo::WatchRoomRequest* request, ::ric::geo::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WatchRoom_, context, request, response, reactor);
}

void Watch::Stub::experimental_async::WatchRoom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WatchRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::EmptyResponse>* Watch::Stub::AsyncWatchRoomRaw(::grpc::ClientContext* context, const ::ric::geo::WatchRoomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_WatchRoom_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::EmptyResponse>* Watch::Stub::PrepareAsyncWatchRoomRaw(::grpc::ClientContext* context, const ::ric::geo::WatchRoomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_WatchRoom_, context, request, false);
}

::grpc::Status Watch::Stub::StopWatchRoom(::grpc::ClientContext* context, const ::ric::geo::WatchRoomRequest& request, ::ric::geo::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopWatchRoom_, context, request, response);
}

void Watch::Stub::experimental_async::StopWatchRoom(::grpc::ClientContext* context, const ::ric::geo::WatchRoomRequest* request, ::ric::geo::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopWatchRoom_, context, request, response, std::move(f));
}

void Watch::Stub::experimental_async::StopWatchRoom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopWatchRoom_, context, request, response, std::move(f));
}

void Watch::Stub::experimental_async::StopWatchRoom(::grpc::ClientContext* context, const ::ric::geo::WatchRoomRequest* request, ::ric::geo::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopWatchRoom_, context, request, response, reactor);
}

void Watch::Stub::experimental_async::StopWatchRoom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopWatchRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::EmptyResponse>* Watch::Stub::AsyncStopWatchRoomRaw(::grpc::ClientContext* context, const ::ric::geo::WatchRoomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_StopWatchRoom_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::EmptyResponse>* Watch::Stub::PrepareAsyncStopWatchRoomRaw(::grpc::ClientContext* context, const ::ric::geo::WatchRoomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_StopWatchRoom_, context, request, false);
}

::grpc::Status Watch::Stub::WatchRoute(::grpc::ClientContext* context, const ::ric::geo::WatchRouteRequest& request, ::ric::geo::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_WatchRoute_, context, request, response);
}

void Watch::Stub::experimental_async::WatchRoute(::grpc::ClientContext* context, const ::ric::geo::WatchRouteRequest* request, ::ric::geo::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WatchRoute_, context, request, response, std::move(f));
}

void Watch::Stub::experimental_async::WatchRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WatchRoute_, context, request, response, std::move(f));
}

void Watch::Stub::experimental_async::WatchRoute(::grpc::ClientContext* context, const ::ric::geo::WatchRouteRequest* request, ::ric::geo::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WatchRoute_, context, request, response, reactor);
}

void Watch::Stub::experimental_async::WatchRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WatchRoute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::EmptyResponse>* Watch::Stub::AsyncWatchRouteRaw(::grpc::ClientContext* context, const ::ric::geo::WatchRouteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_WatchRoute_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::EmptyResponse>* Watch::Stub::PrepareAsyncWatchRouteRaw(::grpc::ClientContext* context, const ::ric::geo::WatchRouteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_WatchRoute_, context, request, false);
}

::grpc::Status Watch::Stub::StopWatchRoute(::grpc::ClientContext* context, const ::ric::geo::WatchRouteRequest& request, ::ric::geo::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopWatchRoute_, context, request, response);
}

void Watch::Stub::experimental_async::StopWatchRoute(::grpc::ClientContext* context, const ::ric::geo::WatchRouteRequest* request, ::ric::geo::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopWatchRoute_, context, request, response, std::move(f));
}

void Watch::Stub::experimental_async::StopWatchRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopWatchRoute_, context, request, response, std::move(f));
}

void Watch::Stub::experimental_async::StopWatchRoute(::grpc::ClientContext* context, const ::ric::geo::WatchRouteRequest* request, ::ric::geo::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopWatchRoute_, context, request, response, reactor);
}

void Watch::Stub::experimental_async::StopWatchRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopWatchRoute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::EmptyResponse>* Watch::Stub::AsyncStopWatchRouteRaw(::grpc::ClientContext* context, const ::ric::geo::WatchRouteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_StopWatchRoute_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::EmptyResponse>* Watch::Stub::PrepareAsyncStopWatchRouteRaw(::grpc::ClientContext* context, const ::ric::geo::WatchRouteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_StopWatchRoute_, context, request, false);
}

::grpc::Status Watch::Stub::UpdateGeo(::grpc::ClientContext* context, const ::ric::geo::UpdateGeoRequest& request, ::ric::geo::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateGeo_, context, request, response);
}

void Watch::Stub::experimental_async::UpdateGeo(::grpc::ClientContext* context, const ::ric::geo::UpdateGeoRequest* request, ::ric::geo::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateGeo_, context, request, response, std::move(f));
}

void Watch::Stub::experimental_async::UpdateGeo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateGeo_, context, request, response, std::move(f));
}

void Watch::Stub::experimental_async::UpdateGeo(::grpc::ClientContext* context, const ::ric::geo::UpdateGeoRequest* request, ::ric::geo::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateGeo_, context, request, response, reactor);
}

void Watch::Stub::experimental_async::UpdateGeo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateGeo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::EmptyResponse>* Watch::Stub::AsyncUpdateGeoRaw(::grpc::ClientContext* context, const ::ric::geo::UpdateGeoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_UpdateGeo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::EmptyResponse>* Watch::Stub::PrepareAsyncUpdateGeoRaw(::grpc::ClientContext* context, const ::ric::geo::UpdateGeoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_UpdateGeo_, context, request, false);
}

::grpc::Status Watch::Stub::GetObjectInfo(::grpc::ClientContext* context, const ::ric::geo::GetObjectInfoRequest& request, ::ric::geo::GetObjectInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetObjectInfo_, context, request, response);
}

void Watch::Stub::experimental_async::GetObjectInfo(::grpc::ClientContext* context, const ::ric::geo::GetObjectInfoRequest* request, ::ric::geo::GetObjectInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetObjectInfo_, context, request, response, std::move(f));
}

void Watch::Stub::experimental_async::GetObjectInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::GetObjectInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetObjectInfo_, context, request, response, std::move(f));
}

void Watch::Stub::experimental_async::GetObjectInfo(::grpc::ClientContext* context, const ::ric::geo::GetObjectInfoRequest* request, ::ric::geo::GetObjectInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetObjectInfo_, context, request, response, reactor);
}

void Watch::Stub::experimental_async::GetObjectInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::GetObjectInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetObjectInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::GetObjectInfoResponse>* Watch::Stub::AsyncGetObjectInfoRaw(::grpc::ClientContext* context, const ::ric::geo::GetObjectInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::GetObjectInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetObjectInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::GetObjectInfoResponse>* Watch::Stub::PrepareAsyncGetObjectInfoRaw(::grpc::ClientContext* context, const ::ric::geo::GetObjectInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::GetObjectInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetObjectInfo_, context, request, false);
}

Watch::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Watch_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Watch::Service, ::ric::geo::WatchGeofenceRequest, ::ric::geo::EmptyResponse>(
          std::mem_fn(&Watch::Service::WatchGeofence), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Watch_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Watch::Service, ::ric::geo::WatchGeofenceRequest, ::ric::geo::EmptyResponse>(
          std::mem_fn(&Watch::Service::StopWatchGeofence), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Watch_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Watch::Service, ::ric::geo::WatchRoomRequest, ::ric::geo::EmptyResponse>(
          std::mem_fn(&Watch::Service::WatchRoom), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Watch_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Watch::Service, ::ric::geo::WatchRoomRequest, ::ric::geo::EmptyResponse>(
          std::mem_fn(&Watch::Service::StopWatchRoom), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Watch_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Watch::Service, ::ric::geo::WatchRouteRequest, ::ric::geo::EmptyResponse>(
          std::mem_fn(&Watch::Service::WatchRoute), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Watch_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Watch::Service, ::ric::geo::WatchRouteRequest, ::ric::geo::EmptyResponse>(
          std::mem_fn(&Watch::Service::StopWatchRoute), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Watch_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Watch::Service, ::ric::geo::UpdateGeoRequest, ::ric::geo::EmptyResponse>(
          std::mem_fn(&Watch::Service::UpdateGeo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Watch_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Watch::Service, ::ric::geo::GetObjectInfoRequest, ::ric::geo::GetObjectInfoResponse>(
          std::mem_fn(&Watch::Service::GetObjectInfo), this)));
}

Watch::Service::~Service() {
}

::grpc::Status Watch::Service::WatchGeofence(::grpc::ServerContext* context, const ::ric::geo::WatchGeofenceRequest* request, ::ric::geo::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Watch::Service::StopWatchGeofence(::grpc::ServerContext* context, const ::ric::geo::WatchGeofenceRequest* request, ::ric::geo::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Watch::Service::WatchRoom(::grpc::ServerContext* context, const ::ric::geo::WatchRoomRequest* request, ::ric::geo::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Watch::Service::StopWatchRoom(::grpc::ServerContext* context, const ::ric::geo::WatchRoomRequest* request, ::ric::geo::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Watch::Service::WatchRoute(::grpc::ServerContext* context, const ::ric::geo::WatchRouteRequest* request, ::ric::geo::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Watch::Service::StopWatchRoute(::grpc::ServerContext* context, const ::ric::geo::WatchRouteRequest* request, ::ric::geo::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Watch::Service::UpdateGeo(::grpc::ServerContext* context, const ::ric::geo::UpdateGeoRequest* request, ::ric::geo::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Watch::Service::GetObjectInfo(::grpc::ServerContext* context, const ::ric::geo::GetObjectInfoRequest* request, ::ric::geo::GetObjectInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* WatchV2_method_names[] = {
  "/ric.geo.WatchV2/Watch",
  "/ric.geo.WatchV2/Stop",
  "/ric.geo.WatchV2/UpdateGeo",
  "/ric.geo.WatchV2/GetObjectInfo",
};

std::unique_ptr< WatchV2::Stub> WatchV2::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WatchV2::Stub> stub(new WatchV2::Stub(channel));
  return stub;
}

WatchV2::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Watch_(WatchV2_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stop_(WatchV2_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateGeo_(WatchV2_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetObjectInfo_(WatchV2_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WatchV2::Stub::Watch(::grpc::ClientContext* context, const ::ric::geo::WatchRequest& request, ::ric::geo::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Watch_, context, request, response);
}

void WatchV2::Stub::experimental_async::Watch(::grpc::ClientContext* context, const ::ric::geo::WatchRequest* request, ::ric::geo::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Watch_, context, request, response, std::move(f));
}

void WatchV2::Stub::experimental_async::Watch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Watch_, context, request, response, std::move(f));
}

void WatchV2::Stub::experimental_async::Watch(::grpc::ClientContext* context, const ::ric::geo::WatchRequest* request, ::ric::geo::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Watch_, context, request, response, reactor);
}

void WatchV2::Stub::experimental_async::Watch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Watch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::EmptyResponse>* WatchV2::Stub::AsyncWatchRaw(::grpc::ClientContext* context, const ::ric::geo::WatchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_Watch_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::EmptyResponse>* WatchV2::Stub::PrepareAsyncWatchRaw(::grpc::ClientContext* context, const ::ric::geo::WatchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_Watch_, context, request, false);
}

::grpc::Status WatchV2::Stub::Stop(::grpc::ClientContext* context, const ::ric::geo::StopRequest& request, ::ric::geo::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Stop_, context, request, response);
}

void WatchV2::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::ric::geo::StopRequest* request, ::ric::geo::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void WatchV2::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void WatchV2::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::ric::geo::StopRequest* request, ::ric::geo::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

void WatchV2::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::EmptyResponse>* WatchV2::Stub::AsyncStopRaw(::grpc::ClientContext* context, const ::ric::geo::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_Stop_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::EmptyResponse>* WatchV2::Stub::PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::ric::geo::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_Stop_, context, request, false);
}

::grpc::Status WatchV2::Stub::UpdateGeo(::grpc::ClientContext* context, const ::ric::geo::UpdateGeoRequest& request, ::ric::geo::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateGeo_, context, request, response);
}

void WatchV2::Stub::experimental_async::UpdateGeo(::grpc::ClientContext* context, const ::ric::geo::UpdateGeoRequest* request, ::ric::geo::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateGeo_, context, request, response, std::move(f));
}

void WatchV2::Stub::experimental_async::UpdateGeo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateGeo_, context, request, response, std::move(f));
}

void WatchV2::Stub::experimental_async::UpdateGeo(::grpc::ClientContext* context, const ::ric::geo::UpdateGeoRequest* request, ::ric::geo::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateGeo_, context, request, response, reactor);
}

void WatchV2::Stub::experimental_async::UpdateGeo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateGeo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::EmptyResponse>* WatchV2::Stub::AsyncUpdateGeoRaw(::grpc::ClientContext* context, const ::ric::geo::UpdateGeoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_UpdateGeo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::EmptyResponse>* WatchV2::Stub::PrepareAsyncUpdateGeoRaw(::grpc::ClientContext* context, const ::ric::geo::UpdateGeoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_UpdateGeo_, context, request, false);
}

::grpc::Status WatchV2::Stub::GetObjectInfo(::grpc::ClientContext* context, const ::ric::geo::GetObjectInfoRequest& request, ::ric::geo::GetObjectInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetObjectInfo_, context, request, response);
}

void WatchV2::Stub::experimental_async::GetObjectInfo(::grpc::ClientContext* context, const ::ric::geo::GetObjectInfoRequest* request, ::ric::geo::GetObjectInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetObjectInfo_, context, request, response, std::move(f));
}

void WatchV2::Stub::experimental_async::GetObjectInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::GetObjectInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetObjectInfo_, context, request, response, std::move(f));
}

void WatchV2::Stub::experimental_async::GetObjectInfo(::grpc::ClientContext* context, const ::ric::geo::GetObjectInfoRequest* request, ::ric::geo::GetObjectInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetObjectInfo_, context, request, response, reactor);
}

void WatchV2::Stub::experimental_async::GetObjectInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::GetObjectInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetObjectInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::GetObjectInfoResponse>* WatchV2::Stub::AsyncGetObjectInfoRaw(::grpc::ClientContext* context, const ::ric::geo::GetObjectInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::GetObjectInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetObjectInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::GetObjectInfoResponse>* WatchV2::Stub::PrepareAsyncGetObjectInfoRaw(::grpc::ClientContext* context, const ::ric::geo::GetObjectInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::GetObjectInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetObjectInfo_, context, request, false);
}

WatchV2::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WatchV2_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WatchV2::Service, ::ric::geo::WatchRequest, ::ric::geo::EmptyResponse>(
          std::mem_fn(&WatchV2::Service::Watch), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WatchV2_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WatchV2::Service, ::ric::geo::StopRequest, ::ric::geo::EmptyResponse>(
          std::mem_fn(&WatchV2::Service::Stop), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WatchV2_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WatchV2::Service, ::ric::geo::UpdateGeoRequest, ::ric::geo::EmptyResponse>(
          std::mem_fn(&WatchV2::Service::UpdateGeo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WatchV2_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WatchV2::Service, ::ric::geo::GetObjectInfoRequest, ::ric::geo::GetObjectInfoResponse>(
          std::mem_fn(&WatchV2::Service::GetObjectInfo), this)));
}

WatchV2::Service::~Service() {
}

::grpc::Status WatchV2::Service::Watch(::grpc::ServerContext* context, const ::ric::geo::WatchRequest* request, ::ric::geo::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WatchV2::Service::Stop(::grpc::ServerContext* context, const ::ric::geo::StopRequest* request, ::ric::geo::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WatchV2::Service::UpdateGeo(::grpc::ServerContext* context, const ::ric::geo::UpdateGeoRequest* request, ::ric::geo::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WatchV2::Service::GetObjectInfo(::grpc::ServerContext* context, const ::ric::geo::GetObjectInfoRequest* request, ::ric::geo::GetObjectInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* AttendanceControl_method_names[] = {
  "/ric.geo.AttendanceControl/Control",
};

std::unique_ptr< AttendanceControl::Stub> AttendanceControl::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AttendanceControl::Stub> stub(new AttendanceControl::Stub(channel));
  return stub;
}

AttendanceControl::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Control_(AttendanceControl_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AttendanceControl::Stub::Control(::grpc::ClientContext* context, const ::ric::geo::ControlRequest& request, ::ric::geo::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Control_, context, request, response);
}

void AttendanceControl::Stub::experimental_async::Control(::grpc::ClientContext* context, const ::ric::geo::ControlRequest* request, ::ric::geo::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Control_, context, request, response, std::move(f));
}

void AttendanceControl::Stub::experimental_async::Control(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Control_, context, request, response, std::move(f));
}

void AttendanceControl::Stub::experimental_async::Control(::grpc::ClientContext* context, const ::ric::geo::ControlRequest* request, ::ric::geo::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Control_, context, request, response, reactor);
}

void AttendanceControl::Stub::experimental_async::Control(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Control_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::EmptyResponse>* AttendanceControl::Stub::AsyncControlRaw(::grpc::ClientContext* context, const ::ric::geo::ControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_Control_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::EmptyResponse>* AttendanceControl::Stub::PrepareAsyncControlRaw(::grpc::ClientContext* context, const ::ric::geo::ControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_Control_, context, request, false);
}

AttendanceControl::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AttendanceControl_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AttendanceControl::Service, ::ric::geo::ControlRequest, ::ric::geo::EmptyResponse>(
          std::mem_fn(&AttendanceControl::Service::Control), this)));
}

AttendanceControl::Service::~Service() {
}

::grpc::Status AttendanceControl::Service::Control(::grpc::ServerContext* context, const ::ric::geo::ControlRequest* request, ::ric::geo::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Osm_method_names[] = {
  "/ric.geo.Osm/Geocode",
  "/ric.geo.Osm/GeocodeReverse",
  "/ric.geo.Osm/GetRoute",
};

std::unique_ptr< Osm::Stub> Osm::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Osm::Stub> stub(new Osm::Stub(channel));
  return stub;
}

Osm::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Geocode_(Osm_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GeocodeReverse_(Osm_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRoute_(Osm_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Osm::Stub::Geocode(::grpc::ClientContext* context, const ::ric::geo::GeocodeRequest& request, ::ric::geo::OsmResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Geocode_, context, request, response);
}

void Osm::Stub::experimental_async::Geocode(::grpc::ClientContext* context, const ::ric::geo::GeocodeRequest* request, ::ric::geo::OsmResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Geocode_, context, request, response, std::move(f));
}

void Osm::Stub::experimental_async::Geocode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::OsmResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Geocode_, context, request, response, std::move(f));
}

void Osm::Stub::experimental_async::Geocode(::grpc::ClientContext* context, const ::ric::geo::GeocodeRequest* request, ::ric::geo::OsmResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Geocode_, context, request, response, reactor);
}

void Osm::Stub::experimental_async::Geocode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::OsmResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Geocode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::OsmResponse>* Osm::Stub::AsyncGeocodeRaw(::grpc::ClientContext* context, const ::ric::geo::GeocodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::OsmResponse>::Create(channel_.get(), cq, rpcmethod_Geocode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::OsmResponse>* Osm::Stub::PrepareAsyncGeocodeRaw(::grpc::ClientContext* context, const ::ric::geo::GeocodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::OsmResponse>::Create(channel_.get(), cq, rpcmethod_Geocode_, context, request, false);
}

::grpc::Status Osm::Stub::GeocodeReverse(::grpc::ClientContext* context, const ::ric::geo::GeocodeReverseRequest& request, ::ric::geo::OsmResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GeocodeReverse_, context, request, response);
}

void Osm::Stub::experimental_async::GeocodeReverse(::grpc::ClientContext* context, const ::ric::geo::GeocodeReverseRequest* request, ::ric::geo::OsmResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GeocodeReverse_, context, request, response, std::move(f));
}

void Osm::Stub::experimental_async::GeocodeReverse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::OsmResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GeocodeReverse_, context, request, response, std::move(f));
}

void Osm::Stub::experimental_async::GeocodeReverse(::grpc::ClientContext* context, const ::ric::geo::GeocodeReverseRequest* request, ::ric::geo::OsmResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GeocodeReverse_, context, request, response, reactor);
}

void Osm::Stub::experimental_async::GeocodeReverse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::OsmResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GeocodeReverse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::OsmResponse>* Osm::Stub::AsyncGeocodeReverseRaw(::grpc::ClientContext* context, const ::ric::geo::GeocodeReverseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::OsmResponse>::Create(channel_.get(), cq, rpcmethod_GeocodeReverse_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::OsmResponse>* Osm::Stub::PrepareAsyncGeocodeReverseRaw(::grpc::ClientContext* context, const ::ric::geo::GeocodeReverseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::OsmResponse>::Create(channel_.get(), cq, rpcmethod_GeocodeReverse_, context, request, false);
}

::grpc::Status Osm::Stub::GetRoute(::grpc::ClientContext* context, const ::ric::geo::GetRouteRequest& request, ::ric::geo::OsmResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRoute_, context, request, response);
}

void Osm::Stub::experimental_async::GetRoute(::grpc::ClientContext* context, const ::ric::geo::GetRouteRequest* request, ::ric::geo::OsmResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRoute_, context, request, response, std::move(f));
}

void Osm::Stub::experimental_async::GetRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::OsmResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRoute_, context, request, response, std::move(f));
}

void Osm::Stub::experimental_async::GetRoute(::grpc::ClientContext* context, const ::ric::geo::GetRouteRequest* request, ::ric::geo::OsmResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRoute_, context, request, response, reactor);
}

void Osm::Stub::experimental_async::GetRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::OsmResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRoute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::OsmResponse>* Osm::Stub::AsyncGetRouteRaw(::grpc::ClientContext* context, const ::ric::geo::GetRouteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::OsmResponse>::Create(channel_.get(), cq, rpcmethod_GetRoute_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::OsmResponse>* Osm::Stub::PrepareAsyncGetRouteRaw(::grpc::ClientContext* context, const ::ric::geo::GetRouteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::OsmResponse>::Create(channel_.get(), cq, rpcmethod_GetRoute_, context, request, false);
}

Osm::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Osm_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Osm::Service, ::ric::geo::GeocodeRequest, ::ric::geo::OsmResponse>(
          std::mem_fn(&Osm::Service::Geocode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Osm_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Osm::Service, ::ric::geo::GeocodeReverseRequest, ::ric::geo::OsmResponse>(
          std::mem_fn(&Osm::Service::GeocodeReverse), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Osm_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Osm::Service, ::ric::geo::GetRouteRequest, ::ric::geo::OsmResponse>(
          std::mem_fn(&Osm::Service::GetRoute), this)));
}

Osm::Service::~Service() {
}

::grpc::Status Osm::Service::Geocode(::grpc::ServerContext* context, const ::ric::geo::GeocodeRequest* request, ::ric::geo::OsmResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Osm::Service::GeocodeReverse(::grpc::ServerContext* context, const ::ric::geo::GeocodeReverseRequest* request, ::ric::geo::OsmResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Osm::Service::GetRoute(::grpc::ServerContext* context, const ::ric::geo::GetRouteRequest* request, ::ric::geo::OsmResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Check_method_names[] = {
  "/ric.geo.Check/CheckIn",
};

std::unique_ptr< Check::Stub> Check::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Check::Stub> stub(new Check::Stub(channel));
  return stub;
}

Check::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CheckIn_(Check_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Check::Stub::CheckIn(::grpc::ClientContext* context, const ::ric::geo::CheckInRequest& request, ::ric::geo::CheckInResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckIn_, context, request, response);
}

void Check::Stub::experimental_async::CheckIn(::grpc::ClientContext* context, const ::ric::geo::CheckInRequest* request, ::ric::geo::CheckInResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckIn_, context, request, response, std::move(f));
}

void Check::Stub::experimental_async::CheckIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::CheckInResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckIn_, context, request, response, std::move(f));
}

void Check::Stub::experimental_async::CheckIn(::grpc::ClientContext* context, const ::ric::geo::CheckInRequest* request, ::ric::geo::CheckInResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckIn_, context, request, response, reactor);
}

void Check::Stub::experimental_async::CheckIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::geo::CheckInResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckIn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::CheckInResponse>* Check::Stub::AsyncCheckInRaw(::grpc::ClientContext* context, const ::ric::geo::CheckInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::CheckInResponse>::Create(channel_.get(), cq, rpcmethod_CheckIn_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::geo::CheckInResponse>* Check::Stub::PrepareAsyncCheckInRaw(::grpc::ClientContext* context, const ::ric::geo::CheckInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::geo::CheckInResponse>::Create(channel_.get(), cq, rpcmethod_CheckIn_, context, request, false);
}

Check::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Check_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Check::Service, ::ric::geo::CheckInRequest, ::ric::geo::CheckInResponse>(
          std::mem_fn(&Check::Service::CheckIn), this)));
}

Check::Service::~Service() {
}

::grpc::Status Check::Service::CheckIn(::grpc::ServerContext* context, const ::ric::geo::CheckInRequest* request, ::ric::geo::CheckInResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ric
}  // namespace geo

