// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ric-gate/ric-gate.proto

#include "ric-gate/ric-gate.pb.h"
#include "ric-gate/ric-gate.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ric {
namespace gate {

static const char* GateInlet_method_names[] = {
  "/ric.gate.GateInlet/Init",
  "/ric.gate.GateInlet/Auth",
  "/ric.gate.GateInlet/SendData",
  "/ric.gate.GateInlet/Ping",
  "/ric.gate.GateInlet/SendCommandReply",
  "/ric.gate.GateInlet/SendOffline",
};

std::unique_ptr< GateInlet::Stub> GateInlet::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GateInlet::Stub> stub(new GateInlet::Stub(channel));
  return stub;
}

GateInlet::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Init_(GateInlet_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Auth_(GateInlet_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendData_(GateInlet_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Ping_(GateInlet_method_names[3], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_SendCommandReply_(GateInlet_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendOffline_(GateInlet_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::ric::gate::Command>* GateInlet::Stub::InitRaw(::grpc::ClientContext* context, const ::ric::gate::InitRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::ric::gate::Command>::Create(channel_.get(), rpcmethod_Init_, context, request);
}

void GateInlet::Stub::experimental_async::Init(::grpc::ClientContext* context, ::ric::gate::InitRequest* request, ::grpc::experimental::ClientReadReactor< ::ric::gate::Command>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ric::gate::Command>::Create(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ric::gate::Command>* GateInlet::Stub::AsyncInitRaw(::grpc::ClientContext* context, const ::ric::gate::InitRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ric::gate::Command>::Create(channel_.get(), cq, rpcmethod_Init_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ric::gate::Command>* GateInlet::Stub::PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::ric::gate::InitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ric::gate::Command>::Create(channel_.get(), cq, rpcmethod_Init_, context, request, false, nullptr);
}

::grpc::Status GateInlet::Stub::Auth(::grpc::ClientContext* context, const ::ric::gate::AuthRequest& request, ::ric::gate::AuthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Auth_, context, request, response);
}

void GateInlet::Stub::experimental_async::Auth(::grpc::ClientContext* context, const ::ric::gate::AuthRequest* request, ::ric::gate::AuthResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Auth_, context, request, response, std::move(f));
}

void GateInlet::Stub::experimental_async::Auth(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::gate::AuthResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Auth_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ric::gate::AuthResponse>* GateInlet::Stub::AsyncAuthRaw(::grpc::ClientContext* context, const ::ric::gate::AuthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::gate::AuthResponse>::Create(channel_.get(), cq, rpcmethod_Auth_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::gate::AuthResponse>* GateInlet::Stub::PrepareAsyncAuthRaw(::grpc::ClientContext* context, const ::ric::gate::AuthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::gate::AuthResponse>::Create(channel_.get(), cq, rpcmethod_Auth_, context, request, false);
}

::grpc::Status GateInlet::Stub::SendData(::grpc::ClientContext* context, const ::ric::gate::DataRequest& request, ::ric::gate::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendData_, context, request, response);
}

void GateInlet::Stub::experimental_async::SendData(::grpc::ClientContext* context, const ::ric::gate::DataRequest* request, ::ric::gate::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendData_, context, request, response, std::move(f));
}

void GateInlet::Stub::experimental_async::SendData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::gate::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendData_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ric::gate::EmptyResponse>* GateInlet::Stub::AsyncSendDataRaw(::grpc::ClientContext* context, const ::ric::gate::DataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::gate::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_SendData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::gate::EmptyResponse>* GateInlet::Stub::PrepareAsyncSendDataRaw(::grpc::ClientContext* context, const ::ric::gate::DataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::gate::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_SendData_, context, request, false);
}

::grpc::ClientWriter< ::ric::gate::PingRequest>* GateInlet::Stub::PingRaw(::grpc::ClientContext* context, ::ric::gate::EmptyResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::ric::gate::PingRequest>::Create(channel_.get(), rpcmethod_Ping_, context, response);
}

void GateInlet::Stub::experimental_async::Ping(::grpc::ClientContext* context, ::ric::gate::EmptyResponse* response, ::grpc::experimental::ClientWriteReactor< ::ric::gate::PingRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::ric::gate::PingRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::ric::gate::PingRequest>* GateInlet::Stub::AsyncPingRaw(::grpc::ClientContext* context, ::ric::gate::EmptyResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::ric::gate::PingRequest>::Create(channel_.get(), cq, rpcmethod_Ping_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::ric::gate::PingRequest>* GateInlet::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, ::ric::gate::EmptyResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::ric::gate::PingRequest>::Create(channel_.get(), cq, rpcmethod_Ping_, context, response, false, nullptr);
}

::grpc::Status GateInlet::Stub::SendCommandReply(::grpc::ClientContext* context, const ::ric::gate::CommandReplyRequest& request, ::ric::gate::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendCommandReply_, context, request, response);
}

void GateInlet::Stub::experimental_async::SendCommandReply(::grpc::ClientContext* context, const ::ric::gate::CommandReplyRequest* request, ::ric::gate::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendCommandReply_, context, request, response, std::move(f));
}

void GateInlet::Stub::experimental_async::SendCommandReply(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::gate::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendCommandReply_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ric::gate::EmptyResponse>* GateInlet::Stub::AsyncSendCommandReplyRaw(::grpc::ClientContext* context, const ::ric::gate::CommandReplyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::gate::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_SendCommandReply_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::gate::EmptyResponse>* GateInlet::Stub::PrepareAsyncSendCommandReplyRaw(::grpc::ClientContext* context, const ::ric::gate::CommandReplyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::gate::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_SendCommandReply_, context, request, false);
}

::grpc::Status GateInlet::Stub::SendOffline(::grpc::ClientContext* context, const ::ric::gate::OfflineRequest& request, ::ric::gate::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendOffline_, context, request, response);
}

void GateInlet::Stub::experimental_async::SendOffline(::grpc::ClientContext* context, const ::ric::gate::OfflineRequest* request, ::ric::gate::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendOffline_, context, request, response, std::move(f));
}

void GateInlet::Stub::experimental_async::SendOffline(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::gate::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendOffline_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ric::gate::EmptyResponse>* GateInlet::Stub::AsyncSendOfflineRaw(::grpc::ClientContext* context, const ::ric::gate::OfflineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::gate::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_SendOffline_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::gate::EmptyResponse>* GateInlet::Stub::PrepareAsyncSendOfflineRaw(::grpc::ClientContext* context, const ::ric::gate::OfflineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::gate::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_SendOffline_, context, request, false);
}

GateInlet::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GateInlet_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GateInlet::Service, ::ric::gate::InitRequest, ::ric::gate::Command>(
          std::mem_fn(&GateInlet::Service::Init), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GateInlet_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GateInlet::Service, ::ric::gate::AuthRequest, ::ric::gate::AuthResponse>(
          std::mem_fn(&GateInlet::Service::Auth), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GateInlet_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GateInlet::Service, ::ric::gate::DataRequest, ::ric::gate::EmptyResponse>(
          std::mem_fn(&GateInlet::Service::SendData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GateInlet_method_names[3],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< GateInlet::Service, ::ric::gate::PingRequest, ::ric::gate::EmptyResponse>(
          std::mem_fn(&GateInlet::Service::Ping), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GateInlet_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GateInlet::Service, ::ric::gate::CommandReplyRequest, ::ric::gate::EmptyResponse>(
          std::mem_fn(&GateInlet::Service::SendCommandReply), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GateInlet_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GateInlet::Service, ::ric::gate::OfflineRequest, ::ric::gate::EmptyResponse>(
          std::mem_fn(&GateInlet::Service::SendOffline), this)));
}

GateInlet::Service::~Service() {
}

::grpc::Status GateInlet::Service::Init(::grpc::ServerContext* context, const ::ric::gate::InitRequest* request, ::grpc::ServerWriter< ::ric::gate::Command>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GateInlet::Service::Auth(::grpc::ServerContext* context, const ::ric::gate::AuthRequest* request, ::ric::gate::AuthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GateInlet::Service::SendData(::grpc::ServerContext* context, const ::ric::gate::DataRequest* request, ::ric::gate::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GateInlet::Service::Ping(::grpc::ServerContext* context, ::grpc::ServerReader< ::ric::gate::PingRequest>* reader, ::ric::gate::EmptyResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GateInlet::Service::SendCommandReply(::grpc::ServerContext* context, const ::ric::gate::CommandReplyRequest* request, ::ric::gate::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GateInlet::Service::SendOffline(::grpc::ServerContext* context, const ::ric::gate::OfflineRequest* request, ::ric::gate::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* GateCommand_method_names[] = {
  "/ric.gate.GateCommand/SendRpc",
};

std::unique_ptr< GateCommand::Stub> GateCommand::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GateCommand::Stub> stub(new GateCommand::Stub(channel));
  return stub;
}

GateCommand::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SendRpc_(GateCommand_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GateCommand::Stub::SendRpc(::grpc::ClientContext* context, const ::ric::gate::Command& request, ::ric::gate::CommandReplyRequest* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendRpc_, context, request, response);
}

void GateCommand::Stub::experimental_async::SendRpc(::grpc::ClientContext* context, const ::ric::gate::Command* request, ::ric::gate::CommandReplyRequest* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendRpc_, context, request, response, std::move(f));
}

void GateCommand::Stub::experimental_async::SendRpc(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::gate::CommandReplyRequest* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendRpc_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ric::gate::CommandReplyRequest>* GateCommand::Stub::AsyncSendRpcRaw(::grpc::ClientContext* context, const ::ric::gate::Command& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::gate::CommandReplyRequest>::Create(channel_.get(), cq, rpcmethod_SendRpc_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::gate::CommandReplyRequest>* GateCommand::Stub::PrepareAsyncSendRpcRaw(::grpc::ClientContext* context, const ::ric::gate::Command& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::gate::CommandReplyRequest>::Create(channel_.get(), cq, rpcmethod_SendRpc_, context, request, false);
}

GateCommand::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GateCommand_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GateCommand::Service, ::ric::gate::Command, ::ric::gate::CommandReplyRequest>(
          std::mem_fn(&GateCommand::Service::SendRpc), this)));
}

GateCommand::Service::~Service() {
}

::grpc::Status GateCommand::Service::SendRpc(::grpc::ServerContext* context, const ::ric::gate::Command* request, ::ric::gate::CommandReplyRequest* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ric
}  // namespace gate

