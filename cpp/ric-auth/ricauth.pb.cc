// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ric-auth/ricauth.proto

#include "ric-auth/ricauth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_ric_2dauth_2fricauth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AuthObjectArgument_ric_2dauth_2fricauth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dauth_2fricauth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AuthObjectRequest_AuthObjectCert_ric_2dauth_2fricauth_2eproto;
namespace ric {
namespace auth {
class AuthObjectRequest_AuthObjectCertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthObjectRequest_AuthObjectCert> _instance;
} _AuthObjectRequest_AuthObjectCert_default_instance_;
class AuthObjectRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthObjectRequest> _instance;
} _AuthObjectRequest_default_instance_;
class AuthObjectResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthObjectResponse> _instance;
} _AuthObjectResponse_default_instance_;
class AuthObjectArgumentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthObjectArgument> _instance;
} _AuthObjectArgument_default_instance_;
}  // namespace auth
}  // namespace ric
static void InitDefaultsAuthObjectRequest_AuthObjectCert_ric_2dauth_2fricauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::auth::_AuthObjectRequest_AuthObjectCert_default_instance_;
    new (ptr) ::ric::auth::AuthObjectRequest_AuthObjectCert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::auth::AuthObjectRequest_AuthObjectCert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AuthObjectRequest_AuthObjectCert_ric_2dauth_2fricauth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthObjectRequest_AuthObjectCert_ric_2dauth_2fricauth_2eproto}, {}};

static void InitDefaultsAuthObjectRequest_ric_2dauth_2fricauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::auth::_AuthObjectRequest_default_instance_;
    new (ptr) ::ric::auth::AuthObjectRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::auth::AuthObjectRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AuthObjectRequest_ric_2dauth_2fricauth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAuthObjectRequest_ric_2dauth_2fricauth_2eproto}, {
      &scc_info_AuthObjectRequest_AuthObjectCert_ric_2dauth_2fricauth_2eproto.base,}};

static void InitDefaultsAuthObjectResponse_ric_2dauth_2fricauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::auth::_AuthObjectResponse_default_instance_;
    new (ptr) ::ric::auth::AuthObjectResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::auth::AuthObjectResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AuthObjectResponse_ric_2dauth_2fricauth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAuthObjectResponse_ric_2dauth_2fricauth_2eproto}, {
      &scc_info_AuthObjectArgument_ric_2dauth_2fricauth_2eproto.base,}};

static void InitDefaultsAuthObjectArgument_ric_2dauth_2fricauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::auth::_AuthObjectArgument_default_instance_;
    new (ptr) ::ric::auth::AuthObjectArgument();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::auth::AuthObjectArgument::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AuthObjectArgument_ric_2dauth_2fricauth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthObjectArgument_ric_2dauth_2fricauth_2eproto}, {}};

void InitDefaults_ric_2dauth_2fricauth_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_AuthObjectRequest_AuthObjectCert_ric_2dauth_2fricauth_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AuthObjectRequest_ric_2dauth_2fricauth_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AuthObjectResponse_ric_2dauth_2fricauth_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AuthObjectArgument_ric_2dauth_2fricauth_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_ric_2dauth_2fricauth_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_ric_2dauth_2fricauth_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_ric_2dauth_2fricauth_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_ric_2dauth_2fricauth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::auth::AuthObjectRequest_AuthObjectCert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::auth::AuthObjectRequest_AuthObjectCert, cn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::auth::AuthObjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::auth::AuthObjectRequest, protocol_),
  PROTOBUF_FIELD_OFFSET(::ric::auth::AuthObjectRequest, object_),
  PROTOBUF_FIELD_OFFSET(::ric::auth::AuthObjectRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::ric::auth::AuthObjectRequest, username_),
  PROTOBUF_FIELD_OFFSET(::ric::auth::AuthObjectRequest, password_),
  PROTOBUF_FIELD_OFFSET(::ric::auth::AuthObjectRequest, cert_),
  PROTOBUF_FIELD_OFFSET(::ric::auth::AuthObjectRequest, ipv4_),
  PROTOBUF_FIELD_OFFSET(::ric::auth::AuthObjectRequest, ipv6_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::auth::AuthObjectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::auth::AuthObjectResponse, session_),
  PROTOBUF_FIELD_OFFSET(::ric::auth::AuthObjectResponse, model_id_),
  PROTOBUF_FIELD_OFFSET(::ric::auth::AuthObjectResponse, object_id_),
  PROTOBUF_FIELD_OFFSET(::ric::auth::AuthObjectResponse, group_id_),
  PROTOBUF_FIELD_OFFSET(::ric::auth::AuthObjectResponse, group_key_),
  PROTOBUF_FIELD_OFFSET(::ric::auth::AuthObjectResponse, arguments_),
  PROTOBUF_FIELD_OFFSET(::ric::auth::AuthObjectResponse, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::auth::AuthObjectArgument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::auth::AuthObjectArgument, id_),
  PROTOBUF_FIELD_OFFSET(::ric::auth::AuthObjectArgument, data_type_),
  PROTOBUF_FIELD_OFFSET(::ric::auth::AuthObjectArgument, reference_),
  PROTOBUF_FIELD_OFFSET(::ric::auth::AuthObjectArgument, parser_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ric::auth::AuthObjectRequest_AuthObjectCert)},
  { 6, -1, sizeof(::ric::auth::AuthObjectRequest)},
  { 19, -1, sizeof(::ric::auth::AuthObjectResponse)},
  { 31, -1, sizeof(::ric::auth::AuthObjectArgument)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::auth::_AuthObjectRequest_AuthObjectCert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::auth::_AuthObjectRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::auth::_AuthObjectResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::auth::_AuthObjectArgument_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_ric_2dauth_2fricauth_2eproto = {
  {}, AddDescriptors_ric_2dauth_2fricauth_2eproto, "ric-auth/ricauth.proto", schemas,
  file_default_instances, TableStruct_ric_2dauth_2fricauth_2eproto::offsets,
  file_level_metadata_ric_2dauth_2fricauth_2eproto, 4, file_level_enum_descriptors_ric_2dauth_2fricauth_2eproto, file_level_service_descriptors_ric_2dauth_2fricauth_2eproto,
};

const char descriptor_table_protodef_ric_2dauth_2fricauth_2eproto[] =
  "\n\026ric-auth/ricauth.proto\022\010ric.auth\"\340\001\n\021A"
  "uthObjectRequest\022\020\n\010protocol\030\001 \001(\t\022\016\n\006ob"
  "ject\030\002 \001(\t\022\021\n\tclient_id\030\003 \001(\t\022\020\n\010usernam"
  "e\030\004 \001(\t\022\020\n\010password\030\005 \001(\t\0228\n\004cert\030\006 \001(\0132"
  "*.ric.auth.AuthObjectRequest.AuthObjectC"
  "ert\022\014\n\004ipv4\030\007 \001(\t\022\014\n\004ipv6\030\010 \001(\t\032\034\n\016AuthO"
  "bjectCert\022\n\n\002cn\030\001 \001(\t\"\260\001\n\022AuthObjectResp"
  "onse\022\017\n\007session\030\001 \001(\t\022\020\n\010model_id\030\002 \001(\t\022"
  "\021\n\tobject_id\030\003 \001(\t\022\020\n\010group_id\030\004 \001(\t\022\021\n\t"
  "group_key\030\005 \001(\t\022/\n\targuments\030\006 \003(\0132\034.ric"
  ".auth.AuthObjectArgument\022\016\n\006config\030\007 \001(\t"
  "\"V\n\022AuthObjectArgument\022\n\n\002id\030\001 \001(\t\022\021\n\tda"
  "ta_type\030\002 \001(\t\022\021\n\treference\030\003 \001(\t\022\016\n\006pars"
  "er\030\004 \001(\t2R\n\007RicAuth\022G\n\nAuthObject\022\033.ric."
  "auth.AuthObjectRequest\032\034.ric.auth.AuthOb"
  "jectResponseB\tZ\007ricauthb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_ric_2dauth_2fricauth_2eproto = {
  false, InitDefaults_ric_2dauth_2fricauth_2eproto, 
  descriptor_table_protodef_ric_2dauth_2fricauth_2eproto,
  "ric-auth/ricauth.proto", &assign_descriptors_table_ric_2dauth_2fricauth_2eproto, 631,
};

void AddDescriptors_ric_2dauth_2fricauth_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_ric_2dauth_2fricauth_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ric_2dauth_2fricauth_2eproto = []() { AddDescriptors_ric_2dauth_2fricauth_2eproto(); return true; }();
namespace ric {
namespace auth {

// ===================================================================

void AuthObjectRequest_AuthObjectCert::InitAsDefaultInstance() {
}
class AuthObjectRequest_AuthObjectCert::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthObjectRequest_AuthObjectCert::kCnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthObjectRequest_AuthObjectCert::AuthObjectRequest_AuthObjectCert()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.auth.AuthObjectRequest.AuthObjectCert)
}
AuthObjectRequest_AuthObjectCert::AuthObjectRequest_AuthObjectCert(const AuthObjectRequest_AuthObjectCert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cn().size() > 0) {
    cn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cn_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.auth.AuthObjectRequest.AuthObjectCert)
}

void AuthObjectRequest_AuthObjectCert::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AuthObjectRequest_AuthObjectCert_ric_2dauth_2fricauth_2eproto.base);
  cn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AuthObjectRequest_AuthObjectCert::~AuthObjectRequest_AuthObjectCert() {
  // @@protoc_insertion_point(destructor:ric.auth.AuthObjectRequest.AuthObjectCert)
  SharedDtor();
}

void AuthObjectRequest_AuthObjectCert::SharedDtor() {
  cn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthObjectRequest_AuthObjectCert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthObjectRequest_AuthObjectCert& AuthObjectRequest_AuthObjectCert::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AuthObjectRequest_AuthObjectCert_ric_2dauth_2fricauth_2eproto.base);
  return *internal_default_instance();
}


void AuthObjectRequest_AuthObjectCert::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.auth.AuthObjectRequest.AuthObjectCert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AuthObjectRequest_AuthObjectCert::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AuthObjectRequest_AuthObjectCert*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string cn = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.auth.AuthObjectRequest.AuthObjectCert.cn");
        object = msg->mutable_cn();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AuthObjectRequest_AuthObjectCert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.auth.AuthObjectRequest.AuthObjectCert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cn = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cn().data(), static_cast<int>(this->cn().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.auth.AuthObjectRequest.AuthObjectCert.cn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.auth.AuthObjectRequest.AuthObjectCert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.auth.AuthObjectRequest.AuthObjectCert)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AuthObjectRequest_AuthObjectCert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.auth.AuthObjectRequest.AuthObjectCert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cn = 1;
  if (this->cn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cn().data(), static_cast<int>(this->cn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectRequest.AuthObjectCert.cn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.auth.AuthObjectRequest.AuthObjectCert)
}

::google::protobuf::uint8* AuthObjectRequest_AuthObjectCert::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.auth.AuthObjectRequest.AuthObjectCert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cn = 1;
  if (this->cn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cn().data(), static_cast<int>(this->cn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectRequest.AuthObjectCert.cn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.auth.AuthObjectRequest.AuthObjectCert)
  return target;
}

size_t AuthObjectRequest_AuthObjectCert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.auth.AuthObjectRequest.AuthObjectCert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cn = 1;
  if (this->cn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cn());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthObjectRequest_AuthObjectCert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.auth.AuthObjectRequest.AuthObjectCert)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthObjectRequest_AuthObjectCert* source =
      ::google::protobuf::DynamicCastToGenerated<AuthObjectRequest_AuthObjectCert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.auth.AuthObjectRequest.AuthObjectCert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.auth.AuthObjectRequest.AuthObjectCert)
    MergeFrom(*source);
  }
}

void AuthObjectRequest_AuthObjectCert::MergeFrom(const AuthObjectRequest_AuthObjectCert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.auth.AuthObjectRequest.AuthObjectCert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cn().size() > 0) {

    cn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cn_);
  }
}

void AuthObjectRequest_AuthObjectCert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.auth.AuthObjectRequest.AuthObjectCert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthObjectRequest_AuthObjectCert::CopyFrom(const AuthObjectRequest_AuthObjectCert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.auth.AuthObjectRequest.AuthObjectCert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthObjectRequest_AuthObjectCert::IsInitialized() const {
  return true;
}

void AuthObjectRequest_AuthObjectCert::Swap(AuthObjectRequest_AuthObjectCert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthObjectRequest_AuthObjectCert::InternalSwap(AuthObjectRequest_AuthObjectCert* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cn_.Swap(&other->cn_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata AuthObjectRequest_AuthObjectCert::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dauth_2fricauth_2eproto);
  return ::file_level_metadata_ric_2dauth_2fricauth_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AuthObjectRequest::InitAsDefaultInstance() {
  ::ric::auth::_AuthObjectRequest_default_instance_._instance.get_mutable()->cert_ = const_cast< ::ric::auth::AuthObjectRequest_AuthObjectCert*>(
      ::ric::auth::AuthObjectRequest_AuthObjectCert::internal_default_instance());
}
class AuthObjectRequest::HasBitSetters {
 public:
  static const ::ric::auth::AuthObjectRequest_AuthObjectCert& cert(const AuthObjectRequest* msg);
};

const ::ric::auth::AuthObjectRequest_AuthObjectCert&
AuthObjectRequest::HasBitSetters::cert(const AuthObjectRequest* msg) {
  return *msg->cert_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthObjectRequest::kProtocolFieldNumber;
const int AuthObjectRequest::kObjectFieldNumber;
const int AuthObjectRequest::kClientIdFieldNumber;
const int AuthObjectRequest::kUsernameFieldNumber;
const int AuthObjectRequest::kPasswordFieldNumber;
const int AuthObjectRequest::kCertFieldNumber;
const int AuthObjectRequest::kIpv4FieldNumber;
const int AuthObjectRequest::kIpv6FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthObjectRequest::AuthObjectRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.auth.AuthObjectRequest)
}
AuthObjectRequest::AuthObjectRequest(const AuthObjectRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protocol().size() > 0) {
    protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object().size() > 0) {
    object_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_);
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ipv4_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ipv4().size() > 0) {
    ipv4_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipv4_);
  }
  ipv6_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ipv6().size() > 0) {
    ipv6_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipv6_);
  }
  if (from.has_cert()) {
    cert_ = new ::ric::auth::AuthObjectRequest_AuthObjectCert(*from.cert_);
  } else {
    cert_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.auth.AuthObjectRequest)
}

void AuthObjectRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AuthObjectRequest_ric_2dauth_2fricauth_2eproto.base);
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipv4_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipv6_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cert_ = nullptr;
}

AuthObjectRequest::~AuthObjectRequest() {
  // @@protoc_insertion_point(destructor:ric.auth.AuthObjectRequest)
  SharedDtor();
}

void AuthObjectRequest::SharedDtor() {
  protocol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipv4_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipv6_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cert_;
}

void AuthObjectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthObjectRequest& AuthObjectRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AuthObjectRequest_ric_2dauth_2fricauth_2eproto.base);
  return *internal_default_instance();
}


void AuthObjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.auth.AuthObjectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipv4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipv6_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && cert_ != nullptr) {
    delete cert_;
  }
  cert_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AuthObjectRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AuthObjectRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string protocol = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.auth.AuthObjectRequest.protocol");
        object = msg->mutable_protocol();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string object = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.auth.AuthObjectRequest.object");
        object = msg->mutable_object();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string client_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.auth.AuthObjectRequest.client_id");
        object = msg->mutable_client_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string username = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.auth.AuthObjectRequest.username");
        object = msg->mutable_username();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string password = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.auth.AuthObjectRequest.password");
        object = msg->mutable_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ric.auth.AuthObjectRequest.AuthObjectCert cert = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::auth::AuthObjectRequest_AuthObjectCert::_InternalParse;
        object = msg->mutable_cert();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string ipv4 = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.auth.AuthObjectRequest.ipv4");
        object = msg->mutable_ipv4();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string ipv6 = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.auth.AuthObjectRequest.ipv6");
        object = msg->mutable_ipv6();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AuthObjectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.auth.AuthObjectRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string protocol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocol().data(), static_cast<int>(this->protocol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.auth.AuthObjectRequest.protocol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string object = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object().data(), static_cast<int>(this->object().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.auth.AuthObjectRequest.object"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), static_cast<int>(this->client_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.auth.AuthObjectRequest.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.auth.AuthObjectRequest.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.auth.AuthObjectRequest.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.auth.AuthObjectRequest.AuthObjectCert cert = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ipv4 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipv4()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipv4().data(), static_cast<int>(this->ipv4().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.auth.AuthObjectRequest.ipv4"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ipv6 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipv6()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipv6().data(), static_cast<int>(this->ipv6().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.auth.AuthObjectRequest.ipv6"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.auth.AuthObjectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.auth.AuthObjectRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AuthObjectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.auth.AuthObjectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string protocol = 1;
  if (this->protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), static_cast<int>(this->protocol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectRequest.protocol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->protocol(), output);
  }

  // string object = 2;
  if (this->object().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object().data(), static_cast<int>(this->object().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectRequest.object");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->object(), output);
  }

  // string client_id = 3;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectRequest.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->client_id(), output);
  }

  // string username = 4;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectRequest.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->username(), output);
  }

  // string password = 5;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->password(), output);
  }

  // .ric.auth.AuthObjectRequest.AuthObjectCert cert = 6;
  if (this->has_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::cert(this), output);
  }

  // string ipv4 = 7;
  if (this->ipv4().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipv4().data(), static_cast<int>(this->ipv4().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectRequest.ipv4");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->ipv4(), output);
  }

  // string ipv6 = 8;
  if (this->ipv6().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipv6().data(), static_cast<int>(this->ipv6().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectRequest.ipv6");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->ipv6(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.auth.AuthObjectRequest)
}

::google::protobuf::uint8* AuthObjectRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.auth.AuthObjectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string protocol = 1;
  if (this->protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), static_cast<int>(this->protocol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectRequest.protocol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->protocol(), target);
  }

  // string object = 2;
  if (this->object().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object().data(), static_cast<int>(this->object().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectRequest.object");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->object(), target);
  }

  // string client_id = 3;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectRequest.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->client_id(), target);
  }

  // string username = 4;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectRequest.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->username(), target);
  }

  // string password = 5;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->password(), target);
  }

  // .ric.auth.AuthObjectRequest.AuthObjectCert cert = 6;
  if (this->has_cert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::cert(this), target);
  }

  // string ipv4 = 7;
  if (this->ipv4().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipv4().data(), static_cast<int>(this->ipv4().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectRequest.ipv4");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ipv4(), target);
  }

  // string ipv6 = 8;
  if (this->ipv6().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipv6().data(), static_cast<int>(this->ipv6().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectRequest.ipv6");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ipv6(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.auth.AuthObjectRequest)
  return target;
}

size_t AuthObjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.auth.AuthObjectRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protocol = 1;
  if (this->protocol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocol());
  }

  // string object = 2;
  if (this->object().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object());
  }

  // string client_id = 3;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // string username = 4;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string password = 5;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // string ipv4 = 7;
  if (this->ipv4().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipv4());
  }

  // string ipv6 = 8;
  if (this->ipv6().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipv6());
  }

  // .ric.auth.AuthObjectRequest.AuthObjectCert cert = 6;
  if (this->has_cert()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cert_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthObjectRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.auth.AuthObjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthObjectRequest* source =
      ::google::protobuf::DynamicCastToGenerated<AuthObjectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.auth.AuthObjectRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.auth.AuthObjectRequest)
    MergeFrom(*source);
  }
}

void AuthObjectRequest::MergeFrom(const AuthObjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.auth.AuthObjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocol().size() > 0) {

    protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  if (from.object().size() > 0) {

    object_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_);
  }
  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.ipv4().size() > 0) {

    ipv4_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipv4_);
  }
  if (from.ipv6().size() > 0) {

    ipv6_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipv6_);
  }
  if (from.has_cert()) {
    mutable_cert()->::ric::auth::AuthObjectRequest_AuthObjectCert::MergeFrom(from.cert());
  }
}

void AuthObjectRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.auth.AuthObjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthObjectRequest::CopyFrom(const AuthObjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.auth.AuthObjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthObjectRequest::IsInitialized() const {
  return true;
}

void AuthObjectRequest::Swap(AuthObjectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthObjectRequest::InternalSwap(AuthObjectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  protocol_.Swap(&other->protocol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  object_.Swap(&other->object_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_id_.Swap(&other->client_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipv4_.Swap(&other->ipv4_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipv6_.Swap(&other->ipv6_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cert_, other->cert_);
}

::google::protobuf::Metadata AuthObjectRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dauth_2fricauth_2eproto);
  return ::file_level_metadata_ric_2dauth_2fricauth_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AuthObjectResponse::InitAsDefaultInstance() {
}
class AuthObjectResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthObjectResponse::kSessionFieldNumber;
const int AuthObjectResponse::kModelIdFieldNumber;
const int AuthObjectResponse::kObjectIdFieldNumber;
const int AuthObjectResponse::kGroupIdFieldNumber;
const int AuthObjectResponse::kGroupKeyFieldNumber;
const int AuthObjectResponse::kArgumentsFieldNumber;
const int AuthObjectResponse::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthObjectResponse::AuthObjectResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.auth.AuthObjectResponse)
}
AuthObjectResponse::AuthObjectResponse(const AuthObjectResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      arguments_(from.arguments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session().size() > 0) {
    session_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_);
  }
  model_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model_id().size() > 0) {
    model_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_id().size() > 0) {
    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  group_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_key().size() > 0) {
    group_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_key_);
  }
  config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.config().size() > 0) {
    config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.auth.AuthObjectResponse)
}

void AuthObjectResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AuthObjectResponse_ric_2dauth_2fricauth_2eproto.base);
  session_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AuthObjectResponse::~AuthObjectResponse() {
  // @@protoc_insertion_point(destructor:ric.auth.AuthObjectResponse)
  SharedDtor();
}

void AuthObjectResponse::SharedDtor() {
  session_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthObjectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthObjectResponse& AuthObjectResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AuthObjectResponse_ric_2dauth_2fricauth_2eproto.base);
  return *internal_default_instance();
}


void AuthObjectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.auth.AuthObjectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arguments_.Clear();
  session_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AuthObjectResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AuthObjectResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string session = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.auth.AuthObjectResponse.session");
        object = msg->mutable_session();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string model_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.auth.AuthObjectResponse.model_id");
        object = msg->mutable_model_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string object_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.auth.AuthObjectResponse.object_id");
        object = msg->mutable_object_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string group_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.auth.AuthObjectResponse.group_id");
        object = msg->mutable_group_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string group_key = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.auth.AuthObjectResponse.group_key");
        object = msg->mutable_group_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .ric.auth.AuthObjectArgument arguments = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ric::auth::AuthObjectArgument::_InternalParse;
          object = msg->add_arguments();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // string config = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.auth.AuthObjectResponse.config");
        object = msg->mutable_config();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AuthObjectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.auth.AuthObjectResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string session = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session().data(), static_cast<int>(this->session().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.auth.AuthObjectResponse.session"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_id().data(), static_cast<int>(this->model_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.auth.AuthObjectResponse.model_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string object_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), static_cast<int>(this->object_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.auth.AuthObjectResponse.object_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), static_cast<int>(this->group_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.auth.AuthObjectResponse.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group_key = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_key().data(), static_cast<int>(this->group_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.auth.AuthObjectResponse.group_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ric.auth.AuthObjectArgument arguments = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_arguments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string config = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->config().data(), static_cast<int>(this->config().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.auth.AuthObjectResponse.config"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.auth.AuthObjectResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.auth.AuthObjectResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AuthObjectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.auth.AuthObjectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session = 1;
  if (this->session().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session().data(), static_cast<int>(this->session().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectResponse.session");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session(), output);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_id().data(), static_cast<int>(this->model_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectResponse.model_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model_id(), output);
  }

  // string object_id = 3;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectResponse.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->object_id(), output);
  }

  // string group_id = 4;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectResponse.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->group_id(), output);
  }

  // string group_key = 5;
  if (this->group_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_key().data(), static_cast<int>(this->group_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectResponse.group_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->group_key(), output);
  }

  // repeated .ric.auth.AuthObjectArgument arguments = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arguments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->arguments(static_cast<int>(i)),
      output);
  }

  // string config = 7;
  if (this->config().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->config().data(), static_cast<int>(this->config().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectResponse.config");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->config(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.auth.AuthObjectResponse)
}

::google::protobuf::uint8* AuthObjectResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.auth.AuthObjectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session = 1;
  if (this->session().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session().data(), static_cast<int>(this->session().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectResponse.session");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session(), target);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_id().data(), static_cast<int>(this->model_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectResponse.model_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->model_id(), target);
  }

  // string object_id = 3;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectResponse.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->object_id(), target);
  }

  // string group_id = 4;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectResponse.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->group_id(), target);
  }

  // string group_key = 5;
  if (this->group_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_key().data(), static_cast<int>(this->group_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectResponse.group_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->group_key(), target);
  }

  // repeated .ric.auth.AuthObjectArgument arguments = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arguments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->arguments(static_cast<int>(i)), target);
  }

  // string config = 7;
  if (this->config().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->config().data(), static_cast<int>(this->config().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectResponse.config");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->config(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.auth.AuthObjectResponse)
  return target;
}

size_t AuthObjectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.auth.AuthObjectResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ric.auth.AuthObjectArgument arguments = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->arguments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->arguments(static_cast<int>(i)));
    }
  }

  // string session = 1;
  if (this->session().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session());
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_id());
  }

  // string object_id = 3;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  // string group_id = 4;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // string group_key = 5;
  if (this->group_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_key());
  }

  // string config = 7;
  if (this->config().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->config());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthObjectResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.auth.AuthObjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthObjectResponse* source =
      ::google::protobuf::DynamicCastToGenerated<AuthObjectResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.auth.AuthObjectResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.auth.AuthObjectResponse)
    MergeFrom(*source);
  }
}

void AuthObjectResponse::MergeFrom(const AuthObjectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.auth.AuthObjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arguments_.MergeFrom(from.arguments_);
  if (from.session().size() > 0) {

    session_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_);
  }
  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  if (from.group_key().size() > 0) {

    group_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_key_);
  }
  if (from.config().size() > 0) {

    config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_);
  }
}

void AuthObjectResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.auth.AuthObjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthObjectResponse::CopyFrom(const AuthObjectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.auth.AuthObjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthObjectResponse::IsInitialized() const {
  return true;
}

void AuthObjectResponse::Swap(AuthObjectResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthObjectResponse::InternalSwap(AuthObjectResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&arguments_)->InternalSwap(CastToBase(&other->arguments_));
  session_.Swap(&other->session_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_id_.Swap(&other->model_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  object_id_.Swap(&other->object_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  group_id_.Swap(&other->group_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  group_key_.Swap(&other->group_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  config_.Swap(&other->config_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata AuthObjectResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dauth_2fricauth_2eproto);
  return ::file_level_metadata_ric_2dauth_2fricauth_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AuthObjectArgument::InitAsDefaultInstance() {
}
class AuthObjectArgument::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthObjectArgument::kIdFieldNumber;
const int AuthObjectArgument::kDataTypeFieldNumber;
const int AuthObjectArgument::kReferenceFieldNumber;
const int AuthObjectArgument::kParserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthObjectArgument::AuthObjectArgument()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.auth.AuthObjectArgument)
}
AuthObjectArgument::AuthObjectArgument(const AuthObjectArgument& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  data_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data_type().size() > 0) {
    data_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_type_);
  }
  reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference().size() > 0) {
    reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  parser_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parser().size() > 0) {
    parser_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parser_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.auth.AuthObjectArgument)
}

void AuthObjectArgument::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AuthObjectArgument_ric_2dauth_2fricauth_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parser_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AuthObjectArgument::~AuthObjectArgument() {
  // @@protoc_insertion_point(destructor:ric.auth.AuthObjectArgument)
  SharedDtor();
}

void AuthObjectArgument::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parser_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthObjectArgument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthObjectArgument& AuthObjectArgument::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AuthObjectArgument_ric_2dauth_2fricauth_2eproto.base);
  return *internal_default_instance();
}


void AuthObjectArgument::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.auth.AuthObjectArgument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AuthObjectArgument::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AuthObjectArgument*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.auth.AuthObjectArgument.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string data_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.auth.AuthObjectArgument.data_type");
        object = msg->mutable_data_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string reference = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.auth.AuthObjectArgument.reference");
        object = msg->mutable_reference();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string parser = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.auth.AuthObjectArgument.parser");
        object = msg->mutable_parser();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AuthObjectArgument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.auth.AuthObjectArgument)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.auth.AuthObjectArgument.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data_type().data(), static_cast<int>(this->data_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.auth.AuthObjectArgument.data_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference().data(), static_cast<int>(this->reference().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.auth.AuthObjectArgument.reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string parser = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parser()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parser().data(), static_cast<int>(this->parser().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.auth.AuthObjectArgument.parser"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.auth.AuthObjectArgument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.auth.AuthObjectArgument)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AuthObjectArgument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.auth.AuthObjectArgument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectArgument.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string data_type = 2;
  if (this->data_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_type().data(), static_cast<int>(this->data_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectArgument.data_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data_type(), output);
  }

  // string reference = 3;
  if (this->reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference().data(), static_cast<int>(this->reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectArgument.reference");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reference(), output);
  }

  // string parser = 4;
  if (this->parser().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parser().data(), static_cast<int>(this->parser().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectArgument.parser");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->parser(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.auth.AuthObjectArgument)
}

::google::protobuf::uint8* AuthObjectArgument::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.auth.AuthObjectArgument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectArgument.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string data_type = 2;
  if (this->data_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_type().data(), static_cast<int>(this->data_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectArgument.data_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data_type(), target);
  }

  // string reference = 3;
  if (this->reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference().data(), static_cast<int>(this->reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectArgument.reference");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reference(), target);
  }

  // string parser = 4;
  if (this->parser().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parser().data(), static_cast<int>(this->parser().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.auth.AuthObjectArgument.parser");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->parser(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.auth.AuthObjectArgument)
  return target;
}

size_t AuthObjectArgument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.auth.AuthObjectArgument)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string data_type = 2;
  if (this->data_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data_type());
  }

  // string reference = 3;
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference());
  }

  // string parser = 4;
  if (this->parser().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parser());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthObjectArgument::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.auth.AuthObjectArgument)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthObjectArgument* source =
      ::google::protobuf::DynamicCastToGenerated<AuthObjectArgument>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.auth.AuthObjectArgument)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.auth.AuthObjectArgument)
    MergeFrom(*source);
  }
}

void AuthObjectArgument::MergeFrom(const AuthObjectArgument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.auth.AuthObjectArgument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.data_type().size() > 0) {

    data_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_type_);
  }
  if (from.reference().size() > 0) {

    reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  if (from.parser().size() > 0) {

    parser_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parser_);
  }
}

void AuthObjectArgument::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.auth.AuthObjectArgument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthObjectArgument::CopyFrom(const AuthObjectArgument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.auth.AuthObjectArgument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthObjectArgument::IsInitialized() const {
  return true;
}

void AuthObjectArgument::Swap(AuthObjectArgument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthObjectArgument::InternalSwap(AuthObjectArgument* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_type_.Swap(&other->data_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reference_.Swap(&other->reference_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parser_.Swap(&other->parser_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata AuthObjectArgument::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dauth_2fricauth_2eproto);
  return ::file_level_metadata_ric_2dauth_2fricauth_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace auth
}  // namespace ric
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::ric::auth::AuthObjectRequest_AuthObjectCert* Arena::CreateMaybeMessage< ::ric::auth::AuthObjectRequest_AuthObjectCert >(Arena* arena) {
  return Arena::CreateInternal< ::ric::auth::AuthObjectRequest_AuthObjectCert >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::auth::AuthObjectRequest* Arena::CreateMaybeMessage< ::ric::auth::AuthObjectRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::auth::AuthObjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::auth::AuthObjectResponse* Arena::CreateMaybeMessage< ::ric::auth::AuthObjectResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::auth::AuthObjectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::auth::AuthObjectArgument* Arena::CreateMaybeMessage< ::ric::auth::AuthObjectArgument >(Arena* arena) {
  return Arena::CreateInternal< ::ric::auth::AuthObjectArgument >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
