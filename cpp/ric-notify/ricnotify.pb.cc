// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ric-notify/ricnotify.proto

#include "ric-notify/ricnotify.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_ric_2dnotify_2fricnotify_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SMPPStatusResponse_SMPPStatus_ric_2dnotify_2fricnotify_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dnotify_2fricnotify_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SMTPCredentials_ric_2dnotify_2fricnotify_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dnotify_2fricnotify_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserContext_ric_2dnotify_2fricnotify_2eproto;
namespace ric {
namespace notify {
class UserContextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserContext> _instance;
} _UserContext_default_instance_;
class SMPPSendRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMPPSendRequest> _instance;
} _SMPPSendRequest_default_instance_;
class SMPPSendResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMPPSendResponse> _instance;
} _SMPPSendResponse_default_instance_;
class SMPPStatusRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMPPStatusRequest> _instance;
} _SMPPStatusRequest_default_instance_;
class SMPPStatusResponse_SMPPStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMPPStatusResponse_SMPPStatus> _instance;
} _SMPPStatusResponse_SMPPStatus_default_instance_;
class SMPPStatusResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMPPStatusResponse> _instance;
} _SMPPStatusResponse_default_instance_;
class SMPPGatewayInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMPPGatewayInfoRequest> _instance;
} _SMPPGatewayInfoRequest_default_instance_;
class SMPPGatewayInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMPPGatewayInfoResponse> _instance;
} _SMPPGatewayInfoResponse_default_instance_;
class SMTPCredentialsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMTPCredentials> _instance;
} _SMTPCredentials_default_instance_;
class SMTPSendRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMTPSendRequest> _instance;
} _SMTPSendRequest_default_instance_;
class SMTPSendResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMTPSendResponse> _instance;
} _SMTPSendResponse_default_instance_;
class SMTPGatewayInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMTPGatewayInfoRequest> _instance;
} _SMTPGatewayInfoRequest_default_instance_;
class SMTPGatewayInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMTPGatewayInfoResponse> _instance;
} _SMTPGatewayInfoResponse_default_instance_;
}  // namespace notify
}  // namespace ric
static void InitDefaultsUserContext_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_UserContext_default_instance_;
    new (ptr) ::ric::notify::UserContext();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::UserContext::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserContext_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserContext_ric_2dnotify_2fricnotify_2eproto}, {}};

static void InitDefaultsSMPPSendRequest_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMPPSendRequest_default_instance_;
    new (ptr) ::ric::notify::SMPPSendRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMPPSendRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SMPPSendRequest_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSMPPSendRequest_ric_2dnotify_2fricnotify_2eproto}, {
      &scc_info_UserContext_ric_2dnotify_2fricnotify_2eproto.base,}};

static void InitDefaultsSMPPSendResponse_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMPPSendResponse_default_instance_;
    new (ptr) ::ric::notify::SMPPSendResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMPPSendResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SMPPSendResponse_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSMPPSendResponse_ric_2dnotify_2fricnotify_2eproto}, {}};

static void InitDefaultsSMPPStatusRequest_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMPPStatusRequest_default_instance_;
    new (ptr) ::ric::notify::SMPPStatusRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMPPStatusRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SMPPStatusRequest_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSMPPStatusRequest_ric_2dnotify_2fricnotify_2eproto}, {}};

static void InitDefaultsSMPPStatusResponse_SMPPStatus_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMPPStatusResponse_SMPPStatus_default_instance_;
    new (ptr) ::ric::notify::SMPPStatusResponse_SMPPStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMPPStatusResponse_SMPPStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SMPPStatusResponse_SMPPStatus_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSMPPStatusResponse_SMPPStatus_ric_2dnotify_2fricnotify_2eproto}, {}};

static void InitDefaultsSMPPStatusResponse_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMPPStatusResponse_default_instance_;
    new (ptr) ::ric::notify::SMPPStatusResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMPPStatusResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SMPPStatusResponse_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSMPPStatusResponse_ric_2dnotify_2fricnotify_2eproto}, {
      &scc_info_SMPPStatusResponse_SMPPStatus_ric_2dnotify_2fricnotify_2eproto.base,}};

static void InitDefaultsSMPPGatewayInfoRequest_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMPPGatewayInfoRequest_default_instance_;
    new (ptr) ::ric::notify::SMPPGatewayInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMPPGatewayInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SMPPGatewayInfoRequest_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSMPPGatewayInfoRequest_ric_2dnotify_2fricnotify_2eproto}, {}};

static void InitDefaultsSMPPGatewayInfoResponse_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMPPGatewayInfoResponse_default_instance_;
    new (ptr) ::ric::notify::SMPPGatewayInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMPPGatewayInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SMPPGatewayInfoResponse_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSMPPGatewayInfoResponse_ric_2dnotify_2fricnotify_2eproto}, {}};

static void InitDefaultsSMTPCredentials_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMTPCredentials_default_instance_;
    new (ptr) ::ric::notify::SMTPCredentials();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMTPCredentials::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SMTPCredentials_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSMTPCredentials_ric_2dnotify_2fricnotify_2eproto}, {}};

static void InitDefaultsSMTPSendRequest_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMTPSendRequest_default_instance_;
    new (ptr) ::ric::notify::SMTPSendRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMTPSendRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SMTPSendRequest_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSMTPSendRequest_ric_2dnotify_2fricnotify_2eproto}, {
      &scc_info_UserContext_ric_2dnotify_2fricnotify_2eproto.base,
      &scc_info_SMTPCredentials_ric_2dnotify_2fricnotify_2eproto.base,}};

static void InitDefaultsSMTPSendResponse_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMTPSendResponse_default_instance_;
    new (ptr) ::ric::notify::SMTPSendResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMTPSendResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SMTPSendResponse_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSMTPSendResponse_ric_2dnotify_2fricnotify_2eproto}, {}};

static void InitDefaultsSMTPGatewayInfoRequest_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMTPGatewayInfoRequest_default_instance_;
    new (ptr) ::ric::notify::SMTPGatewayInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMTPGatewayInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SMTPGatewayInfoRequest_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSMTPGatewayInfoRequest_ric_2dnotify_2fricnotify_2eproto}, {}};

static void InitDefaultsSMTPGatewayInfoResponse_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMTPGatewayInfoResponse_default_instance_;
    new (ptr) ::ric::notify::SMTPGatewayInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMTPGatewayInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SMTPGatewayInfoResponse_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSMTPGatewayInfoResponse_ric_2dnotify_2fricnotify_2eproto}, {
      &scc_info_SMTPCredentials_ric_2dnotify_2fricnotify_2eproto.base,}};

void InitDefaults_ric_2dnotify_2fricnotify_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_UserContext_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMPPSendRequest_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMPPSendResponse_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMPPStatusRequest_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMPPStatusResponse_SMPPStatus_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMPPStatusResponse_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMPPGatewayInfoRequest_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMPPGatewayInfoResponse_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMTPCredentials_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMTPSendRequest_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMTPSendResponse_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMTPGatewayInfoRequest_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMTPGatewayInfoResponse_ric_2dnotify_2fricnotify_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_ric_2dnotify_2fricnotify_2eproto[13];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_ric_2dnotify_2fricnotify_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_ric_2dnotify_2fricnotify_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_ric_2dnotify_2fricnotify_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::UserContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::UserContext, group_id_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::UserContext, user_id_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::UserContext, span_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPSendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPSendRequest, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPSendRequest, gateway_id_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPSendRequest, phone_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPSendRequest, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPSendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPSendResponse, message_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPStatusRequest, gateway_id_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPStatusRequest, message_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPStatusResponse_SMPPStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPStatusResponse_SMPPStatus, msg_id_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPStatusResponse_SMPPStatus, msg_state_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPStatusResponse_SMPPStatus, final_date_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPStatusResponse_SMPPStatus, err_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPStatusResponse, state_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPStatusResponse, description_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPStatusResponse, smpp_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPGatewayInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPGatewayInfoRequest, gateway_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPGatewayInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPGatewayInfoResponse, online_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPGatewayInfoResponse, uptime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPCredentials, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPCredentials, to_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPCredentials, sender_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPCredentials, subject_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPCredentials, content_type_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPCredentials, body_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPCredentials, server_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPCredentials, password_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPCredentials, use_tls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPSendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPSendRequest, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPSendRequest, gateway_id_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPSendRequest, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPSendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPGatewayInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPGatewayInfoRequest, gateway_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPGatewayInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPGatewayInfoResponse, info_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ric::notify::UserContext)},
  { 8, -1, sizeof(::ric::notify::SMPPSendRequest)},
  { 17, -1, sizeof(::ric::notify::SMPPSendResponse)},
  { 23, -1, sizeof(::ric::notify::SMPPStatusRequest)},
  { 30, -1, sizeof(::ric::notify::SMPPStatusResponse_SMPPStatus)},
  { 39, -1, sizeof(::ric::notify::SMPPStatusResponse)},
  { 47, -1, sizeof(::ric::notify::SMPPGatewayInfoRequest)},
  { 53, -1, sizeof(::ric::notify::SMPPGatewayInfoResponse)},
  { 60, -1, sizeof(::ric::notify::SMTPCredentials)},
  { 73, -1, sizeof(::ric::notify::SMTPSendRequest)},
  { 81, -1, sizeof(::ric::notify::SMTPSendResponse)},
  { 86, -1, sizeof(::ric::notify::SMTPGatewayInfoRequest)},
  { 92, -1, sizeof(::ric::notify::SMTPGatewayInfoResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_UserContext_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMPPSendRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMPPSendResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMPPStatusRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMPPStatusResponse_SMPPStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMPPStatusResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMPPGatewayInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMPPGatewayInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMTPCredentials_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMTPSendRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMTPSendResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMTPGatewayInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMTPGatewayInfoResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto = {
  {}, AddDescriptors_ric_2dnotify_2fricnotify_2eproto, "ric-notify/ricnotify.proto", schemas,
  file_default_instances, TableStruct_ric_2dnotify_2fricnotify_2eproto::offsets,
  file_level_metadata_ric_2dnotify_2fricnotify_2eproto, 13, file_level_enum_descriptors_ric_2dnotify_2fricnotify_2eproto, file_level_service_descriptors_ric_2dnotify_2fricnotify_2eproto,
};

const char descriptor_table_protodef_ric_2dnotify_2fricnotify_2eproto[] =
  "\n\032ric-notify/ricnotify.proto\022\nric.notify"
  "\"A\n\013UserContext\022\020\n\010group_id\030\001 \001(\t\022\017\n\007use"
  "r_id\030\002 \001(\t\022\017\n\007span_id\030\003 \001(\t\"k\n\017SMPPSendR"
  "equest\022$\n\003ctx\030\001 \001(\0132\027.ric.notify.UserCon"
  "text\022\022\n\ngateway_id\030\002 \001(\t\022\r\n\005phone\030\003 \001(\t\022"
  "\017\n\007message\030\004 \001(\t\"&\n\020SMPPSendResponse\022\022\n\n"
  "message_id\030\001 \001(\t\";\n\021SMPPStatusRequest\022\022\n"
  "\ngateway_id\030\001 \001(\t\022\022\n\nmessage_id\030\002 \001(\t\"\330\002"
  "\n\022SMPPStatusResponse\0223\n\005state\030\001 \001(\0162$.ri"
  "c.notify.SMPPStatusResponse.State\022\023\n\013des"
  "cription\030\002 \001(\t\022>\n\013smpp_status\030\003 \001(\0132).ri"
  "c.notify.SMPPStatusResponse.SMPPStatus\032U"
  "\n\nSMPPStatus\022\016\n\006msg_id\030\001 \001(\t\022\021\n\tmsg_stat"
  "e\030\002 \001(\t\022\022\n\nfinal_date\030\003 \001(\t\022\020\n\010err_code\030"
  "\004 \001(\005\"a\n\005State\022\013\n\007UNKNOWN\020\000\022\014\n\010SCHEDULE\020"
  "\001\022\016\n\nSEND_ERROR\020\002\022\030\n\024MAX_RETRIES_EXCEEDE"
  "D\020\003\022\010\n\004SENT\020\004\022\t\n\005ERROR\020\005\",\n\026SMPPGatewayI"
  "nfoRequest\022\022\n\ngateway_id\030\001 \001(\t\"9\n\027SMPPGa"
  "tewayInfoResponse\022\016\n\006online\030\001 \001(\010\022\016\n\006upt"
  "ime\030\002 \001(\003\"\225\001\n\017SMTPCredentials\022\n\n\002to\030\001 \003("
  "\t\022\016\n\006sender\030\002 \001(\t\022\017\n\007subject\030\003 \001(\t\022\024\n\014co"
  "ntent_type\030\004 \001(\t\022\014\n\004body\030\005 \001(\t\022\016\n\006server"
  "\030\006 \001(\t\022\020\n\010password\030\007 \001(\t\022\017\n\007use_tls\030\010 \001("
  "\010\"y\n\017SMTPSendRequest\022$\n\003ctx\030\001 \001(\0132\027.ric."
  "notify.UserContext\022\022\n\ngateway_id\030\002 \001(\t\022,"
  "\n\007request\030\003 \001(\0132\033.ric.notify.SMTPCredent"
  "ials\"\022\n\020SMTPSendResponse\",\n\026SMTPGatewayI"
  "nfoRequest\022\022\n\ngateway_id\030\001 \001(\t\"D\n\027SMTPGa"
  "tewayInfoResponse\022)\n\004info\030\001 \001(\0132\033.ric.no"
  "tify.SMTPCredentials2\352\001\n\004SMPP\022A\n\004Send\022\033."
  "ric.notify.SMPPSendRequest\032\034.ric.notify."
  "SMPPSendResponse\022G\n\006Status\022\035.ric.notify."
  "SMPPStatusRequest\032\036.ric.notify.SMPPStatu"
  "sResponse\022V\n\013GatewayInfo\022\".ric.notify.SM"
  "PPGatewayInfoRequest\032#.ric.notify.SMPPGa"
  "tewayInfoResponse2\241\001\n\004SMTP\022A\n\004Send\022\033.ric"
  ".notify.SMTPSendRequest\032\034.ric.notify.SMT"
  "PSendResponse\022V\n\013GatewayInfo\022\".ric.notif"
  "y.SMTPGatewayInfoRequest\032#.ric.notify.SM"
  "TPGatewayInfoResponseB\030Z\026./ric-notify;ri"
  "cnotifyb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_ric_2dnotify_2fricnotify_2eproto = {
  false, InitDefaults_ric_2dnotify_2fricnotify_2eproto, 
  descriptor_table_protodef_ric_2dnotify_2fricnotify_2eproto,
  "ric-notify/ricnotify.proto", &assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto, 1615,
};

void AddDescriptors_ric_2dnotify_2fricnotify_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_ric_2dnotify_2fricnotify_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ric_2dnotify_2fricnotify_2eproto = []() { AddDescriptors_ric_2dnotify_2fricnotify_2eproto(); return true; }();
namespace ric {
namespace notify {
const ::google::protobuf::EnumDescriptor* SMPPStatusResponse_State_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return file_level_enum_descriptors_ric_2dnotify_2fricnotify_2eproto[0];
}
bool SMPPStatusResponse_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SMPPStatusResponse_State SMPPStatusResponse::UNKNOWN;
const SMPPStatusResponse_State SMPPStatusResponse::SCHEDULE;
const SMPPStatusResponse_State SMPPStatusResponse::SEND_ERROR;
const SMPPStatusResponse_State SMPPStatusResponse::MAX_RETRIES_EXCEEDED;
const SMPPStatusResponse_State SMPPStatusResponse::SENT;
const SMPPStatusResponse_State SMPPStatusResponse::ERROR;
const SMPPStatusResponse_State SMPPStatusResponse::State_MIN;
const SMPPStatusResponse_State SMPPStatusResponse::State_MAX;
const int SMPPStatusResponse::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void UserContext::InitAsDefaultInstance() {
}
class UserContext::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserContext::kGroupIdFieldNumber;
const int UserContext::kUserIdFieldNumber;
const int UserContext::kSpanIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserContext::UserContext()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.UserContext)
}
UserContext::UserContext(const UserContext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  span_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.span_id().size() > 0) {
    span_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.span_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.notify.UserContext)
}

void UserContext::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UserContext_ric_2dnotify_2fricnotify_2eproto.base);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserContext::~UserContext() {
  // @@protoc_insertion_point(destructor:ric.notify.UserContext)
  SharedDtor();
}

void UserContext::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserContext& UserContext::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserContext_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void UserContext::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.UserContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserContext::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserContext*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string group_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.UserContext.group_id");
        object = msg->mutable_group_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string user_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.UserContext.user_id");
        object = msg->mutable_user_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string span_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.UserContext.span_id");
        object = msg->mutable_span_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.UserContext)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), static_cast<int>(this->group_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.UserContext.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.UserContext.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string span_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_span_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->span_id().data(), static_cast<int>(this->span_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.UserContext.span_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.UserContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.UserContext)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.UserContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.UserContext.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.UserContext.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // string span_id = 3;
  if (this->span_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->span_id().data(), static_cast<int>(this->span_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.UserContext.span_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->span_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.UserContext)
}

::google::protobuf::uint8* UserContext::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.UserContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.UserContext.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.UserContext.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // string span_id = 3;
  if (this->span_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->span_id().data(), static_cast<int>(this->span_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.UserContext.span_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->span_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.UserContext)
  return target;
}

size_t UserContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.UserContext)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string span_id = 3;
  if (this->span_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->span_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.UserContext)
  GOOGLE_DCHECK_NE(&from, this);
  const UserContext* source =
      ::google::protobuf::DynamicCastToGenerated<UserContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.UserContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.UserContext)
    MergeFrom(*source);
  }
}

void UserContext::MergeFrom(const UserContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.UserContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.span_id().size() > 0) {

    span_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.span_id_);
  }
}

void UserContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.UserContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserContext::CopyFrom(const UserContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.UserContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserContext::IsInitialized() const {
  return true;
}

void UserContext::Swap(UserContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserContext::InternalSwap(UserContext* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  group_id_.Swap(&other->group_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  span_id_.Swap(&other->span_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata UserContext::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMPPSendRequest::InitAsDefaultInstance() {
  ::ric::notify::_SMPPSendRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::notify::UserContext*>(
      ::ric::notify::UserContext::internal_default_instance());
}
class SMPPSendRequest::HasBitSetters {
 public:
  static const ::ric::notify::UserContext& ctx(const SMPPSendRequest* msg);
};

const ::ric::notify::UserContext&
SMPPSendRequest::HasBitSetters::ctx(const SMPPSendRequest* msg) {
  return *msg->ctx_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMPPSendRequest::kCtxFieldNumber;
const int SMPPSendRequest::kGatewayIdFieldNumber;
const int SMPPSendRequest::kPhoneFieldNumber;
const int SMPPSendRequest::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMPPSendRequest::SMPPSendRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMPPSendRequest)
}
SMPPSendRequest::SMPPSendRequest(const SMPPSendRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gateway_id().size() > 0) {
    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.phone().size() > 0) {
    phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_ctx()) {
    ctx_ = new ::ric::notify::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMPPSendRequest)
}

void SMPPSendRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SMPPSendRequest_ric_2dnotify_2fricnotify_2eproto.base);
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ctx_ = nullptr;
}

SMPPSendRequest::~SMPPSendRequest() {
  // @@protoc_insertion_point(destructor:ric.notify.SMPPSendRequest)
  SharedDtor();
}

void SMPPSendRequest::SharedDtor() {
  gateway_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ctx_;
}

void SMPPSendRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMPPSendRequest& SMPPSendRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMPPSendRequest_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMPPSendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMPPSendRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gateway_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMPPSendRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMPPSendRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.notify.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::notify::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string gateway_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPSendRequest.gateway_id");
        object = msg->mutable_gateway_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string phone = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPSendRequest.phone");
        object = msg->mutable_phone();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string message = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPSendRequest.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMPPSendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMPPSendRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.notify.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gateway_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPSendRequest.gateway_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string phone = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phone().data(), static_cast<int>(this->phone().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPSendRequest.phone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPSendRequest.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMPPSendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMPPSendRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMPPSendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMPPSendRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.notify.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // string gateway_id = 2;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPSendRequest.gateway_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gateway_id(), output);
  }

  // string phone = 3;
  if (this->phone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPSendRequest.phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->phone(), output);
  }

  // string message = 4;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPSendRequest.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMPPSendRequest)
}

::google::protobuf::uint8* SMPPSendRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMPPSendRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.notify.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // string gateway_id = 2;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPSendRequest.gateway_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gateway_id(), target);
  }

  // string phone = 3;
  if (this->phone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPSendRequest.phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->phone(), target);
  }

  // string message = 4;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPSendRequest.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMPPSendRequest)
  return target;
}

size_t SMPPSendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMPPSendRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gateway_id = 2;
  if (this->gateway_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gateway_id());
  }

  // string phone = 3;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phone());
  }

  // string message = 4;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // .ric.notify.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMPPSendRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMPPSendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SMPPSendRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SMPPSendRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMPPSendRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMPPSendRequest)
    MergeFrom(*source);
  }
}

void SMPPSendRequest::MergeFrom(const SMPPSendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMPPSendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gateway_id().size() > 0) {

    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
  if (from.phone().size() > 0) {

    phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_ctx()) {
    mutable_ctx()->::ric::notify::UserContext::MergeFrom(from.ctx());
  }
}

void SMPPSendRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMPPSendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMPPSendRequest::CopyFrom(const SMPPSendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMPPSendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMPPSendRequest::IsInitialized() const {
  return true;
}

void SMPPSendRequest::Swap(SMPPSendRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMPPSendRequest::InternalSwap(SMPPSendRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gateway_id_.Swap(&other->gateway_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  phone_.Swap(&other->phone_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ctx_, other->ctx_);
}

::google::protobuf::Metadata SMPPSendRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMPPSendResponse::InitAsDefaultInstance() {
}
class SMPPSendResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMPPSendResponse::kMessageIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMPPSendResponse::SMPPSendResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMPPSendResponse)
}
SMPPSendResponse::SMPPSendResponse(const SMPPSendResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message_id().size() > 0) {
    message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMPPSendResponse)
}

void SMPPSendResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SMPPSendResponse_ric_2dnotify_2fricnotify_2eproto.base);
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SMPPSendResponse::~SMPPSendResponse() {
  // @@protoc_insertion_point(destructor:ric.notify.SMPPSendResponse)
  SharedDtor();
}

void SMPPSendResponse::SharedDtor() {
  message_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SMPPSendResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMPPSendResponse& SMPPSendResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMPPSendResponse_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMPPSendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMPPSendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMPPSendResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMPPSendResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string message_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPSendResponse.message_id");
        object = msg->mutable_message_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMPPSendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMPPSendResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_id().data(), static_cast<int>(this->message_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPSendResponse.message_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMPPSendResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMPPSendResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMPPSendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMPPSendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_id = 1;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), static_cast<int>(this->message_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPSendResponse.message_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMPPSendResponse)
}

::google::protobuf::uint8* SMPPSendResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMPPSendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_id = 1;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), static_cast<int>(this->message_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPSendResponse.message_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMPPSendResponse)
  return target;
}

size_t SMPPSendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMPPSendResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_id = 1;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMPPSendResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMPPSendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SMPPSendResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SMPPSendResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMPPSendResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMPPSendResponse)
    MergeFrom(*source);
  }
}

void SMPPSendResponse::MergeFrom(const SMPPSendResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMPPSendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message_id().size() > 0) {

    message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
}

void SMPPSendResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMPPSendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMPPSendResponse::CopyFrom(const SMPPSendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMPPSendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMPPSendResponse::IsInitialized() const {
  return true;
}

void SMPPSendResponse::Swap(SMPPSendResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMPPSendResponse::InternalSwap(SMPPSendResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_id_.Swap(&other->message_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata SMPPSendResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMPPStatusRequest::InitAsDefaultInstance() {
}
class SMPPStatusRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMPPStatusRequest::kGatewayIdFieldNumber;
const int SMPPStatusRequest::kMessageIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMPPStatusRequest::SMPPStatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMPPStatusRequest)
}
SMPPStatusRequest::SMPPStatusRequest(const SMPPStatusRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gateway_id().size() > 0) {
    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message_id().size() > 0) {
    message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMPPStatusRequest)
}

void SMPPStatusRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SMPPStatusRequest_ric_2dnotify_2fricnotify_2eproto.base);
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SMPPStatusRequest::~SMPPStatusRequest() {
  // @@protoc_insertion_point(destructor:ric.notify.SMPPStatusRequest)
  SharedDtor();
}

void SMPPStatusRequest::SharedDtor() {
  gateway_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SMPPStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMPPStatusRequest& SMPPStatusRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMPPStatusRequest_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMPPStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMPPStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gateway_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMPPStatusRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMPPStatusRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string gateway_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPStatusRequest.gateway_id");
        object = msg->mutable_gateway_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string message_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPStatusRequest.message_id");
        object = msg->mutable_message_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMPPStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMPPStatusRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gateway_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPStatusRequest.gateway_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_id().data(), static_cast<int>(this->message_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPStatusRequest.message_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMPPStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMPPStatusRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMPPStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMPPStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gateway_id = 1;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPStatusRequest.gateway_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gateway_id(), output);
  }

  // string message_id = 2;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), static_cast<int>(this->message_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPStatusRequest.message_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMPPStatusRequest)
}

::google::protobuf::uint8* SMPPStatusRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMPPStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gateway_id = 1;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPStatusRequest.gateway_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gateway_id(), target);
  }

  // string message_id = 2;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), static_cast<int>(this->message_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPStatusRequest.message_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMPPStatusRequest)
  return target;
}

size_t SMPPStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMPPStatusRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gateway_id = 1;
  if (this->gateway_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gateway_id());
  }

  // string message_id = 2;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMPPStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMPPStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SMPPStatusRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SMPPStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMPPStatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMPPStatusRequest)
    MergeFrom(*source);
  }
}

void SMPPStatusRequest::MergeFrom(const SMPPStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMPPStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gateway_id().size() > 0) {

    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
  if (from.message_id().size() > 0) {

    message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
}

void SMPPStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMPPStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMPPStatusRequest::CopyFrom(const SMPPStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMPPStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMPPStatusRequest::IsInitialized() const {
  return true;
}

void SMPPStatusRequest::Swap(SMPPStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMPPStatusRequest::InternalSwap(SMPPStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gateway_id_.Swap(&other->gateway_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_id_.Swap(&other->message_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata SMPPStatusRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMPPStatusResponse_SMPPStatus::InitAsDefaultInstance() {
}
class SMPPStatusResponse_SMPPStatus::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMPPStatusResponse_SMPPStatus::kMsgIdFieldNumber;
const int SMPPStatusResponse_SMPPStatus::kMsgStateFieldNumber;
const int SMPPStatusResponse_SMPPStatus::kFinalDateFieldNumber;
const int SMPPStatusResponse_SMPPStatus::kErrCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMPPStatusResponse_SMPPStatus::SMPPStatusResponse_SMPPStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMPPStatusResponse.SMPPStatus)
}
SMPPStatusResponse_SMPPStatus::SMPPStatusResponse_SMPPStatus(const SMPPStatusResponse_SMPPStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg_id().size() > 0) {
    msg_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_id_);
  }
  msg_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg_state().size() > 0) {
    msg_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_state_);
  }
  final_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.final_date().size() > 0) {
    final_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.final_date_);
  }
  err_code_ = from.err_code_;
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMPPStatusResponse.SMPPStatus)
}

void SMPPStatusResponse_SMPPStatus::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SMPPStatusResponse_SMPPStatus_ric_2dnotify_2fricnotify_2eproto.base);
  msg_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  final_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_code_ = 0;
}

SMPPStatusResponse_SMPPStatus::~SMPPStatusResponse_SMPPStatus() {
  // @@protoc_insertion_point(destructor:ric.notify.SMPPStatusResponse.SMPPStatus)
  SharedDtor();
}

void SMPPStatusResponse_SMPPStatus::SharedDtor() {
  msg_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  final_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SMPPStatusResponse_SMPPStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMPPStatusResponse_SMPPStatus& SMPPStatusResponse_SMPPStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMPPStatusResponse_SMPPStatus_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMPPStatusResponse_SMPPStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMPPStatusResponse.SMPPStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  final_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMPPStatusResponse_SMPPStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMPPStatusResponse_SMPPStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string msg_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPStatusResponse.SMPPStatus.msg_id");
        object = msg->mutable_msg_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string msg_state = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPStatusResponse.SMPPStatus.msg_state");
        object = msg->mutable_msg_state();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string final_date = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPStatusResponse.SMPPStatus.final_date");
        object = msg->mutable_final_date();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 err_code = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_err_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMPPStatusResponse_SMPPStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMPPStatusResponse.SMPPStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg_id().data(), static_cast<int>(this->msg_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPStatusResponse.SMPPStatus.msg_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg_state().data(), static_cast<int>(this->msg_state().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPStatusResponse.SMPPStatus.msg_state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string final_date = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_final_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->final_date().data(), static_cast<int>(this->final_date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPStatusResponse.SMPPStatus.final_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 err_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMPPStatusResponse.SMPPStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMPPStatusResponse.SMPPStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMPPStatusResponse_SMPPStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMPPStatusResponse.SMPPStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg_id = 1;
  if (this->msg_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_id().data(), static_cast<int>(this->msg_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPStatusResponse.SMPPStatus.msg_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg_id(), output);
  }

  // string msg_state = 2;
  if (this->msg_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_state().data(), static_cast<int>(this->msg_state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPStatusResponse.SMPPStatus.msg_state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg_state(), output);
  }

  // string final_date = 3;
  if (this->final_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->final_date().data(), static_cast<int>(this->final_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPStatusResponse.SMPPStatus.final_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->final_date(), output);
  }

  // int32 err_code = 4;
  if (this->err_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->err_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMPPStatusResponse.SMPPStatus)
}

::google::protobuf::uint8* SMPPStatusResponse_SMPPStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMPPStatusResponse.SMPPStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg_id = 1;
  if (this->msg_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_id().data(), static_cast<int>(this->msg_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPStatusResponse.SMPPStatus.msg_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg_id(), target);
  }

  // string msg_state = 2;
  if (this->msg_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_state().data(), static_cast<int>(this->msg_state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPStatusResponse.SMPPStatus.msg_state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg_state(), target);
  }

  // string final_date = 3;
  if (this->final_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->final_date().data(), static_cast<int>(this->final_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPStatusResponse.SMPPStatus.final_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->final_date(), target);
  }

  // int32 err_code = 4;
  if (this->err_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->err_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMPPStatusResponse.SMPPStatus)
  return target;
}

size_t SMPPStatusResponse_SMPPStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMPPStatusResponse.SMPPStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg_id = 1;
  if (this->msg_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_id());
  }

  // string msg_state = 2;
  if (this->msg_state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_state());
  }

  // string final_date = 3;
  if (this->final_date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->final_date());
  }

  // int32 err_code = 4;
  if (this->err_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->err_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMPPStatusResponse_SMPPStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMPPStatusResponse.SMPPStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SMPPStatusResponse_SMPPStatus* source =
      ::google::protobuf::DynamicCastToGenerated<SMPPStatusResponse_SMPPStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMPPStatusResponse.SMPPStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMPPStatusResponse.SMPPStatus)
    MergeFrom(*source);
  }
}

void SMPPStatusResponse_SMPPStatus::MergeFrom(const SMPPStatusResponse_SMPPStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMPPStatusResponse.SMPPStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_id().size() > 0) {

    msg_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_id_);
  }
  if (from.msg_state().size() > 0) {

    msg_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_state_);
  }
  if (from.final_date().size() > 0) {

    final_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.final_date_);
  }
  if (from.err_code() != 0) {
    set_err_code(from.err_code());
  }
}

void SMPPStatusResponse_SMPPStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMPPStatusResponse.SMPPStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMPPStatusResponse_SMPPStatus::CopyFrom(const SMPPStatusResponse_SMPPStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMPPStatusResponse.SMPPStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMPPStatusResponse_SMPPStatus::IsInitialized() const {
  return true;
}

void SMPPStatusResponse_SMPPStatus::Swap(SMPPStatusResponse_SMPPStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMPPStatusResponse_SMPPStatus::InternalSwap(SMPPStatusResponse_SMPPStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_id_.Swap(&other->msg_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msg_state_.Swap(&other->msg_state_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  final_date_.Swap(&other->final_date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(err_code_, other->err_code_);
}

::google::protobuf::Metadata SMPPStatusResponse_SMPPStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMPPStatusResponse::InitAsDefaultInstance() {
  ::ric::notify::_SMPPStatusResponse_default_instance_._instance.get_mutable()->smpp_status_ = const_cast< ::ric::notify::SMPPStatusResponse_SMPPStatus*>(
      ::ric::notify::SMPPStatusResponse_SMPPStatus::internal_default_instance());
}
class SMPPStatusResponse::HasBitSetters {
 public:
  static const ::ric::notify::SMPPStatusResponse_SMPPStatus& smpp_status(const SMPPStatusResponse* msg);
};

const ::ric::notify::SMPPStatusResponse_SMPPStatus&
SMPPStatusResponse::HasBitSetters::smpp_status(const SMPPStatusResponse* msg) {
  return *msg->smpp_status_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMPPStatusResponse::kStateFieldNumber;
const int SMPPStatusResponse::kDescriptionFieldNumber;
const int SMPPStatusResponse::kSmppStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMPPStatusResponse::SMPPStatusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMPPStatusResponse)
}
SMPPStatusResponse::SMPPStatusResponse(const SMPPStatusResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_smpp_status()) {
    smpp_status_ = new ::ric::notify::SMPPStatusResponse_SMPPStatus(*from.smpp_status_);
  } else {
    smpp_status_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMPPStatusResponse)
}

void SMPPStatusResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SMPPStatusResponse_ric_2dnotify_2fricnotify_2eproto.base);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&smpp_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&smpp_status_)) + sizeof(state_));
}

SMPPStatusResponse::~SMPPStatusResponse() {
  // @@protoc_insertion_point(destructor:ric.notify.SMPPStatusResponse)
  SharedDtor();
}

void SMPPStatusResponse::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete smpp_status_;
}

void SMPPStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMPPStatusResponse& SMPPStatusResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMPPStatusResponse_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMPPStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMPPStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && smpp_status_ != nullptr) {
    delete smpp_status_;
  }
  smpp_status_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMPPStatusResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMPPStatusResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.notify.SMPPStatusResponse.State state = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_state(static_cast<::ric::notify::SMPPStatusResponse_State>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string description = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPStatusResponse.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ric.notify.SMPPStatusResponse.SMPPStatus smpp_status = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::notify::SMPPStatusResponse_SMPPStatus::_InternalParse;
        object = msg->mutable_smpp_status();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMPPStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMPPStatusResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.notify.SMPPStatusResponse.State state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::ric::notify::SMPPStatusResponse_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPStatusResponse.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.notify.SMPPStatusResponse.SMPPStatus smpp_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_smpp_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMPPStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMPPStatusResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMPPStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMPPStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.notify.SMPPStatusResponse.State state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPStatusResponse.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // .ric.notify.SMPPStatusResponse.SMPPStatus smpp_status = 3;
  if (this->has_smpp_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::smpp_status(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMPPStatusResponse)
}

::google::protobuf::uint8* SMPPStatusResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMPPStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.notify.SMPPStatusResponse.State state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPStatusResponse.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // .ric.notify.SMPPStatusResponse.SMPPStatus smpp_status = 3;
  if (this->has_smpp_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::smpp_status(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMPPStatusResponse)
  return target;
}

size_t SMPPStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMPPStatusResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // .ric.notify.SMPPStatusResponse.SMPPStatus smpp_status = 3;
  if (this->has_smpp_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *smpp_status_);
  }

  // .ric.notify.SMPPStatusResponse.State state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMPPStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMPPStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SMPPStatusResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SMPPStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMPPStatusResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMPPStatusResponse)
    MergeFrom(*source);
  }
}

void SMPPStatusResponse::MergeFrom(const SMPPStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMPPStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_smpp_status()) {
    mutable_smpp_status()->::ric::notify::SMPPStatusResponse_SMPPStatus::MergeFrom(from.smpp_status());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void SMPPStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMPPStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMPPStatusResponse::CopyFrom(const SMPPStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMPPStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMPPStatusResponse::IsInitialized() const {
  return true;
}

void SMPPStatusResponse::Swap(SMPPStatusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMPPStatusResponse::InternalSwap(SMPPStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(smpp_status_, other->smpp_status_);
  swap(state_, other->state_);
}

::google::protobuf::Metadata SMPPStatusResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMPPGatewayInfoRequest::InitAsDefaultInstance() {
}
class SMPPGatewayInfoRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMPPGatewayInfoRequest::kGatewayIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMPPGatewayInfoRequest::SMPPGatewayInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMPPGatewayInfoRequest)
}
SMPPGatewayInfoRequest::SMPPGatewayInfoRequest(const SMPPGatewayInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gateway_id().size() > 0) {
    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMPPGatewayInfoRequest)
}

void SMPPGatewayInfoRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SMPPGatewayInfoRequest_ric_2dnotify_2fricnotify_2eproto.base);
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SMPPGatewayInfoRequest::~SMPPGatewayInfoRequest() {
  // @@protoc_insertion_point(destructor:ric.notify.SMPPGatewayInfoRequest)
  SharedDtor();
}

void SMPPGatewayInfoRequest::SharedDtor() {
  gateway_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SMPPGatewayInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMPPGatewayInfoRequest& SMPPGatewayInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMPPGatewayInfoRequest_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMPPGatewayInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMPPGatewayInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gateway_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMPPGatewayInfoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMPPGatewayInfoRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string gateway_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPGatewayInfoRequest.gateway_id");
        object = msg->mutable_gateway_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMPPGatewayInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMPPGatewayInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gateway_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPGatewayInfoRequest.gateway_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMPPGatewayInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMPPGatewayInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMPPGatewayInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMPPGatewayInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gateway_id = 1;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPGatewayInfoRequest.gateway_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gateway_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMPPGatewayInfoRequest)
}

::google::protobuf::uint8* SMPPGatewayInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMPPGatewayInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gateway_id = 1;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPGatewayInfoRequest.gateway_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gateway_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMPPGatewayInfoRequest)
  return target;
}

size_t SMPPGatewayInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMPPGatewayInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gateway_id = 1;
  if (this->gateway_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gateway_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMPPGatewayInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMPPGatewayInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SMPPGatewayInfoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SMPPGatewayInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMPPGatewayInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMPPGatewayInfoRequest)
    MergeFrom(*source);
  }
}

void SMPPGatewayInfoRequest::MergeFrom(const SMPPGatewayInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMPPGatewayInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gateway_id().size() > 0) {

    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
}

void SMPPGatewayInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMPPGatewayInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMPPGatewayInfoRequest::CopyFrom(const SMPPGatewayInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMPPGatewayInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMPPGatewayInfoRequest::IsInitialized() const {
  return true;
}

void SMPPGatewayInfoRequest::Swap(SMPPGatewayInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMPPGatewayInfoRequest::InternalSwap(SMPPGatewayInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gateway_id_.Swap(&other->gateway_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata SMPPGatewayInfoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMPPGatewayInfoResponse::InitAsDefaultInstance() {
}
class SMPPGatewayInfoResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMPPGatewayInfoResponse::kOnlineFieldNumber;
const int SMPPGatewayInfoResponse::kUptimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMPPGatewayInfoResponse::SMPPGatewayInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMPPGatewayInfoResponse)
}
SMPPGatewayInfoResponse::SMPPGatewayInfoResponse(const SMPPGatewayInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uptime_, &from.uptime_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_) -
    reinterpret_cast<char*>(&uptime_)) + sizeof(online_));
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMPPGatewayInfoResponse)
}

void SMPPGatewayInfoResponse::SharedCtor() {
  ::memset(&uptime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&uptime_)) + sizeof(online_));
}

SMPPGatewayInfoResponse::~SMPPGatewayInfoResponse() {
  // @@protoc_insertion_point(destructor:ric.notify.SMPPGatewayInfoResponse)
  SharedDtor();
}

void SMPPGatewayInfoResponse::SharedDtor() {
}

void SMPPGatewayInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMPPGatewayInfoResponse& SMPPGatewayInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMPPGatewayInfoResponse_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMPPGatewayInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMPPGatewayInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uptime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&uptime_)) + sizeof(online_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMPPGatewayInfoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMPPGatewayInfoResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool online = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_online(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 uptime = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_uptime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMPPGatewayInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMPPGatewayInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool online = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 uptime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMPPGatewayInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMPPGatewayInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMPPGatewayInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMPPGatewayInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool online = 1;
  if (this->online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->online(), output);
  }

  // int64 uptime = 2;
  if (this->uptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uptime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMPPGatewayInfoResponse)
}

::google::protobuf::uint8* SMPPGatewayInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMPPGatewayInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool online = 1;
  if (this->online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->online(), target);
  }

  // int64 uptime = 2;
  if (this->uptime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uptime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMPPGatewayInfoResponse)
  return target;
}

size_t SMPPGatewayInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMPPGatewayInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 uptime = 2;
  if (this->uptime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uptime());
  }

  // bool online = 1;
  if (this->online() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMPPGatewayInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMPPGatewayInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SMPPGatewayInfoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SMPPGatewayInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMPPGatewayInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMPPGatewayInfoResponse)
    MergeFrom(*source);
  }
}

void SMPPGatewayInfoResponse::MergeFrom(const SMPPGatewayInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMPPGatewayInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uptime() != 0) {
    set_uptime(from.uptime());
  }
  if (from.online() != 0) {
    set_online(from.online());
  }
}

void SMPPGatewayInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMPPGatewayInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMPPGatewayInfoResponse::CopyFrom(const SMPPGatewayInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMPPGatewayInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMPPGatewayInfoResponse::IsInitialized() const {
  return true;
}

void SMPPGatewayInfoResponse::Swap(SMPPGatewayInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMPPGatewayInfoResponse::InternalSwap(SMPPGatewayInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uptime_, other->uptime_);
  swap(online_, other->online_);
}

::google::protobuf::Metadata SMPPGatewayInfoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMTPCredentials::InitAsDefaultInstance() {
}
class SMTPCredentials::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMTPCredentials::kToFieldNumber;
const int SMTPCredentials::kSenderFieldNumber;
const int SMTPCredentials::kSubjectFieldNumber;
const int SMTPCredentials::kContentTypeFieldNumber;
const int SMTPCredentials::kBodyFieldNumber;
const int SMTPCredentials::kServerFieldNumber;
const int SMTPCredentials::kPasswordFieldNumber;
const int SMTPCredentials::kUseTlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMTPCredentials::SMTPCredentials()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMTPCredentials)
}
SMTPCredentials::SMTPCredentials(const SMTPCredentials& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      to_(from.to_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sender().size() > 0) {
    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  subject_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subject().size() > 0) {
    subject_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subject_);
  }
  content_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content_type().size() > 0) {
    content_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_type_);
  }
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.body().size() > 0) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server().size() > 0) {
    server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  use_tls_ = from.use_tls_;
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMTPCredentials)
}

void SMTPCredentials::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SMTPCredentials_ric_2dnotify_2fricnotify_2eproto.base);
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  use_tls_ = false;
}

SMTPCredentials::~SMTPCredentials() {
  // @@protoc_insertion_point(destructor:ric.notify.SMTPCredentials)
  SharedDtor();
}

void SMTPCredentials::SharedDtor() {
  sender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SMTPCredentials::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMTPCredentials& SMTPCredentials::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMTPCredentials_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMTPCredentials::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMTPCredentials)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_.Clear();
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  use_tls_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMTPCredentials::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMTPCredentials*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string to = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("ric.notify.SMTPCredentials.to");
          object = msg->add_to();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string sender = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMTPCredentials.sender");
        object = msg->mutable_sender();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string subject = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMTPCredentials.subject");
        object = msg->mutable_subject();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string content_type = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMTPCredentials.content_type");
        object = msg->mutable_content_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string body = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMTPCredentials.body");
        object = msg->mutable_body();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string server = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMTPCredentials.server");
        object = msg->mutable_server();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string password = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMTPCredentials.password");
        object = msg->mutable_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool use_tls = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_use_tls(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMTPCredentials::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMTPCredentials)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string to = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_to()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to(this->to_size() - 1).data(),
            static_cast<int>(this->to(this->to_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPCredentials.to"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sender = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sender().data(), static_cast<int>(this->sender().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPCredentials.sender"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string subject = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subject().data(), static_cast<int>(this->subject().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPCredentials.subject"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string content_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content_type().data(), static_cast<int>(this->content_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPCredentials.content_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string body = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->body().data(), static_cast<int>(this->body().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPCredentials.body"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server().data(), static_cast<int>(this->server().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPCredentials.server"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPCredentials.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_tls = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_tls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMTPCredentials)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMTPCredentials)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMTPCredentials::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMTPCredentials)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string to = 1;
  for (int i = 0, n = this->to_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to(i).data(), static_cast<int>(this->to(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPCredentials.to");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->to(i), output);
  }

  // string sender = 2;
  if (this->sender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPCredentials.sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sender(), output);
  }

  // string subject = 3;
  if (this->subject().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subject().data(), static_cast<int>(this->subject().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPCredentials.subject");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->subject(), output);
  }

  // string content_type = 4;
  if (this->content_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content_type().data(), static_cast<int>(this->content_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPCredentials.content_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->content_type(), output);
  }

  // string body = 5;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->body().data(), static_cast<int>(this->body().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPCredentials.body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->body(), output);
  }

  // string server = 6;
  if (this->server().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server().data(), static_cast<int>(this->server().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPCredentials.server");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->server(), output);
  }

  // string password = 7;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPCredentials.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->password(), output);
  }

  // bool use_tls = 8;
  if (this->use_tls() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->use_tls(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMTPCredentials)
}

::google::protobuf::uint8* SMTPCredentials::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMTPCredentials)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string to = 1;
  for (int i = 0, n = this->to_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to(i).data(), static_cast<int>(this->to(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPCredentials.to");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->to(i), target);
  }

  // string sender = 2;
  if (this->sender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPCredentials.sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sender(), target);
  }

  // string subject = 3;
  if (this->subject().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subject().data(), static_cast<int>(this->subject().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPCredentials.subject");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->subject(), target);
  }

  // string content_type = 4;
  if (this->content_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content_type().data(), static_cast<int>(this->content_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPCredentials.content_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content_type(), target);
  }

  // string body = 5;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->body().data(), static_cast<int>(this->body().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPCredentials.body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->body(), target);
  }

  // string server = 6;
  if (this->server().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server().data(), static_cast<int>(this->server().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPCredentials.server");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->server(), target);
  }

  // string password = 7;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPCredentials.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->password(), target);
  }

  // bool use_tls = 8;
  if (this->use_tls() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->use_tls(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMTPCredentials)
  return target;
}

size_t SMTPCredentials::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMTPCredentials)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string to = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->to_size());
  for (int i = 0, n = this->to_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->to(i));
  }

  // string sender = 2;
  if (this->sender().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender());
  }

  // string subject = 3;
  if (this->subject().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subject());
  }

  // string content_type = 4;
  if (this->content_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content_type());
  }

  // string body = 5;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body());
  }

  // string server = 6;
  if (this->server().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server());
  }

  // string password = 7;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // bool use_tls = 8;
  if (this->use_tls() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMTPCredentials::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMTPCredentials)
  GOOGLE_DCHECK_NE(&from, this);
  const SMTPCredentials* source =
      ::google::protobuf::DynamicCastToGenerated<SMTPCredentials>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMTPCredentials)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMTPCredentials)
    MergeFrom(*source);
  }
}

void SMTPCredentials::MergeFrom(const SMTPCredentials& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMTPCredentials)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  to_.MergeFrom(from.to_);
  if (from.sender().size() > 0) {

    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  if (from.subject().size() > 0) {

    subject_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subject_);
  }
  if (from.content_type().size() > 0) {

    content_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_type_);
  }
  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.server().size() > 0) {

    server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.use_tls() != 0) {
    set_use_tls(from.use_tls());
  }
}

void SMTPCredentials::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMTPCredentials)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMTPCredentials::CopyFrom(const SMTPCredentials& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMTPCredentials)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMTPCredentials::IsInitialized() const {
  return true;
}

void SMTPCredentials::Swap(SMTPCredentials* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMTPCredentials::InternalSwap(SMTPCredentials* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  to_.InternalSwap(CastToBase(&other->to_));
  sender_.Swap(&other->sender_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  subject_.Swap(&other->subject_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_type_.Swap(&other->content_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  body_.Swap(&other->body_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  server_.Swap(&other->server_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(use_tls_, other->use_tls_);
}

::google::protobuf::Metadata SMTPCredentials::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMTPSendRequest::InitAsDefaultInstance() {
  ::ric::notify::_SMTPSendRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::notify::UserContext*>(
      ::ric::notify::UserContext::internal_default_instance());
  ::ric::notify::_SMTPSendRequest_default_instance_._instance.get_mutable()->request_ = const_cast< ::ric::notify::SMTPCredentials*>(
      ::ric::notify::SMTPCredentials::internal_default_instance());
}
class SMTPSendRequest::HasBitSetters {
 public:
  static const ::ric::notify::UserContext& ctx(const SMTPSendRequest* msg);
  static const ::ric::notify::SMTPCredentials& request(const SMTPSendRequest* msg);
};

const ::ric::notify::UserContext&
SMTPSendRequest::HasBitSetters::ctx(const SMTPSendRequest* msg) {
  return *msg->ctx_;
}
const ::ric::notify::SMTPCredentials&
SMTPSendRequest::HasBitSetters::request(const SMTPSendRequest* msg) {
  return *msg->request_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMTPSendRequest::kCtxFieldNumber;
const int SMTPSendRequest::kGatewayIdFieldNumber;
const int SMTPSendRequest::kRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMTPSendRequest::SMTPSendRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMTPSendRequest)
}
SMTPSendRequest::SMTPSendRequest(const SMTPSendRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gateway_id().size() > 0) {
    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
  if (from.has_ctx()) {
    ctx_ = new ::ric::notify::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  if (from.has_request()) {
    request_ = new ::ric::notify::SMTPCredentials(*from.request_);
  } else {
    request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMTPSendRequest)
}

void SMTPSendRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SMTPSendRequest_ric_2dnotify_2fricnotify_2eproto.base);
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ctx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_) -
      reinterpret_cast<char*>(&ctx_)) + sizeof(request_));
}

SMTPSendRequest::~SMTPSendRequest() {
  // @@protoc_insertion_point(destructor:ric.notify.SMTPSendRequest)
  SharedDtor();
}

void SMTPSendRequest::SharedDtor() {
  gateway_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ctx_;
  if (this != internal_default_instance()) delete request_;
}

void SMTPSendRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMTPSendRequest& SMTPSendRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMTPSendRequest_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMTPSendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMTPSendRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gateway_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMTPSendRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMTPSendRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.notify.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::notify::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string gateway_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMTPSendRequest.gateway_id");
        object = msg->mutable_gateway_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ric.notify.SMTPCredentials request = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::notify::SMTPCredentials::_InternalParse;
        object = msg->mutable_request();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMTPSendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMTPSendRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.notify.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gateway_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPSendRequest.gateway_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.notify.SMTPCredentials request = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMTPSendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMTPSendRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMTPSendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMTPSendRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.notify.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // string gateway_id = 2;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPSendRequest.gateway_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gateway_id(), output);
  }

  // .ric.notify.SMTPCredentials request = 3;
  if (this->has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::request(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMTPSendRequest)
}

::google::protobuf::uint8* SMTPSendRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMTPSendRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.notify.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // string gateway_id = 2;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPSendRequest.gateway_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gateway_id(), target);
  }

  // .ric.notify.SMTPCredentials request = 3;
  if (this->has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::request(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMTPSendRequest)
  return target;
}

size_t SMTPSendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMTPSendRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gateway_id = 2;
  if (this->gateway_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gateway_id());
  }

  // .ric.notify.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  // .ric.notify.SMTPCredentials request = 3;
  if (this->has_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *request_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMTPSendRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMTPSendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SMTPSendRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SMTPSendRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMTPSendRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMTPSendRequest)
    MergeFrom(*source);
  }
}

void SMTPSendRequest::MergeFrom(const SMTPSendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMTPSendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gateway_id().size() > 0) {

    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
  if (from.has_ctx()) {
    mutable_ctx()->::ric::notify::UserContext::MergeFrom(from.ctx());
  }
  if (from.has_request()) {
    mutable_request()->::ric::notify::SMTPCredentials::MergeFrom(from.request());
  }
}

void SMTPSendRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMTPSendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMTPSendRequest::CopyFrom(const SMTPSendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMTPSendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMTPSendRequest::IsInitialized() const {
  return true;
}

void SMTPSendRequest::Swap(SMTPSendRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMTPSendRequest::InternalSwap(SMTPSendRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gateway_id_.Swap(&other->gateway_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ctx_, other->ctx_);
  swap(request_, other->request_);
}

::google::protobuf::Metadata SMTPSendRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMTPSendResponse::InitAsDefaultInstance() {
}
class SMTPSendResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMTPSendResponse::SMTPSendResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMTPSendResponse)
}
SMTPSendResponse::SMTPSendResponse(const SMTPSendResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMTPSendResponse)
}

void SMTPSendResponse::SharedCtor() {
}

SMTPSendResponse::~SMTPSendResponse() {
  // @@protoc_insertion_point(destructor:ric.notify.SMTPSendResponse)
  SharedDtor();
}

void SMTPSendResponse::SharedDtor() {
}

void SMTPSendResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMTPSendResponse& SMTPSendResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMTPSendResponse_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMTPSendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMTPSendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMTPSendResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMTPSendResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMTPSendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMTPSendResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMTPSendResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMTPSendResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMTPSendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMTPSendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMTPSendResponse)
}

::google::protobuf::uint8* SMTPSendResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMTPSendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMTPSendResponse)
  return target;
}

size_t SMTPSendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMTPSendResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMTPSendResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMTPSendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SMTPSendResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SMTPSendResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMTPSendResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMTPSendResponse)
    MergeFrom(*source);
  }
}

void SMTPSendResponse::MergeFrom(const SMTPSendResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMTPSendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SMTPSendResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMTPSendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMTPSendResponse::CopyFrom(const SMTPSendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMTPSendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMTPSendResponse::IsInitialized() const {
  return true;
}

void SMTPSendResponse::Swap(SMTPSendResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMTPSendResponse::InternalSwap(SMTPSendResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SMTPSendResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMTPGatewayInfoRequest::InitAsDefaultInstance() {
}
class SMTPGatewayInfoRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMTPGatewayInfoRequest::kGatewayIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMTPGatewayInfoRequest::SMTPGatewayInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMTPGatewayInfoRequest)
}
SMTPGatewayInfoRequest::SMTPGatewayInfoRequest(const SMTPGatewayInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gateway_id().size() > 0) {
    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMTPGatewayInfoRequest)
}

void SMTPGatewayInfoRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SMTPGatewayInfoRequest_ric_2dnotify_2fricnotify_2eproto.base);
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SMTPGatewayInfoRequest::~SMTPGatewayInfoRequest() {
  // @@protoc_insertion_point(destructor:ric.notify.SMTPGatewayInfoRequest)
  SharedDtor();
}

void SMTPGatewayInfoRequest::SharedDtor() {
  gateway_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SMTPGatewayInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMTPGatewayInfoRequest& SMTPGatewayInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMTPGatewayInfoRequest_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMTPGatewayInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMTPGatewayInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gateway_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMTPGatewayInfoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMTPGatewayInfoRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string gateway_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMTPGatewayInfoRequest.gateway_id");
        object = msg->mutable_gateway_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMTPGatewayInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMTPGatewayInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gateway_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPGatewayInfoRequest.gateway_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMTPGatewayInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMTPGatewayInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMTPGatewayInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMTPGatewayInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gateway_id = 1;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPGatewayInfoRequest.gateway_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gateway_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMTPGatewayInfoRequest)
}

::google::protobuf::uint8* SMTPGatewayInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMTPGatewayInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gateway_id = 1;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPGatewayInfoRequest.gateway_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gateway_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMTPGatewayInfoRequest)
  return target;
}

size_t SMTPGatewayInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMTPGatewayInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gateway_id = 1;
  if (this->gateway_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gateway_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMTPGatewayInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMTPGatewayInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SMTPGatewayInfoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SMTPGatewayInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMTPGatewayInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMTPGatewayInfoRequest)
    MergeFrom(*source);
  }
}

void SMTPGatewayInfoRequest::MergeFrom(const SMTPGatewayInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMTPGatewayInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gateway_id().size() > 0) {

    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
}

void SMTPGatewayInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMTPGatewayInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMTPGatewayInfoRequest::CopyFrom(const SMTPGatewayInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMTPGatewayInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMTPGatewayInfoRequest::IsInitialized() const {
  return true;
}

void SMTPGatewayInfoRequest::Swap(SMTPGatewayInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMTPGatewayInfoRequest::InternalSwap(SMTPGatewayInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gateway_id_.Swap(&other->gateway_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata SMTPGatewayInfoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMTPGatewayInfoResponse::InitAsDefaultInstance() {
  ::ric::notify::_SMTPGatewayInfoResponse_default_instance_._instance.get_mutable()->info_ = const_cast< ::ric::notify::SMTPCredentials*>(
      ::ric::notify::SMTPCredentials::internal_default_instance());
}
class SMTPGatewayInfoResponse::HasBitSetters {
 public:
  static const ::ric::notify::SMTPCredentials& info(const SMTPGatewayInfoResponse* msg);
};

const ::ric::notify::SMTPCredentials&
SMTPGatewayInfoResponse::HasBitSetters::info(const SMTPGatewayInfoResponse* msg) {
  return *msg->info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMTPGatewayInfoResponse::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMTPGatewayInfoResponse::SMTPGatewayInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMTPGatewayInfoResponse)
}
SMTPGatewayInfoResponse::SMTPGatewayInfoResponse(const SMTPGatewayInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::ric::notify::SMTPCredentials(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMTPGatewayInfoResponse)
}

void SMTPGatewayInfoResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SMTPGatewayInfoResponse_ric_2dnotify_2fricnotify_2eproto.base);
  info_ = nullptr;
}

SMTPGatewayInfoResponse::~SMTPGatewayInfoResponse() {
  // @@protoc_insertion_point(destructor:ric.notify.SMTPGatewayInfoResponse)
  SharedDtor();
}

void SMTPGatewayInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void SMTPGatewayInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMTPGatewayInfoResponse& SMTPGatewayInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMTPGatewayInfoResponse_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMTPGatewayInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMTPGatewayInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMTPGatewayInfoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMTPGatewayInfoResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.notify.SMTPCredentials info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::notify::SMTPCredentials::_InternalParse;
        object = msg->mutable_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMTPGatewayInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMTPGatewayInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.notify.SMTPCredentials info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMTPGatewayInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMTPGatewayInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMTPGatewayInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMTPGatewayInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.notify.SMTPCredentials info = 1;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMTPGatewayInfoResponse)
}

::google::protobuf::uint8* SMTPGatewayInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMTPGatewayInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.notify.SMTPCredentials info = 1;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMTPGatewayInfoResponse)
  return target;
}

size_t SMTPGatewayInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMTPGatewayInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.notify.SMTPCredentials info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMTPGatewayInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMTPGatewayInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SMTPGatewayInfoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SMTPGatewayInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMTPGatewayInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMTPGatewayInfoResponse)
    MergeFrom(*source);
  }
}

void SMTPGatewayInfoResponse::MergeFrom(const SMTPGatewayInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMTPGatewayInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::ric::notify::SMTPCredentials::MergeFrom(from.info());
  }
}

void SMTPGatewayInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMTPGatewayInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMTPGatewayInfoResponse::CopyFrom(const SMTPGatewayInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMTPGatewayInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMTPGatewayInfoResponse::IsInitialized() const {
  return true;
}

void SMTPGatewayInfoResponse::Swap(SMTPGatewayInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMTPGatewayInfoResponse::InternalSwap(SMTPGatewayInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::google::protobuf::Metadata SMTPGatewayInfoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace notify
}  // namespace ric
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::ric::notify::UserContext* Arena::CreateMaybeMessage< ::ric::notify::UserContext >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::UserContext >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMPPSendRequest* Arena::CreateMaybeMessage< ::ric::notify::SMPPSendRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMPPSendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMPPSendResponse* Arena::CreateMaybeMessage< ::ric::notify::SMPPSendResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMPPSendResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMPPStatusRequest* Arena::CreateMaybeMessage< ::ric::notify::SMPPStatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMPPStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMPPStatusResponse_SMPPStatus* Arena::CreateMaybeMessage< ::ric::notify::SMPPStatusResponse_SMPPStatus >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMPPStatusResponse_SMPPStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMPPStatusResponse* Arena::CreateMaybeMessage< ::ric::notify::SMPPStatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMPPStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMPPGatewayInfoRequest* Arena::CreateMaybeMessage< ::ric::notify::SMPPGatewayInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMPPGatewayInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMPPGatewayInfoResponse* Arena::CreateMaybeMessage< ::ric::notify::SMPPGatewayInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMPPGatewayInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMTPCredentials* Arena::CreateMaybeMessage< ::ric::notify::SMTPCredentials >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMTPCredentials >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMTPSendRequest* Arena::CreateMaybeMessage< ::ric::notify::SMTPSendRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMTPSendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMTPSendResponse* Arena::CreateMaybeMessage< ::ric::notify::SMTPSendResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMTPSendResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMTPGatewayInfoRequest* Arena::CreateMaybeMessage< ::ric::notify::SMTPGatewayInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMTPGatewayInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMTPGatewayInfoResponse* Arena::CreateMaybeMessage< ::ric::notify::SMTPGatewayInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMTPGatewayInfoResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
