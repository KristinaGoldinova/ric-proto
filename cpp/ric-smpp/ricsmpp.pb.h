// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ric-smpp/ricsmpp.proto

#ifndef PROTOBUF_INCLUDED_ric_2dsmpp_2fricsmpp_2eproto
#define PROTOBUF_INCLUDED_ric_2dsmpp_2fricsmpp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ric_2dsmpp_2fricsmpp_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_ric_2dsmpp_2fricsmpp_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_ric_2dsmpp_2fricsmpp_2eproto();
namespace ric {
namespace smpp {
class GatewayInfoRequest;
class GatewayInfoRequestDefaultTypeInternal;
extern GatewayInfoRequestDefaultTypeInternal _GatewayInfoRequest_default_instance_;
class GatewayInfoResponse;
class GatewayInfoResponseDefaultTypeInternal;
extern GatewayInfoResponseDefaultTypeInternal _GatewayInfoResponse_default_instance_;
class SendRequest;
class SendRequestDefaultTypeInternal;
extern SendRequestDefaultTypeInternal _SendRequest_default_instance_;
class SendResponse;
class SendResponseDefaultTypeInternal;
extern SendResponseDefaultTypeInternal _SendResponse_default_instance_;
class StatusRequest;
class StatusRequestDefaultTypeInternal;
extern StatusRequestDefaultTypeInternal _StatusRequest_default_instance_;
class StatusResponse;
class StatusResponseDefaultTypeInternal;
extern StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
class StatusResponse_SMPPStatus;
class StatusResponse_SMPPStatusDefaultTypeInternal;
extern StatusResponse_SMPPStatusDefaultTypeInternal _StatusResponse_SMPPStatus_default_instance_;
class UserContext;
class UserContextDefaultTypeInternal;
extern UserContextDefaultTypeInternal _UserContext_default_instance_;
}  // namespace smpp
}  // namespace ric
namespace google {
namespace protobuf {
template<> ::ric::smpp::GatewayInfoRequest* Arena::CreateMaybeMessage<::ric::smpp::GatewayInfoRequest>(Arena*);
template<> ::ric::smpp::GatewayInfoResponse* Arena::CreateMaybeMessage<::ric::smpp::GatewayInfoResponse>(Arena*);
template<> ::ric::smpp::SendRequest* Arena::CreateMaybeMessage<::ric::smpp::SendRequest>(Arena*);
template<> ::ric::smpp::SendResponse* Arena::CreateMaybeMessage<::ric::smpp::SendResponse>(Arena*);
template<> ::ric::smpp::StatusRequest* Arena::CreateMaybeMessage<::ric::smpp::StatusRequest>(Arena*);
template<> ::ric::smpp::StatusResponse* Arena::CreateMaybeMessage<::ric::smpp::StatusResponse>(Arena*);
template<> ::ric::smpp::StatusResponse_SMPPStatus* Arena::CreateMaybeMessage<::ric::smpp::StatusResponse_SMPPStatus>(Arena*);
template<> ::ric::smpp::UserContext* Arena::CreateMaybeMessage<::ric::smpp::UserContext>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ric {
namespace smpp {

enum StatusResponse_State {
  StatusResponse_State_UNKNOWN = 0,
  StatusResponse_State_SCHEDULE = 1,
  StatusResponse_State_SEND_ERROR = 2,
  StatusResponse_State_SENT = 3,
  StatusResponse_State_ERROR = 4,
  StatusResponse_State_NOT_FOUND = 5,
  StatusResponse_State_StatusResponse_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  StatusResponse_State_StatusResponse_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool StatusResponse_State_IsValid(int value);
const StatusResponse_State StatusResponse_State_State_MIN = StatusResponse_State_UNKNOWN;
const StatusResponse_State StatusResponse_State_State_MAX = StatusResponse_State_NOT_FOUND;
const int StatusResponse_State_State_ARRAYSIZE = StatusResponse_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusResponse_State_descriptor();
inline const ::std::string& StatusResponse_State_Name(StatusResponse_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusResponse_State_descriptor(), value);
}
inline bool StatusResponse_State_Parse(
    const ::std::string& name, StatusResponse_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusResponse_State>(
    StatusResponse_State_descriptor(), name, value);
}
// ===================================================================

class UserContext final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.smpp.UserContext) */ {
 public:
  UserContext();
  virtual ~UserContext();

  UserContext(const UserContext& from);

  inline UserContext& operator=(const UserContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserContext(UserContext&& from) noexcept
    : UserContext() {
    *this = ::std::move(from);
  }

  inline UserContext& operator=(UserContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserContext* internal_default_instance() {
    return reinterpret_cast<const UserContext*>(
               &_UserContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(UserContext* other);
  friend void swap(UserContext& a, UserContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserContext* New() const final {
    return CreateMaybeMessage<UserContext>(nullptr);
  }

  UserContext* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserContext>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserContext& from);
  void MergeFrom(const UserContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string span_id = 3;
  void clear_span_id();
  static const int kSpanIdFieldNumber = 3;
  const ::std::string& span_id() const;
  void set_span_id(const ::std::string& value);
  #if LANG_CXX11
  void set_span_id(::std::string&& value);
  #endif
  void set_span_id(const char* value);
  void set_span_id(const char* value, size_t size);
  ::std::string* mutable_span_id();
  ::std::string* release_span_id();
  void set_allocated_span_id(::std::string* span_id);

  // @@protoc_insertion_point(class_scope:ric.smpp.UserContext)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr span_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dsmpp_2fricsmpp_2eproto;
};
// -------------------------------------------------------------------

class SendRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.smpp.SendRequest) */ {
 public:
  SendRequest();
  virtual ~SendRequest();

  SendRequest(const SendRequest& from);

  inline SendRequest& operator=(const SendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendRequest(SendRequest&& from) noexcept
    : SendRequest() {
    *this = ::std::move(from);
  }

  inline SendRequest& operator=(SendRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SendRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendRequest* internal_default_instance() {
    return reinterpret_cast<const SendRequest*>(
               &_SendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SendRequest* other);
  friend void swap(SendRequest& a, SendRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendRequest* New() const final {
    return CreateMaybeMessage<SendRequest>(nullptr);
  }

  SendRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendRequest& from);
  void MergeFrom(const SendRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string gateway_id = 2;
  void clear_gateway_id();
  static const int kGatewayIdFieldNumber = 2;
  const ::std::string& gateway_id() const;
  void set_gateway_id(const ::std::string& value);
  #if LANG_CXX11
  void set_gateway_id(::std::string&& value);
  #endif
  void set_gateway_id(const char* value);
  void set_gateway_id(const char* value, size_t size);
  ::std::string* mutable_gateway_id();
  ::std::string* release_gateway_id();
  void set_allocated_gateway_id(::std::string* gateway_id);

  // string phone = 3;
  void clear_phone();
  static const int kPhoneFieldNumber = 3;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // string message = 4;
  void clear_message();
  static const int kMessageFieldNumber = 4;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .ric.smpp.UserContext ctx = 1;
  bool has_ctx() const;
  void clear_ctx();
  static const int kCtxFieldNumber = 1;
  const ::ric::smpp::UserContext& ctx() const;
  ::ric::smpp::UserContext* release_ctx();
  ::ric::smpp::UserContext* mutable_ctx();
  void set_allocated_ctx(::ric::smpp::UserContext* ctx);

  // @@protoc_insertion_point(class_scope:ric.smpp.SendRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gateway_id_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::ric::smpp::UserContext* ctx_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dsmpp_2fricsmpp_2eproto;
};
// -------------------------------------------------------------------

class SendResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.smpp.SendResponse) */ {
 public:
  SendResponse();
  virtual ~SendResponse();

  SendResponse(const SendResponse& from);

  inline SendResponse& operator=(const SendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendResponse(SendResponse&& from) noexcept
    : SendResponse() {
    *this = ::std::move(from);
  }

  inline SendResponse& operator=(SendResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SendResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendResponse* internal_default_instance() {
    return reinterpret_cast<const SendResponse*>(
               &_SendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SendResponse* other);
  friend void swap(SendResponse& a, SendResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendResponse* New() const final {
    return CreateMaybeMessage<SendResponse>(nullptr);
  }

  SendResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendResponse& from);
  void MergeFrom(const SendResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message_id = 1;
  void clear_message_id();
  static const int kMessageIdFieldNumber = 1;
  const ::std::string& message_id() const;
  void set_message_id(const ::std::string& value);
  #if LANG_CXX11
  void set_message_id(::std::string&& value);
  #endif
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  ::std::string* mutable_message_id();
  ::std::string* release_message_id();
  void set_allocated_message_id(::std::string* message_id);

  // @@protoc_insertion_point(class_scope:ric.smpp.SendResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dsmpp_2fricsmpp_2eproto;
};
// -------------------------------------------------------------------

class StatusRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.smpp.StatusRequest) */ {
 public:
  StatusRequest();
  virtual ~StatusRequest();

  StatusRequest(const StatusRequest& from);

  inline StatusRequest& operator=(const StatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatusRequest(StatusRequest&& from) noexcept
    : StatusRequest() {
    *this = ::std::move(from);
  }

  inline StatusRequest& operator=(StatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusRequest* internal_default_instance() {
    return reinterpret_cast<const StatusRequest*>(
               &_StatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(StatusRequest* other);
  friend void swap(StatusRequest& a, StatusRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatusRequest* New() const final {
    return CreateMaybeMessage<StatusRequest>(nullptr);
  }

  StatusRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StatusRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StatusRequest& from);
  void MergeFrom(const StatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string gateway_id = 1;
  void clear_gateway_id();
  static const int kGatewayIdFieldNumber = 1;
  const ::std::string& gateway_id() const;
  void set_gateway_id(const ::std::string& value);
  #if LANG_CXX11
  void set_gateway_id(::std::string&& value);
  #endif
  void set_gateway_id(const char* value);
  void set_gateway_id(const char* value, size_t size);
  ::std::string* mutable_gateway_id();
  ::std::string* release_gateway_id();
  void set_allocated_gateway_id(::std::string* gateway_id);

  // string message_id = 2;
  void clear_message_id();
  static const int kMessageIdFieldNumber = 2;
  const ::std::string& message_id() const;
  void set_message_id(const ::std::string& value);
  #if LANG_CXX11
  void set_message_id(::std::string&& value);
  #endif
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  ::std::string* mutable_message_id();
  ::std::string* release_message_id();
  void set_allocated_message_id(::std::string* message_id);

  // @@protoc_insertion_point(class_scope:ric.smpp.StatusRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gateway_id_;
  ::google::protobuf::internal::ArenaStringPtr message_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dsmpp_2fricsmpp_2eproto;
};
// -------------------------------------------------------------------

class StatusResponse_SMPPStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.smpp.StatusResponse.SMPPStatus) */ {
 public:
  StatusResponse_SMPPStatus();
  virtual ~StatusResponse_SMPPStatus();

  StatusResponse_SMPPStatus(const StatusResponse_SMPPStatus& from);

  inline StatusResponse_SMPPStatus& operator=(const StatusResponse_SMPPStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatusResponse_SMPPStatus(StatusResponse_SMPPStatus&& from) noexcept
    : StatusResponse_SMPPStatus() {
    *this = ::std::move(from);
  }

  inline StatusResponse_SMPPStatus& operator=(StatusResponse_SMPPStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StatusResponse_SMPPStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusResponse_SMPPStatus* internal_default_instance() {
    return reinterpret_cast<const StatusResponse_SMPPStatus*>(
               &_StatusResponse_SMPPStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(StatusResponse_SMPPStatus* other);
  friend void swap(StatusResponse_SMPPStatus& a, StatusResponse_SMPPStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatusResponse_SMPPStatus* New() const final {
    return CreateMaybeMessage<StatusResponse_SMPPStatus>(nullptr);
  }

  StatusResponse_SMPPStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StatusResponse_SMPPStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StatusResponse_SMPPStatus& from);
  void MergeFrom(const StatusResponse_SMPPStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusResponse_SMPPStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 1;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // string msg_state = 2;
  void clear_msg_state();
  static const int kMsgStateFieldNumber = 2;
  const ::std::string& msg_state() const;
  void set_msg_state(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_state(::std::string&& value);
  #endif
  void set_msg_state(const char* value);
  void set_msg_state(const char* value, size_t size);
  ::std::string* mutable_msg_state();
  ::std::string* release_msg_state();
  void set_allocated_msg_state(::std::string* msg_state);

  // string final_date = 3;
  void clear_final_date();
  static const int kFinalDateFieldNumber = 3;
  const ::std::string& final_date() const;
  void set_final_date(const ::std::string& value);
  #if LANG_CXX11
  void set_final_date(::std::string&& value);
  #endif
  void set_final_date(const char* value);
  void set_final_date(const char* value, size_t size);
  ::std::string* mutable_final_date();
  ::std::string* release_final_date();
  void set_allocated_final_date(::std::string* final_date);

  // int32 err_code = 4;
  void clear_err_code();
  static const int kErrCodeFieldNumber = 4;
  ::google::protobuf::int32 err_code() const;
  void set_err_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ric.smpp.StatusResponse.SMPPStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  ::google::protobuf::internal::ArenaStringPtr msg_state_;
  ::google::protobuf::internal::ArenaStringPtr final_date_;
  ::google::protobuf::int32 err_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dsmpp_2fricsmpp_2eproto;
};
// -------------------------------------------------------------------

class StatusResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.smpp.StatusResponse) */ {
 public:
  StatusResponse();
  virtual ~StatusResponse();

  StatusResponse(const StatusResponse& from);

  inline StatusResponse& operator=(const StatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatusResponse(StatusResponse&& from) noexcept
    : StatusResponse() {
    *this = ::std::move(from);
  }

  inline StatusResponse& operator=(StatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusResponse* internal_default_instance() {
    return reinterpret_cast<const StatusResponse*>(
               &_StatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(StatusResponse* other);
  friend void swap(StatusResponse& a, StatusResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatusResponse* New() const final {
    return CreateMaybeMessage<StatusResponse>(nullptr);
  }

  StatusResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StatusResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StatusResponse& from);
  void MergeFrom(const StatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StatusResponse_SMPPStatus SMPPStatus;

  typedef StatusResponse_State State;
  static const State UNKNOWN =
    StatusResponse_State_UNKNOWN;
  static const State SCHEDULE =
    StatusResponse_State_SCHEDULE;
  static const State SEND_ERROR =
    StatusResponse_State_SEND_ERROR;
  static const State SENT =
    StatusResponse_State_SENT;
  static const State ERROR =
    StatusResponse_State_ERROR;
  static const State NOT_FOUND =
    StatusResponse_State_NOT_FOUND;
  static inline bool State_IsValid(int value) {
    return StatusResponse_State_IsValid(value);
  }
  static const State State_MIN =
    StatusResponse_State_State_MIN;
  static const State State_MAX =
    StatusResponse_State_State_MAX;
  static const int State_ARRAYSIZE =
    StatusResponse_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return StatusResponse_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return StatusResponse_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return StatusResponse_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .ric.smpp.StatusResponse.SMPPStatus smpp_status = 3;
  bool has_smpp_status() const;
  void clear_smpp_status();
  static const int kSmppStatusFieldNumber = 3;
  const ::ric::smpp::StatusResponse_SMPPStatus& smpp_status() const;
  ::ric::smpp::StatusResponse_SMPPStatus* release_smpp_status();
  ::ric::smpp::StatusResponse_SMPPStatus* mutable_smpp_status();
  void set_allocated_smpp_status(::ric::smpp::StatusResponse_SMPPStatus* smpp_status);

  // .ric.smpp.StatusResponse.State state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::ric::smpp::StatusResponse_State state() const;
  void set_state(::ric::smpp::StatusResponse_State value);

  // @@protoc_insertion_point(class_scope:ric.smpp.StatusResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::ric::smpp::StatusResponse_SMPPStatus* smpp_status_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dsmpp_2fricsmpp_2eproto;
};
// -------------------------------------------------------------------

class GatewayInfoRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.smpp.GatewayInfoRequest) */ {
 public:
  GatewayInfoRequest();
  virtual ~GatewayInfoRequest();

  GatewayInfoRequest(const GatewayInfoRequest& from);

  inline GatewayInfoRequest& operator=(const GatewayInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GatewayInfoRequest(GatewayInfoRequest&& from) noexcept
    : GatewayInfoRequest() {
    *this = ::std::move(from);
  }

  inline GatewayInfoRequest& operator=(GatewayInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GatewayInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GatewayInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GatewayInfoRequest*>(
               &_GatewayInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GatewayInfoRequest* other);
  friend void swap(GatewayInfoRequest& a, GatewayInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GatewayInfoRequest* New() const final {
    return CreateMaybeMessage<GatewayInfoRequest>(nullptr);
  }

  GatewayInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GatewayInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GatewayInfoRequest& from);
  void MergeFrom(const GatewayInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GatewayInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string gateway_id = 1;
  void clear_gateway_id();
  static const int kGatewayIdFieldNumber = 1;
  const ::std::string& gateway_id() const;
  void set_gateway_id(const ::std::string& value);
  #if LANG_CXX11
  void set_gateway_id(::std::string&& value);
  #endif
  void set_gateway_id(const char* value);
  void set_gateway_id(const char* value, size_t size);
  ::std::string* mutable_gateway_id();
  ::std::string* release_gateway_id();
  void set_allocated_gateway_id(::std::string* gateway_id);

  // @@protoc_insertion_point(class_scope:ric.smpp.GatewayInfoRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gateway_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dsmpp_2fricsmpp_2eproto;
};
// -------------------------------------------------------------------

class GatewayInfoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.smpp.GatewayInfoResponse) */ {
 public:
  GatewayInfoResponse();
  virtual ~GatewayInfoResponse();

  GatewayInfoResponse(const GatewayInfoResponse& from);

  inline GatewayInfoResponse& operator=(const GatewayInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GatewayInfoResponse(GatewayInfoResponse&& from) noexcept
    : GatewayInfoResponse() {
    *this = ::std::move(from);
  }

  inline GatewayInfoResponse& operator=(GatewayInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GatewayInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GatewayInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GatewayInfoResponse*>(
               &_GatewayInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GatewayInfoResponse* other);
  friend void swap(GatewayInfoResponse& a, GatewayInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GatewayInfoResponse* New() const final {
    return CreateMaybeMessage<GatewayInfoResponse>(nullptr);
  }

  GatewayInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GatewayInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GatewayInfoResponse& from);
  void MergeFrom(const GatewayInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GatewayInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 uptime = 2;
  void clear_uptime();
  static const int kUptimeFieldNumber = 2;
  ::google::protobuf::int64 uptime() const;
  void set_uptime(::google::protobuf::int64 value);

  // bool online = 1;
  void clear_online();
  static const int kOnlineFieldNumber = 1;
  bool online() const;
  void set_online(bool value);

  // @@protoc_insertion_point(class_scope:ric.smpp.GatewayInfoResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 uptime_;
  bool online_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dsmpp_2fricsmpp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserContext

// string group_id = 1;
inline void UserContext::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserContext::group_id() const {
  // @@protoc_insertion_point(field_get:ric.smpp.UserContext.group_id)
  return group_id_.GetNoArena();
}
inline void UserContext::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.smpp.UserContext.group_id)
}
#if LANG_CXX11
inline void UserContext::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.smpp.UserContext.group_id)
}
#endif
inline void UserContext::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.smpp.UserContext.group_id)
}
inline void UserContext::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.smpp.UserContext.group_id)
}
inline ::std::string* UserContext::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.smpp.UserContext.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserContext::release_group_id() {
  // @@protoc_insertion_point(field_release:ric.smpp.UserContext.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserContext::set_allocated_group_id(::std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:ric.smpp.UserContext.group_id)
}

// string user_id = 2;
inline void UserContext::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserContext::user_id() const {
  // @@protoc_insertion_point(field_get:ric.smpp.UserContext.user_id)
  return user_id_.GetNoArena();
}
inline void UserContext::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.smpp.UserContext.user_id)
}
#if LANG_CXX11
inline void UserContext::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.smpp.UserContext.user_id)
}
#endif
inline void UserContext::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.smpp.UserContext.user_id)
}
inline void UserContext::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.smpp.UserContext.user_id)
}
inline ::std::string* UserContext::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.smpp.UserContext.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserContext::release_user_id() {
  // @@protoc_insertion_point(field_release:ric.smpp.UserContext.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserContext::set_allocated_user_id(::std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:ric.smpp.UserContext.user_id)
}

// string span_id = 3;
inline void UserContext::clear_span_id() {
  span_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserContext::span_id() const {
  // @@protoc_insertion_point(field_get:ric.smpp.UserContext.span_id)
  return span_id_.GetNoArena();
}
inline void UserContext::set_span_id(const ::std::string& value) {
  
  span_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.smpp.UserContext.span_id)
}
#if LANG_CXX11
inline void UserContext::set_span_id(::std::string&& value) {
  
  span_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.smpp.UserContext.span_id)
}
#endif
inline void UserContext::set_span_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  span_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.smpp.UserContext.span_id)
}
inline void UserContext::set_span_id(const char* value, size_t size) {
  
  span_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.smpp.UserContext.span_id)
}
inline ::std::string* UserContext::mutable_span_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.smpp.UserContext.span_id)
  return span_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserContext::release_span_id() {
  // @@protoc_insertion_point(field_release:ric.smpp.UserContext.span_id)
  
  return span_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserContext::set_allocated_span_id(::std::string* span_id) {
  if (span_id != nullptr) {
    
  } else {
    
  }
  span_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), span_id);
  // @@protoc_insertion_point(field_set_allocated:ric.smpp.UserContext.span_id)
}

// -------------------------------------------------------------------

// SendRequest

// .ric.smpp.UserContext ctx = 1;
inline bool SendRequest::has_ctx() const {
  return this != internal_default_instance() && ctx_ != nullptr;
}
inline void SendRequest::clear_ctx() {
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
}
inline const ::ric::smpp::UserContext& SendRequest::ctx() const {
  const ::ric::smpp::UserContext* p = ctx_;
  // @@protoc_insertion_point(field_get:ric.smpp.SendRequest.ctx)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::smpp::UserContext*>(
      &::ric::smpp::_UserContext_default_instance_);
}
inline ::ric::smpp::UserContext* SendRequest::release_ctx() {
  // @@protoc_insertion_point(field_release:ric.smpp.SendRequest.ctx)
  
  ::ric::smpp::UserContext* temp = ctx_;
  ctx_ = nullptr;
  return temp;
}
inline ::ric::smpp::UserContext* SendRequest::mutable_ctx() {
  
  if (ctx_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::smpp::UserContext>(GetArenaNoVirtual());
    ctx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.smpp.SendRequest.ctx)
  return ctx_;
}
inline void SendRequest::set_allocated_ctx(::ric::smpp::UserContext* ctx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ctx_;
  }
  if (ctx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ctx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ctx, submessage_arena);
    }
    
  } else {
    
  }
  ctx_ = ctx;
  // @@protoc_insertion_point(field_set_allocated:ric.smpp.SendRequest.ctx)
}

// string gateway_id = 2;
inline void SendRequest::clear_gateway_id() {
  gateway_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendRequest::gateway_id() const {
  // @@protoc_insertion_point(field_get:ric.smpp.SendRequest.gateway_id)
  return gateway_id_.GetNoArena();
}
inline void SendRequest::set_gateway_id(const ::std::string& value) {
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.smpp.SendRequest.gateway_id)
}
#if LANG_CXX11
inline void SendRequest::set_gateway_id(::std::string&& value) {
  
  gateway_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.smpp.SendRequest.gateway_id)
}
#endif
inline void SendRequest::set_gateway_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.smpp.SendRequest.gateway_id)
}
inline void SendRequest::set_gateway_id(const char* value, size_t size) {
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.smpp.SendRequest.gateway_id)
}
inline ::std::string* SendRequest::mutable_gateway_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.smpp.SendRequest.gateway_id)
  return gateway_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendRequest::release_gateway_id() {
  // @@protoc_insertion_point(field_release:ric.smpp.SendRequest.gateway_id)
  
  return gateway_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendRequest::set_allocated_gateway_id(::std::string* gateway_id) {
  if (gateway_id != nullptr) {
    
  } else {
    
  }
  gateway_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway_id);
  // @@protoc_insertion_point(field_set_allocated:ric.smpp.SendRequest.gateway_id)
}

// string phone = 3;
inline void SendRequest::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendRequest::phone() const {
  // @@protoc_insertion_point(field_get:ric.smpp.SendRequest.phone)
  return phone_.GetNoArena();
}
inline void SendRequest::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.smpp.SendRequest.phone)
}
#if LANG_CXX11
inline void SendRequest::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.smpp.SendRequest.phone)
}
#endif
inline void SendRequest::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.smpp.SendRequest.phone)
}
inline void SendRequest::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.smpp.SendRequest.phone)
}
inline ::std::string* SendRequest::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:ric.smpp.SendRequest.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendRequest::release_phone() {
  // @@protoc_insertion_point(field_release:ric.smpp.SendRequest.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendRequest::set_allocated_phone(::std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:ric.smpp.SendRequest.phone)
}

// string message = 4;
inline void SendRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendRequest::message() const {
  // @@protoc_insertion_point(field_get:ric.smpp.SendRequest.message)
  return message_.GetNoArena();
}
inline void SendRequest::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.smpp.SendRequest.message)
}
#if LANG_CXX11
inline void SendRequest::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.smpp.SendRequest.message)
}
#endif
inline void SendRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.smpp.SendRequest.message)
}
inline void SendRequest::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.smpp.SendRequest.message)
}
inline ::std::string* SendRequest::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ric.smpp.SendRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendRequest::release_message() {
  // @@protoc_insertion_point(field_release:ric.smpp.SendRequest.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendRequest::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ric.smpp.SendRequest.message)
}

// -------------------------------------------------------------------

// SendResponse

// string message_id = 1;
inline void SendResponse::clear_message_id() {
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendResponse::message_id() const {
  // @@protoc_insertion_point(field_get:ric.smpp.SendResponse.message_id)
  return message_id_.GetNoArena();
}
inline void SendResponse::set_message_id(const ::std::string& value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.smpp.SendResponse.message_id)
}
#if LANG_CXX11
inline void SendResponse::set_message_id(::std::string&& value) {
  
  message_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.smpp.SendResponse.message_id)
}
#endif
inline void SendResponse::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.smpp.SendResponse.message_id)
}
inline void SendResponse::set_message_id(const char* value, size_t size) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.smpp.SendResponse.message_id)
}
inline ::std::string* SendResponse::mutable_message_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.smpp.SendResponse.message_id)
  return message_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendResponse::release_message_id() {
  // @@protoc_insertion_point(field_release:ric.smpp.SendResponse.message_id)
  
  return message_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendResponse::set_allocated_message_id(::std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_id);
  // @@protoc_insertion_point(field_set_allocated:ric.smpp.SendResponse.message_id)
}

// -------------------------------------------------------------------

// StatusRequest

// string gateway_id = 1;
inline void StatusRequest::clear_gateway_id() {
  gateway_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatusRequest::gateway_id() const {
  // @@protoc_insertion_point(field_get:ric.smpp.StatusRequest.gateway_id)
  return gateway_id_.GetNoArena();
}
inline void StatusRequest::set_gateway_id(const ::std::string& value) {
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.smpp.StatusRequest.gateway_id)
}
#if LANG_CXX11
inline void StatusRequest::set_gateway_id(::std::string&& value) {
  
  gateway_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.smpp.StatusRequest.gateway_id)
}
#endif
inline void StatusRequest::set_gateway_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.smpp.StatusRequest.gateway_id)
}
inline void StatusRequest::set_gateway_id(const char* value, size_t size) {
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.smpp.StatusRequest.gateway_id)
}
inline ::std::string* StatusRequest::mutable_gateway_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.smpp.StatusRequest.gateway_id)
  return gateway_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatusRequest::release_gateway_id() {
  // @@protoc_insertion_point(field_release:ric.smpp.StatusRequest.gateway_id)
  
  return gateway_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusRequest::set_allocated_gateway_id(::std::string* gateway_id) {
  if (gateway_id != nullptr) {
    
  } else {
    
  }
  gateway_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway_id);
  // @@protoc_insertion_point(field_set_allocated:ric.smpp.StatusRequest.gateway_id)
}

// string message_id = 2;
inline void StatusRequest::clear_message_id() {
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatusRequest::message_id() const {
  // @@protoc_insertion_point(field_get:ric.smpp.StatusRequest.message_id)
  return message_id_.GetNoArena();
}
inline void StatusRequest::set_message_id(const ::std::string& value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.smpp.StatusRequest.message_id)
}
#if LANG_CXX11
inline void StatusRequest::set_message_id(::std::string&& value) {
  
  message_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.smpp.StatusRequest.message_id)
}
#endif
inline void StatusRequest::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.smpp.StatusRequest.message_id)
}
inline void StatusRequest::set_message_id(const char* value, size_t size) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.smpp.StatusRequest.message_id)
}
inline ::std::string* StatusRequest::mutable_message_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.smpp.StatusRequest.message_id)
  return message_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatusRequest::release_message_id() {
  // @@protoc_insertion_point(field_release:ric.smpp.StatusRequest.message_id)
  
  return message_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusRequest::set_allocated_message_id(::std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_id);
  // @@protoc_insertion_point(field_set_allocated:ric.smpp.StatusRequest.message_id)
}

// -------------------------------------------------------------------

// StatusResponse_SMPPStatus

// string msg_id = 1;
inline void StatusResponse_SMPPStatus::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatusResponse_SMPPStatus::msg_id() const {
  // @@protoc_insertion_point(field_get:ric.smpp.StatusResponse.SMPPStatus.msg_id)
  return msg_id_.GetNoArena();
}
inline void StatusResponse_SMPPStatus::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.smpp.StatusResponse.SMPPStatus.msg_id)
}
#if LANG_CXX11
inline void StatusResponse_SMPPStatus::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.smpp.StatusResponse.SMPPStatus.msg_id)
}
#endif
inline void StatusResponse_SMPPStatus::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.smpp.StatusResponse.SMPPStatus.msg_id)
}
inline void StatusResponse_SMPPStatus::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.smpp.StatusResponse.SMPPStatus.msg_id)
}
inline ::std::string* StatusResponse_SMPPStatus::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.smpp.StatusResponse.SMPPStatus.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatusResponse_SMPPStatus::release_msg_id() {
  // @@protoc_insertion_point(field_release:ric.smpp.StatusResponse.SMPPStatus.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusResponse_SMPPStatus::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:ric.smpp.StatusResponse.SMPPStatus.msg_id)
}

// string msg_state = 2;
inline void StatusResponse_SMPPStatus::clear_msg_state() {
  msg_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatusResponse_SMPPStatus::msg_state() const {
  // @@protoc_insertion_point(field_get:ric.smpp.StatusResponse.SMPPStatus.msg_state)
  return msg_state_.GetNoArena();
}
inline void StatusResponse_SMPPStatus::set_msg_state(const ::std::string& value) {
  
  msg_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.smpp.StatusResponse.SMPPStatus.msg_state)
}
#if LANG_CXX11
inline void StatusResponse_SMPPStatus::set_msg_state(::std::string&& value) {
  
  msg_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.smpp.StatusResponse.SMPPStatus.msg_state)
}
#endif
inline void StatusResponse_SMPPStatus::set_msg_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.smpp.StatusResponse.SMPPStatus.msg_state)
}
inline void StatusResponse_SMPPStatus::set_msg_state(const char* value, size_t size) {
  
  msg_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.smpp.StatusResponse.SMPPStatus.msg_state)
}
inline ::std::string* StatusResponse_SMPPStatus::mutable_msg_state() {
  
  // @@protoc_insertion_point(field_mutable:ric.smpp.StatusResponse.SMPPStatus.msg_state)
  return msg_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatusResponse_SMPPStatus::release_msg_state() {
  // @@protoc_insertion_point(field_release:ric.smpp.StatusResponse.SMPPStatus.msg_state)
  
  return msg_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusResponse_SMPPStatus::set_allocated_msg_state(::std::string* msg_state) {
  if (msg_state != nullptr) {
    
  } else {
    
  }
  msg_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_state);
  // @@protoc_insertion_point(field_set_allocated:ric.smpp.StatusResponse.SMPPStatus.msg_state)
}

// string final_date = 3;
inline void StatusResponse_SMPPStatus::clear_final_date() {
  final_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatusResponse_SMPPStatus::final_date() const {
  // @@protoc_insertion_point(field_get:ric.smpp.StatusResponse.SMPPStatus.final_date)
  return final_date_.GetNoArena();
}
inline void StatusResponse_SMPPStatus::set_final_date(const ::std::string& value) {
  
  final_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.smpp.StatusResponse.SMPPStatus.final_date)
}
#if LANG_CXX11
inline void StatusResponse_SMPPStatus::set_final_date(::std::string&& value) {
  
  final_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.smpp.StatusResponse.SMPPStatus.final_date)
}
#endif
inline void StatusResponse_SMPPStatus::set_final_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  final_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.smpp.StatusResponse.SMPPStatus.final_date)
}
inline void StatusResponse_SMPPStatus::set_final_date(const char* value, size_t size) {
  
  final_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.smpp.StatusResponse.SMPPStatus.final_date)
}
inline ::std::string* StatusResponse_SMPPStatus::mutable_final_date() {
  
  // @@protoc_insertion_point(field_mutable:ric.smpp.StatusResponse.SMPPStatus.final_date)
  return final_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatusResponse_SMPPStatus::release_final_date() {
  // @@protoc_insertion_point(field_release:ric.smpp.StatusResponse.SMPPStatus.final_date)
  
  return final_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusResponse_SMPPStatus::set_allocated_final_date(::std::string* final_date) {
  if (final_date != nullptr) {
    
  } else {
    
  }
  final_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), final_date);
  // @@protoc_insertion_point(field_set_allocated:ric.smpp.StatusResponse.SMPPStatus.final_date)
}

// int32 err_code = 4;
inline void StatusResponse_SMPPStatus::clear_err_code() {
  err_code_ = 0;
}
inline ::google::protobuf::int32 StatusResponse_SMPPStatus::err_code() const {
  // @@protoc_insertion_point(field_get:ric.smpp.StatusResponse.SMPPStatus.err_code)
  return err_code_;
}
inline void StatusResponse_SMPPStatus::set_err_code(::google::protobuf::int32 value) {
  
  err_code_ = value;
  // @@protoc_insertion_point(field_set:ric.smpp.StatusResponse.SMPPStatus.err_code)
}

// -------------------------------------------------------------------

// StatusResponse

// .ric.smpp.StatusResponse.State state = 1;
inline void StatusResponse::clear_state() {
  state_ = 0;
}
inline ::ric::smpp::StatusResponse_State StatusResponse::state() const {
  // @@protoc_insertion_point(field_get:ric.smpp.StatusResponse.state)
  return static_cast< ::ric::smpp::StatusResponse_State >(state_);
}
inline void StatusResponse::set_state(::ric::smpp::StatusResponse_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ric.smpp.StatusResponse.state)
}

// string description = 2;
inline void StatusResponse::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatusResponse::description() const {
  // @@protoc_insertion_point(field_get:ric.smpp.StatusResponse.description)
  return description_.GetNoArena();
}
inline void StatusResponse::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.smpp.StatusResponse.description)
}
#if LANG_CXX11
inline void StatusResponse::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.smpp.StatusResponse.description)
}
#endif
inline void StatusResponse::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.smpp.StatusResponse.description)
}
inline void StatusResponse::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.smpp.StatusResponse.description)
}
inline ::std::string* StatusResponse::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:ric.smpp.StatusResponse.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatusResponse::release_description() {
  // @@protoc_insertion_point(field_release:ric.smpp.StatusResponse.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusResponse::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ric.smpp.StatusResponse.description)
}

// .ric.smpp.StatusResponse.SMPPStatus smpp_status = 3;
inline bool StatusResponse::has_smpp_status() const {
  return this != internal_default_instance() && smpp_status_ != nullptr;
}
inline void StatusResponse::clear_smpp_status() {
  if (GetArenaNoVirtual() == nullptr && smpp_status_ != nullptr) {
    delete smpp_status_;
  }
  smpp_status_ = nullptr;
}
inline const ::ric::smpp::StatusResponse_SMPPStatus& StatusResponse::smpp_status() const {
  const ::ric::smpp::StatusResponse_SMPPStatus* p = smpp_status_;
  // @@protoc_insertion_point(field_get:ric.smpp.StatusResponse.smpp_status)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::smpp::StatusResponse_SMPPStatus*>(
      &::ric::smpp::_StatusResponse_SMPPStatus_default_instance_);
}
inline ::ric::smpp::StatusResponse_SMPPStatus* StatusResponse::release_smpp_status() {
  // @@protoc_insertion_point(field_release:ric.smpp.StatusResponse.smpp_status)
  
  ::ric::smpp::StatusResponse_SMPPStatus* temp = smpp_status_;
  smpp_status_ = nullptr;
  return temp;
}
inline ::ric::smpp::StatusResponse_SMPPStatus* StatusResponse::mutable_smpp_status() {
  
  if (smpp_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::smpp::StatusResponse_SMPPStatus>(GetArenaNoVirtual());
    smpp_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.smpp.StatusResponse.smpp_status)
  return smpp_status_;
}
inline void StatusResponse::set_allocated_smpp_status(::ric::smpp::StatusResponse_SMPPStatus* smpp_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete smpp_status_;
  }
  if (smpp_status) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      smpp_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, smpp_status, submessage_arena);
    }
    
  } else {
    
  }
  smpp_status_ = smpp_status;
  // @@protoc_insertion_point(field_set_allocated:ric.smpp.StatusResponse.smpp_status)
}

// -------------------------------------------------------------------

// GatewayInfoRequest

// string gateway_id = 1;
inline void GatewayInfoRequest::clear_gateway_id() {
  gateway_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GatewayInfoRequest::gateway_id() const {
  // @@protoc_insertion_point(field_get:ric.smpp.GatewayInfoRequest.gateway_id)
  return gateway_id_.GetNoArena();
}
inline void GatewayInfoRequest::set_gateway_id(const ::std::string& value) {
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.smpp.GatewayInfoRequest.gateway_id)
}
#if LANG_CXX11
inline void GatewayInfoRequest::set_gateway_id(::std::string&& value) {
  
  gateway_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.smpp.GatewayInfoRequest.gateway_id)
}
#endif
inline void GatewayInfoRequest::set_gateway_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.smpp.GatewayInfoRequest.gateway_id)
}
inline void GatewayInfoRequest::set_gateway_id(const char* value, size_t size) {
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.smpp.GatewayInfoRequest.gateway_id)
}
inline ::std::string* GatewayInfoRequest::mutable_gateway_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.smpp.GatewayInfoRequest.gateway_id)
  return gateway_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GatewayInfoRequest::release_gateway_id() {
  // @@protoc_insertion_point(field_release:ric.smpp.GatewayInfoRequest.gateway_id)
  
  return gateway_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GatewayInfoRequest::set_allocated_gateway_id(::std::string* gateway_id) {
  if (gateway_id != nullptr) {
    
  } else {
    
  }
  gateway_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway_id);
  // @@protoc_insertion_point(field_set_allocated:ric.smpp.GatewayInfoRequest.gateway_id)
}

// -------------------------------------------------------------------

// GatewayInfoResponse

// bool online = 1;
inline void GatewayInfoResponse::clear_online() {
  online_ = false;
}
inline bool GatewayInfoResponse::online() const {
  // @@protoc_insertion_point(field_get:ric.smpp.GatewayInfoResponse.online)
  return online_;
}
inline void GatewayInfoResponse::set_online(bool value) {
  
  online_ = value;
  // @@protoc_insertion_point(field_set:ric.smpp.GatewayInfoResponse.online)
}

// int64 uptime = 2;
inline void GatewayInfoResponse::clear_uptime() {
  uptime_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GatewayInfoResponse::uptime() const {
  // @@protoc_insertion_point(field_get:ric.smpp.GatewayInfoResponse.uptime)
  return uptime_;
}
inline void GatewayInfoResponse::set_uptime(::google::protobuf::int64 value) {
  
  uptime_ = value;
  // @@protoc_insertion_point(field_set:ric.smpp.GatewayInfoResponse.uptime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace smpp
}  // namespace ric

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ric::smpp::StatusResponse_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ric::smpp::StatusResponse_State>() {
  return ::ric::smpp::StatusResponse_State_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_ric_2dsmpp_2fricsmpp_2eproto
