// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ric-store/ricstore.proto
#ifndef GRPC_ric_2dstore_2fricstore_2eproto__INCLUDED
#define GRPC_ric_2dstore_2fricstore_2eproto__INCLUDED

#include "ric-store/ricstore.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace ric {
namespace store {

class RicStore final {
 public:
  static constexpr char const* service_full_name() {
    return "ric.store.RicStore";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientWriterInterface< ::ric::store::Packet>> Insert(::grpc::ClientContext* context, ::ric::store::EmptyRespone* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::ric::store::Packet>>(InsertRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ric::store::Packet>> AsyncInsert(::grpc::ClientContext* context, ::ric::store::EmptyRespone* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ric::store::Packet>>(AsyncInsertRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ric::store::Packet>> PrepareAsyncInsert(::grpc::ClientContext* context, ::ric::store::EmptyRespone* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ric::store::Packet>>(PrepareAsyncInsertRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::ric::store::Packet>> Query(::grpc::ClientContext* context, const ::ric::store::QueryRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::ric::store::Packet>>(QueryRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ric::store::Packet>> AsyncQuery(::grpc::ClientContext* context, const ::ric::store::QueryRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ric::store::Packet>>(AsyncQueryRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ric::store::Packet>> PrepareAsyncQuery(::grpc::ClientContext* context, const ::ric::store::QueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ric::store::Packet>>(PrepareAsyncQueryRaw(context, request, cq));
    }
    virtual ::grpc::Status Status(::grpc::ClientContext* context, const ::ric::store::StatusRequest& request, ::ric::store::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::StatusResponse>> AsyncStatus(::grpc::ClientContext* context, const ::ric::store::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::StatusResponse>>(AsyncStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::StatusResponse>> PrepareAsyncStatus(::grpc::ClientContext* context, const ::ric::store::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::StatusResponse>>(PrepareAsyncStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateCollection(::grpc::ClientContext* context, const ::ric::store::CreateCollectionRequest& request, ::ric::store::EmptyRespone* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::EmptyRespone>> AsyncCreateCollection(::grpc::ClientContext* context, const ::ric::store::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::EmptyRespone>>(AsyncCreateCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::EmptyRespone>> PrepareAsyncCreateCollection(::grpc::ClientContext* context, const ::ric::store::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::EmptyRespone>>(PrepareAsyncCreateCollectionRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveCollection(::grpc::ClientContext* context, const ::ric::store::RemoveCollectionRequest& request, ::ric::store::EmptyRespone* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::EmptyRespone>> AsyncRemoveCollection(::grpc::ClientContext* context, const ::ric::store::RemoveCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::EmptyRespone>>(AsyncRemoveCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::EmptyRespone>> PrepareAsyncRemoveCollection(::grpc::ClientContext* context, const ::ric::store::RemoveCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::EmptyRespone>>(PrepareAsyncRemoveCollectionRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateDatabase(::grpc::ClientContext* context, const ::ric::store::CreateDatabaseRequest& request, ::ric::store::EmptyRespone* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::EmptyRespone>> AsyncCreateDatabase(::grpc::ClientContext* context, const ::ric::store::CreateDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::EmptyRespone>>(AsyncCreateDatabaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::EmptyRespone>> PrepareAsyncCreateDatabase(::grpc::ClientContext* context, const ::ric::store::CreateDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::EmptyRespone>>(PrepareAsyncCreateDatabaseRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveDatabase(::grpc::ClientContext* context, const ::ric::store::RemoveDatabaseRequest& request, ::ric::store::EmptyRespone* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::EmptyRespone>> AsyncRemoveDatabase(::grpc::ClientContext* context, const ::ric::store::RemoveDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::EmptyRespone>>(AsyncRemoveDatabaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::EmptyRespone>> PrepareAsyncRemoveDatabase(::grpc::ClientContext* context, const ::ric::store::RemoveDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::EmptyRespone>>(PrepareAsyncRemoveDatabaseRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Insert(::grpc::ClientContext* context, ::ric::store::EmptyRespone* response, ::grpc::experimental::ClientWriteReactor< ::ric::store::Packet>* reactor) = 0;
      virtual void Query(::grpc::ClientContext* context, ::ric::store::QueryRequest* request, ::grpc::experimental::ClientReadReactor< ::ric::store::Packet>* reactor) = 0;
      virtual void Status(::grpc::ClientContext* context, const ::ric::store::StatusRequest* request, ::ric::store::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::store::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCollection(::grpc::ClientContext* context, const ::ric::store::CreateCollectionRequest* request, ::ric::store::EmptyRespone* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::store::EmptyRespone* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveCollection(::grpc::ClientContext* context, const ::ric::store::RemoveCollectionRequest* request, ::ric::store::EmptyRespone* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::store::EmptyRespone* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateDatabase(::grpc::ClientContext* context, const ::ric::store::CreateDatabaseRequest* request, ::ric::store::EmptyRespone* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateDatabase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::store::EmptyRespone* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveDatabase(::grpc::ClientContext* context, const ::ric::store::RemoveDatabaseRequest* request, ::ric::store::EmptyRespone* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveDatabase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::store::EmptyRespone* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientWriterInterface< ::ric::store::Packet>* InsertRaw(::grpc::ClientContext* context, ::ric::store::EmptyRespone* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::ric::store::Packet>* AsyncInsertRaw(::grpc::ClientContext* context, ::ric::store::EmptyRespone* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::ric::store::Packet>* PrepareAsyncInsertRaw(::grpc::ClientContext* context, ::ric::store::EmptyRespone* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::ric::store::Packet>* QueryRaw(::grpc::ClientContext* context, const ::ric::store::QueryRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ric::store::Packet>* AsyncQueryRaw(::grpc::ClientContext* context, const ::ric::store::QueryRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ric::store::Packet>* PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::ric::store::QueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::StatusResponse>* AsyncStatusRaw(::grpc::ClientContext* context, const ::ric::store::StatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::StatusResponse>* PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::ric::store::StatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::EmptyRespone>* AsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::ric::store::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::EmptyRespone>* PrepareAsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::ric::store::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::EmptyRespone>* AsyncRemoveCollectionRaw(::grpc::ClientContext* context, const ::ric::store::RemoveCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::EmptyRespone>* PrepareAsyncRemoveCollectionRaw(::grpc::ClientContext* context, const ::ric::store::RemoveCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::EmptyRespone>* AsyncCreateDatabaseRaw(::grpc::ClientContext* context, const ::ric::store::CreateDatabaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::EmptyRespone>* PrepareAsyncCreateDatabaseRaw(::grpc::ClientContext* context, const ::ric::store::CreateDatabaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::EmptyRespone>* AsyncRemoveDatabaseRaw(::grpc::ClientContext* context, const ::ric::store::RemoveDatabaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::store::EmptyRespone>* PrepareAsyncRemoveDatabaseRaw(::grpc::ClientContext* context, const ::ric::store::RemoveDatabaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientWriter< ::ric::store::Packet>> Insert(::grpc::ClientContext* context, ::ric::store::EmptyRespone* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::ric::store::Packet>>(InsertRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::ric::store::Packet>> AsyncInsert(::grpc::ClientContext* context, ::ric::store::EmptyRespone* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::ric::store::Packet>>(AsyncInsertRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::ric::store::Packet>> PrepareAsyncInsert(::grpc::ClientContext* context, ::ric::store::EmptyRespone* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::ric::store::Packet>>(PrepareAsyncInsertRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::ric::store::Packet>> Query(::grpc::ClientContext* context, const ::ric::store::QueryRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::ric::store::Packet>>(QueryRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ric::store::Packet>> AsyncQuery(::grpc::ClientContext* context, const ::ric::store::QueryRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ric::store::Packet>>(AsyncQueryRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ric::store::Packet>> PrepareAsyncQuery(::grpc::ClientContext* context, const ::ric::store::QueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ric::store::Packet>>(PrepareAsyncQueryRaw(context, request, cq));
    }
    ::grpc::Status Status(::grpc::ClientContext* context, const ::ric::store::StatusRequest& request, ::ric::store::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::store::StatusResponse>> AsyncStatus(::grpc::ClientContext* context, const ::ric::store::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::store::StatusResponse>>(AsyncStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::store::StatusResponse>> PrepareAsyncStatus(::grpc::ClientContext* context, const ::ric::store::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::store::StatusResponse>>(PrepareAsyncStatusRaw(context, request, cq));
    }
    ::grpc::Status CreateCollection(::grpc::ClientContext* context, const ::ric::store::CreateCollectionRequest& request, ::ric::store::EmptyRespone* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>> AsyncCreateCollection(::grpc::ClientContext* context, const ::ric::store::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>>(AsyncCreateCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>> PrepareAsyncCreateCollection(::grpc::ClientContext* context, const ::ric::store::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>>(PrepareAsyncCreateCollectionRaw(context, request, cq));
    }
    ::grpc::Status RemoveCollection(::grpc::ClientContext* context, const ::ric::store::RemoveCollectionRequest& request, ::ric::store::EmptyRespone* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>> AsyncRemoveCollection(::grpc::ClientContext* context, const ::ric::store::RemoveCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>>(AsyncRemoveCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>> PrepareAsyncRemoveCollection(::grpc::ClientContext* context, const ::ric::store::RemoveCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>>(PrepareAsyncRemoveCollectionRaw(context, request, cq));
    }
    ::grpc::Status CreateDatabase(::grpc::ClientContext* context, const ::ric::store::CreateDatabaseRequest& request, ::ric::store::EmptyRespone* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>> AsyncCreateDatabase(::grpc::ClientContext* context, const ::ric::store::CreateDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>>(AsyncCreateDatabaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>> PrepareAsyncCreateDatabase(::grpc::ClientContext* context, const ::ric::store::CreateDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>>(PrepareAsyncCreateDatabaseRaw(context, request, cq));
    }
    ::grpc::Status RemoveDatabase(::grpc::ClientContext* context, const ::ric::store::RemoveDatabaseRequest& request, ::ric::store::EmptyRespone* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>> AsyncRemoveDatabase(::grpc::ClientContext* context, const ::ric::store::RemoveDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>>(AsyncRemoveDatabaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>> PrepareAsyncRemoveDatabase(::grpc::ClientContext* context, const ::ric::store::RemoveDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>>(PrepareAsyncRemoveDatabaseRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Insert(::grpc::ClientContext* context, ::ric::store::EmptyRespone* response, ::grpc::experimental::ClientWriteReactor< ::ric::store::Packet>* reactor) override;
      void Query(::grpc::ClientContext* context, ::ric::store::QueryRequest* request, ::grpc::experimental::ClientReadReactor< ::ric::store::Packet>* reactor) override;
      void Status(::grpc::ClientContext* context, const ::ric::store::StatusRequest* request, ::ric::store::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void Status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::store::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateCollection(::grpc::ClientContext* context, const ::ric::store::CreateCollectionRequest* request, ::ric::store::EmptyRespone* response, std::function<void(::grpc::Status)>) override;
      void CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::store::EmptyRespone* response, std::function<void(::grpc::Status)>) override;
      void RemoveCollection(::grpc::ClientContext* context, const ::ric::store::RemoveCollectionRequest* request, ::ric::store::EmptyRespone* response, std::function<void(::grpc::Status)>) override;
      void RemoveCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::store::EmptyRespone* response, std::function<void(::grpc::Status)>) override;
      void CreateDatabase(::grpc::ClientContext* context, const ::ric::store::CreateDatabaseRequest* request, ::ric::store::EmptyRespone* response, std::function<void(::grpc::Status)>) override;
      void CreateDatabase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::store::EmptyRespone* response, std::function<void(::grpc::Status)>) override;
      void RemoveDatabase(::grpc::ClientContext* context, const ::ric::store::RemoveDatabaseRequest* request, ::ric::store::EmptyRespone* response, std::function<void(::grpc::Status)>) override;
      void RemoveDatabase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::store::EmptyRespone* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientWriter< ::ric::store::Packet>* InsertRaw(::grpc::ClientContext* context, ::ric::store::EmptyRespone* response) override;
    ::grpc::ClientAsyncWriter< ::ric::store::Packet>* AsyncInsertRaw(::grpc::ClientContext* context, ::ric::store::EmptyRespone* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::ric::store::Packet>* PrepareAsyncInsertRaw(::grpc::ClientContext* context, ::ric::store::EmptyRespone* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::ric::store::Packet>* QueryRaw(::grpc::ClientContext* context, const ::ric::store::QueryRequest& request) override;
    ::grpc::ClientAsyncReader< ::ric::store::Packet>* AsyncQueryRaw(::grpc::ClientContext* context, const ::ric::store::QueryRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::ric::store::Packet>* PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::ric::store::QueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::store::StatusResponse>* AsyncStatusRaw(::grpc::ClientContext* context, const ::ric::store::StatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::store::StatusResponse>* PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::ric::store::StatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>* AsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::ric::store::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>* PrepareAsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::ric::store::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>* AsyncRemoveCollectionRaw(::grpc::ClientContext* context, const ::ric::store::RemoveCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>* PrepareAsyncRemoveCollectionRaw(::grpc::ClientContext* context, const ::ric::store::RemoveCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>* AsyncCreateDatabaseRaw(::grpc::ClientContext* context, const ::ric::store::CreateDatabaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>* PrepareAsyncCreateDatabaseRaw(::grpc::ClientContext* context, const ::ric::store::CreateDatabaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>* AsyncRemoveDatabaseRaw(::grpc::ClientContext* context, const ::ric::store::RemoveDatabaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>* PrepareAsyncRemoveDatabaseRaw(::grpc::ClientContext* context, const ::ric::store::RemoveDatabaseRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Insert_;
    const ::grpc::internal::RpcMethod rpcmethod_Query_;
    const ::grpc::internal::RpcMethod rpcmethod_Status_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCollection_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveCollection_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateDatabase_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveDatabase_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Insert(::grpc::ServerContext* context, ::grpc::ServerReader< ::ric::store::Packet>* reader, ::ric::store::EmptyRespone* response);
    virtual ::grpc::Status Query(::grpc::ServerContext* context, const ::ric::store::QueryRequest* request, ::grpc::ServerWriter< ::ric::store::Packet>* writer);
    virtual ::grpc::Status Status(::grpc::ServerContext* context, const ::ric::store::StatusRequest* request, ::ric::store::StatusResponse* response);
    virtual ::grpc::Status CreateCollection(::grpc::ServerContext* context, const ::ric::store::CreateCollectionRequest* request, ::ric::store::EmptyRespone* response);
    virtual ::grpc::Status RemoveCollection(::grpc::ServerContext* context, const ::ric::store::RemoveCollectionRequest* request, ::ric::store::EmptyRespone* response);
    virtual ::grpc::Status CreateDatabase(::grpc::ServerContext* context, const ::ric::store::CreateDatabaseRequest* request, ::ric::store::EmptyRespone* response);
    virtual ::grpc::Status RemoveDatabase(::grpc::ServerContext* context, const ::ric::store::RemoveDatabaseRequest* request, ::ric::store::EmptyRespone* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Insert() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insert(::grpc::ServerContext* context, ::grpc::ServerReader< ::ric::store::Packet>* reader, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsert(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::ric::store::EmptyRespone, ::ric::store::Packet>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Query() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* context, const ::ric::store::QueryRequest* request, ::grpc::ServerWriter< ::ric::store::Packet>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuery(::grpc::ServerContext* context, ::ric::store::QueryRequest* request, ::grpc::ServerAsyncWriter< ::ric::store::Packet>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Status() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* context, const ::ric::store::StatusRequest* request, ::ric::store::StatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::ric::store::StatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::store::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateCollection() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CreateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCollection(::grpc::ServerContext* context, const ::ric::store::CreateCollectionRequest* request, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCollection(::grpc::ServerContext* context, ::ric::store::CreateCollectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::store::EmptyRespone>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RemoveCollection() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RemoveCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveCollection(::grpc::ServerContext* context, const ::ric::store::RemoveCollectionRequest* request, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveCollection(::grpc::ServerContext* context, ::ric::store::RemoveCollectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::store::EmptyRespone>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateDatabase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateDatabase() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CreateDatabase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDatabase(::grpc::ServerContext* context, const ::ric::store::CreateDatabaseRequest* request, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDatabase(::grpc::ServerContext* context, ::ric::store::CreateDatabaseRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::store::EmptyRespone>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveDatabase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RemoveDatabase() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_RemoveDatabase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveDatabase(::grpc::ServerContext* context, const ::ric::store::RemoveDatabaseRequest* request, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveDatabase(::grpc::ServerContext* context, ::ric::store::RemoveDatabaseRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::store::EmptyRespone>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Insert<WithAsyncMethod_Query<WithAsyncMethod_Status<WithAsyncMethod_CreateCollection<WithAsyncMethod_RemoveCollection<WithAsyncMethod_CreateDatabase<WithAsyncMethod_RemoveDatabase<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Insert() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackClientStreamingHandler< ::ric::store::Packet, ::ric::store::EmptyRespone>(
          [this] { return this->Insert(); }));
    }
    ~ExperimentalWithCallbackMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insert(::grpc::ServerContext* context, ::grpc::ServerReader< ::ric::store::Packet>* reader, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::ric::store::Packet, ::ric::store::EmptyRespone>* Insert() {
      return new ::grpc::internal::UnimplementedReadReactor<
        ::ric::store::Packet, ::ric::store::EmptyRespone>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Query() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackServerStreamingHandler< ::ric::store::QueryRequest, ::ric::store::Packet>(
          [this] { return this->Query(); }));
    }
    ~ExperimentalWithCallbackMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* context, const ::ric::store::QueryRequest* request, ::grpc::ServerWriter< ::ric::store::Packet>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::ric::store::QueryRequest, ::ric::store::Packet>* Query() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::ric::store::QueryRequest, ::ric::store::Packet>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Status() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::store::StatusRequest, ::ric::store::StatusResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::store::StatusRequest* request,
                 ::ric::store::StatusResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Status(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* context, const ::ric::store::StatusRequest* request, ::ric::store::StatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Status(::grpc::ServerContext* context, const ::ric::store::StatusRequest* request, ::ric::store::StatusResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CreateCollection() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::store::CreateCollectionRequest, ::ric::store::EmptyRespone>(
          [this](::grpc::ServerContext* context,
                 const ::ric::store::CreateCollectionRequest* request,
                 ::ric::store::EmptyRespone* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateCollection(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_CreateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCollection(::grpc::ServerContext* context, const ::ric::store::CreateCollectionRequest* request, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateCollection(::grpc::ServerContext* context, const ::ric::store::CreateCollectionRequest* request, ::ric::store::EmptyRespone* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_RemoveCollection() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::store::RemoveCollectionRequest, ::ric::store::EmptyRespone>(
          [this](::grpc::ServerContext* context,
                 const ::ric::store::RemoveCollectionRequest* request,
                 ::ric::store::EmptyRespone* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RemoveCollection(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_RemoveCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveCollection(::grpc::ServerContext* context, const ::ric::store::RemoveCollectionRequest* request, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RemoveCollection(::grpc::ServerContext* context, const ::ric::store::RemoveCollectionRequest* request, ::ric::store::EmptyRespone* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateDatabase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CreateDatabase() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::store::CreateDatabaseRequest, ::ric::store::EmptyRespone>(
          [this](::grpc::ServerContext* context,
                 const ::ric::store::CreateDatabaseRequest* request,
                 ::ric::store::EmptyRespone* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateDatabase(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_CreateDatabase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDatabase(::grpc::ServerContext* context, const ::ric::store::CreateDatabaseRequest* request, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateDatabase(::grpc::ServerContext* context, const ::ric::store::CreateDatabaseRequest* request, ::ric::store::EmptyRespone* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveDatabase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_RemoveDatabase() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::store::RemoveDatabaseRequest, ::ric::store::EmptyRespone>(
          [this](::grpc::ServerContext* context,
                 const ::ric::store::RemoveDatabaseRequest* request,
                 ::ric::store::EmptyRespone* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RemoveDatabase(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_RemoveDatabase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveDatabase(::grpc::ServerContext* context, const ::ric::store::RemoveDatabaseRequest* request, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RemoveDatabase(::grpc::ServerContext* context, const ::ric::store::RemoveDatabaseRequest* request, ::ric::store::EmptyRespone* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Insert<ExperimentalWithCallbackMethod_Query<ExperimentalWithCallbackMethod_Status<ExperimentalWithCallbackMethod_CreateCollection<ExperimentalWithCallbackMethod_RemoveCollection<ExperimentalWithCallbackMethod_CreateDatabase<ExperimentalWithCallbackMethod_RemoveDatabase<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Insert() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insert(::grpc::ServerContext* context, ::grpc::ServerReader< ::ric::store::Packet>* reader, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Query() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* context, const ::ric::store::QueryRequest* request, ::grpc::ServerWriter< ::ric::store::Packet>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Status() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* context, const ::ric::store::StatusRequest* request, ::ric::store::StatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateCollection() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CreateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCollection(::grpc::ServerContext* context, const ::ric::store::CreateCollectionRequest* request, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RemoveCollection() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RemoveCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveCollection(::grpc::ServerContext* context, const ::ric::store::RemoveCollectionRequest* request, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateDatabase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateDatabase() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CreateDatabase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDatabase(::grpc::ServerContext* context, const ::ric::store::CreateDatabaseRequest* request, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveDatabase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RemoveDatabase() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_RemoveDatabase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveDatabase(::grpc::ServerContext* context, const ::ric::store::RemoveDatabaseRequest* request, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Insert() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insert(::grpc::ServerContext* context, ::grpc::ServerReader< ::ric::store::Packet>* reader, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsert(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Query() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* context, const ::ric::store::QueryRequest* request, ::grpc::ServerWriter< ::ric::store::Packet>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Status() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* context, const ::ric::store::StatusRequest* request, ::ric::store::StatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateCollection() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CreateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCollection(::grpc::ServerContext* context, const ::ric::store::CreateCollectionRequest* request, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCollection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RemoveCollection() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RemoveCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveCollection(::grpc::ServerContext* context, const ::ric::store::RemoveCollectionRequest* request, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveCollection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateDatabase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateDatabase() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CreateDatabase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDatabase(::grpc::ServerContext* context, const ::ric::store::CreateDatabaseRequest* request, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDatabase(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveDatabase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RemoveDatabase() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_RemoveDatabase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveDatabase(::grpc::ServerContext* context, const ::ric::store::RemoveDatabaseRequest* request, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveDatabase(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Insert() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Insert(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insert(::grpc::ServerContext* context, ::grpc::ServerReader< ::ric::store::Packet>* reader, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Insert() {
      return new ::grpc::internal::UnimplementedReadReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Query() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Query(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* context, const ::ric::store::QueryRequest* request, ::grpc::ServerWriter< ::ric::store::Packet>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Query() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Status() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Status(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* context, const ::ric::store::StatusRequest* request, ::ric::store::StatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Status(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateCollection() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateCollection(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCollection(::grpc::ServerContext* context, const ::ric::store::CreateCollectionRequest* request, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateCollection(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveCollection() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RemoveCollection(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveCollection(::grpc::ServerContext* context, const ::ric::store::RemoveCollectionRequest* request, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RemoveCollection(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateDatabase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateDatabase() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateDatabase(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateDatabase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDatabase(::grpc::ServerContext* context, const ::ric::store::CreateDatabaseRequest* request, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateDatabase(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveDatabase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveDatabase() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RemoveDatabase(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveDatabase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveDatabase(::grpc::ServerContext* context, const ::ric::store::RemoveDatabaseRequest* request, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RemoveDatabase(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Status() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::store::StatusRequest, ::ric::store::StatusResponse>(std::bind(&WithStreamedUnaryMethod_Status<BaseClass>::StreamedStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Status(::grpc::ServerContext* context, const ::ric::store::StatusRequest* request, ::ric::store::StatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::store::StatusRequest,::ric::store::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateCollection() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::store::CreateCollectionRequest, ::ric::store::EmptyRespone>(std::bind(&WithStreamedUnaryMethod_CreateCollection<BaseClass>::StreamedCreateCollection, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCollection(::grpc::ServerContext* context, const ::ric::store::CreateCollectionRequest* request, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCollection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::store::CreateCollectionRequest,::ric::store::EmptyRespone>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RemoveCollection() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::store::RemoveCollectionRequest, ::ric::store::EmptyRespone>(std::bind(&WithStreamedUnaryMethod_RemoveCollection<BaseClass>::StreamedRemoveCollection, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RemoveCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveCollection(::grpc::ServerContext* context, const ::ric::store::RemoveCollectionRequest* request, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveCollection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::store::RemoveCollectionRequest,::ric::store::EmptyRespone>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateDatabase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateDatabase() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::store::CreateDatabaseRequest, ::ric::store::EmptyRespone>(std::bind(&WithStreamedUnaryMethod_CreateDatabase<BaseClass>::StreamedCreateDatabase, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateDatabase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateDatabase(::grpc::ServerContext* context, const ::ric::store::CreateDatabaseRequest* request, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateDatabase(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::store::CreateDatabaseRequest,::ric::store::EmptyRespone>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveDatabase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RemoveDatabase() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::store::RemoveDatabaseRequest, ::ric::store::EmptyRespone>(std::bind(&WithStreamedUnaryMethod_RemoveDatabase<BaseClass>::StreamedRemoveDatabase, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RemoveDatabase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveDatabase(::grpc::ServerContext* context, const ::ric::store::RemoveDatabaseRequest* request, ::ric::store::EmptyRespone* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveDatabase(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::store::RemoveDatabaseRequest,::ric::store::EmptyRespone>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Status<WithStreamedUnaryMethod_CreateCollection<WithStreamedUnaryMethod_RemoveCollection<WithStreamedUnaryMethod_CreateDatabase<WithStreamedUnaryMethod_RemoveDatabase<Service > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_Query() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::ric::store::QueryRequest, ::ric::store::Packet>(std::bind(&WithSplitStreamingMethod_Query<BaseClass>::StreamedQuery, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Query(::grpc::ServerContext* context, const ::ric::store::QueryRequest* request, ::grpc::ServerWriter< ::ric::store::Packet>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedQuery(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::ric::store::QueryRequest,::ric::store::Packet>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Query<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Query<WithStreamedUnaryMethod_Status<WithStreamedUnaryMethod_CreateCollection<WithStreamedUnaryMethod_RemoveCollection<WithStreamedUnaryMethod_CreateDatabase<WithStreamedUnaryMethod_RemoveDatabase<Service > > > > > > StreamedService;
};

}  // namespace store
}  // namespace ric


#endif  // GRPC_ric_2dstore_2fricstore_2eproto__INCLUDED
