// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ric-store/ricstore.proto

#include "ric-store/ricstore.pb.h"
#include "ric-store/ricstore.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ric {
namespace store {

static const char* RicStore_method_names[] = {
  "/ric.store.RicStore/Insert",
  "/ric.store.RicStore/Query",
  "/ric.store.RicStore/Status",
  "/ric.store.RicStore/CreateCollection",
  "/ric.store.RicStore/RemoveCollection",
  "/ric.store.RicStore/CreateDatabase",
  "/ric.store.RicStore/RemoveDatabase",
};

std::unique_ptr< RicStore::Stub> RicStore::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RicStore::Stub> stub(new RicStore::Stub(channel));
  return stub;
}

RicStore::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Insert_(RicStore_method_names[0], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_Query_(RicStore_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Status_(RicStore_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCollection_(RicStore_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveCollection_(RicStore_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateDatabase_(RicStore_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveDatabase_(RicStore_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientWriter< ::ric::store::Packet>* RicStore::Stub::InsertRaw(::grpc::ClientContext* context, ::ric::store::EmptyRespone* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::ric::store::Packet>::Create(channel_.get(), rpcmethod_Insert_, context, response);
}

void RicStore::Stub::experimental_async::Insert(::grpc::ClientContext* context, ::ric::store::EmptyRespone* response, ::grpc::experimental::ClientWriteReactor< ::ric::store::Packet>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::ric::store::Packet>::Create(stub_->channel_.get(), stub_->rpcmethod_Insert_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::ric::store::Packet>* RicStore::Stub::AsyncInsertRaw(::grpc::ClientContext* context, ::ric::store::EmptyRespone* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::ric::store::Packet>::Create(channel_.get(), cq, rpcmethod_Insert_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::ric::store::Packet>* RicStore::Stub::PrepareAsyncInsertRaw(::grpc::ClientContext* context, ::ric::store::EmptyRespone* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::ric::store::Packet>::Create(channel_.get(), cq, rpcmethod_Insert_, context, response, false, nullptr);
}

::grpc::ClientReader< ::ric::store::Packet>* RicStore::Stub::QueryRaw(::grpc::ClientContext* context, const ::ric::store::QueryRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::ric::store::Packet>::Create(channel_.get(), rpcmethod_Query_, context, request);
}

void RicStore::Stub::experimental_async::Query(::grpc::ClientContext* context, ::ric::store::QueryRequest* request, ::grpc::experimental::ClientReadReactor< ::ric::store::Packet>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::ric::store::Packet>::Create(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ric::store::Packet>* RicStore::Stub::AsyncQueryRaw(::grpc::ClientContext* context, const ::ric::store::QueryRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::ric::store::Packet>::Create(channel_.get(), cq, rpcmethod_Query_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ric::store::Packet>* RicStore::Stub::PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::ric::store::QueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::ric::store::Packet>::Create(channel_.get(), cq, rpcmethod_Query_, context, request, false, nullptr);
}

::grpc::Status RicStore::Stub::Status(::grpc::ClientContext* context, const ::ric::store::StatusRequest& request, ::ric::store::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Status_, context, request, response);
}

void RicStore::Stub::experimental_async::Status(::grpc::ClientContext* context, const ::ric::store::StatusRequest* request, ::ric::store::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, std::move(f));
}

void RicStore::Stub::experimental_async::Status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::store::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, std::move(f));
}

void RicStore::Stub::experimental_async::Status(::grpc::ClientContext* context, const ::ric::store::StatusRequest* request, ::ric::store::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, reactor);
}

void RicStore::Stub::experimental_async::Status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::store::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ric::store::StatusResponse>* RicStore::Stub::AsyncStatusRaw(::grpc::ClientContext* context, const ::ric::store::StatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::store::StatusResponse>::Create(channel_.get(), cq, rpcmethod_Status_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::store::StatusResponse>* RicStore::Stub::PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::ric::store::StatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::store::StatusResponse>::Create(channel_.get(), cq, rpcmethod_Status_, context, request, false);
}

::grpc::Status RicStore::Stub::CreateCollection(::grpc::ClientContext* context, const ::ric::store::CreateCollectionRequest& request, ::ric::store::EmptyRespone* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateCollection_, context, request, response);
}

void RicStore::Stub::experimental_async::CreateCollection(::grpc::ClientContext* context, const ::ric::store::CreateCollectionRequest* request, ::ric::store::EmptyRespone* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateCollection_, context, request, response, std::move(f));
}

void RicStore::Stub::experimental_async::CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::store::EmptyRespone* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateCollection_, context, request, response, std::move(f));
}

void RicStore::Stub::experimental_async::CreateCollection(::grpc::ClientContext* context, const ::ric::store::CreateCollectionRequest* request, ::ric::store::EmptyRespone* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateCollection_, context, request, response, reactor);
}

void RicStore::Stub::experimental_async::CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::store::EmptyRespone* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>* RicStore::Stub::AsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::ric::store::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::store::EmptyRespone>::Create(channel_.get(), cq, rpcmethod_CreateCollection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>* RicStore::Stub::PrepareAsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::ric::store::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::store::EmptyRespone>::Create(channel_.get(), cq, rpcmethod_CreateCollection_, context, request, false);
}

::grpc::Status RicStore::Stub::RemoveCollection(::grpc::ClientContext* context, const ::ric::store::RemoveCollectionRequest& request, ::ric::store::EmptyRespone* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveCollection_, context, request, response);
}

void RicStore::Stub::experimental_async::RemoveCollection(::grpc::ClientContext* context, const ::ric::store::RemoveCollectionRequest* request, ::ric::store::EmptyRespone* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveCollection_, context, request, response, std::move(f));
}

void RicStore::Stub::experimental_async::RemoveCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::store::EmptyRespone* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveCollection_, context, request, response, std::move(f));
}

void RicStore::Stub::experimental_async::RemoveCollection(::grpc::ClientContext* context, const ::ric::store::RemoveCollectionRequest* request, ::ric::store::EmptyRespone* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveCollection_, context, request, response, reactor);
}

void RicStore::Stub::experimental_async::RemoveCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::store::EmptyRespone* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>* RicStore::Stub::AsyncRemoveCollectionRaw(::grpc::ClientContext* context, const ::ric::store::RemoveCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::store::EmptyRespone>::Create(channel_.get(), cq, rpcmethod_RemoveCollection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>* RicStore::Stub::PrepareAsyncRemoveCollectionRaw(::grpc::ClientContext* context, const ::ric::store::RemoveCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::store::EmptyRespone>::Create(channel_.get(), cq, rpcmethod_RemoveCollection_, context, request, false);
}

::grpc::Status RicStore::Stub::CreateDatabase(::grpc::ClientContext* context, const ::ric::store::CreateDatabaseRequest& request, ::ric::store::EmptyRespone* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateDatabase_, context, request, response);
}

void RicStore::Stub::experimental_async::CreateDatabase(::grpc::ClientContext* context, const ::ric::store::CreateDatabaseRequest* request, ::ric::store::EmptyRespone* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateDatabase_, context, request, response, std::move(f));
}

void RicStore::Stub::experimental_async::CreateDatabase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::store::EmptyRespone* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateDatabase_, context, request, response, std::move(f));
}

void RicStore::Stub::experimental_async::CreateDatabase(::grpc::ClientContext* context, const ::ric::store::CreateDatabaseRequest* request, ::ric::store::EmptyRespone* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateDatabase_, context, request, response, reactor);
}

void RicStore::Stub::experimental_async::CreateDatabase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::store::EmptyRespone* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateDatabase_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>* RicStore::Stub::AsyncCreateDatabaseRaw(::grpc::ClientContext* context, const ::ric::store::CreateDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::store::EmptyRespone>::Create(channel_.get(), cq, rpcmethod_CreateDatabase_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>* RicStore::Stub::PrepareAsyncCreateDatabaseRaw(::grpc::ClientContext* context, const ::ric::store::CreateDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::store::EmptyRespone>::Create(channel_.get(), cq, rpcmethod_CreateDatabase_, context, request, false);
}

::grpc::Status RicStore::Stub::RemoveDatabase(::grpc::ClientContext* context, const ::ric::store::RemoveDatabaseRequest& request, ::ric::store::EmptyRespone* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveDatabase_, context, request, response);
}

void RicStore::Stub::experimental_async::RemoveDatabase(::grpc::ClientContext* context, const ::ric::store::RemoveDatabaseRequest* request, ::ric::store::EmptyRespone* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveDatabase_, context, request, response, std::move(f));
}

void RicStore::Stub::experimental_async::RemoveDatabase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::store::EmptyRespone* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveDatabase_, context, request, response, std::move(f));
}

void RicStore::Stub::experimental_async::RemoveDatabase(::grpc::ClientContext* context, const ::ric::store::RemoveDatabaseRequest* request, ::ric::store::EmptyRespone* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveDatabase_, context, request, response, reactor);
}

void RicStore::Stub::experimental_async::RemoveDatabase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::store::EmptyRespone* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveDatabase_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>* RicStore::Stub::AsyncRemoveDatabaseRaw(::grpc::ClientContext* context, const ::ric::store::RemoveDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::store::EmptyRespone>::Create(channel_.get(), cq, rpcmethod_RemoveDatabase_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::store::EmptyRespone>* RicStore::Stub::PrepareAsyncRemoveDatabaseRaw(::grpc::ClientContext* context, const ::ric::store::RemoveDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ric::store::EmptyRespone>::Create(channel_.get(), cq, rpcmethod_RemoveDatabase_, context, request, false);
}

RicStore::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RicStore_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< RicStore::Service, ::ric::store::Packet, ::ric::store::EmptyRespone>(
          std::mem_fn(&RicStore::Service::Insert), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RicStore_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RicStore::Service, ::ric::store::QueryRequest, ::ric::store::Packet>(
          std::mem_fn(&RicStore::Service::Query), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RicStore_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RicStore::Service, ::ric::store::StatusRequest, ::ric::store::StatusResponse>(
          std::mem_fn(&RicStore::Service::Status), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RicStore_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RicStore::Service, ::ric::store::CreateCollectionRequest, ::ric::store::EmptyRespone>(
          std::mem_fn(&RicStore::Service::CreateCollection), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RicStore_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RicStore::Service, ::ric::store::RemoveCollectionRequest, ::ric::store::EmptyRespone>(
          std::mem_fn(&RicStore::Service::RemoveCollection), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RicStore_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RicStore::Service, ::ric::store::CreateDatabaseRequest, ::ric::store::EmptyRespone>(
          std::mem_fn(&RicStore::Service::CreateDatabase), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RicStore_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RicStore::Service, ::ric::store::RemoveDatabaseRequest, ::ric::store::EmptyRespone>(
          std::mem_fn(&RicStore::Service::RemoveDatabase), this)));
}

RicStore::Service::~Service() {
}

::grpc::Status RicStore::Service::Insert(::grpc::ServerContext* context, ::grpc::ServerReader< ::ric::store::Packet>* reader, ::ric::store::EmptyRespone* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RicStore::Service::Query(::grpc::ServerContext* context, const ::ric::store::QueryRequest* request, ::grpc::ServerWriter< ::ric::store::Packet>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RicStore::Service::Status(::grpc::ServerContext* context, const ::ric::store::StatusRequest* request, ::ric::store::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RicStore::Service::CreateCollection(::grpc::ServerContext* context, const ::ric::store::CreateCollectionRequest* request, ::ric::store::EmptyRespone* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RicStore::Service::RemoveCollection(::grpc::ServerContext* context, const ::ric::store::RemoveCollectionRequest* request, ::ric::store::EmptyRespone* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RicStore::Service::CreateDatabase(::grpc::ServerContext* context, const ::ric::store::CreateDatabaseRequest* request, ::ric::store::EmptyRespone* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RicStore::Service::RemoveDatabase(::grpc::ServerContext* context, const ::ric::store::RemoveDatabaseRequest* request, ::ric::store::EmptyRespone* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ric
}  // namespace store

