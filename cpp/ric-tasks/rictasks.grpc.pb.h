// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ric-tasks/rictasks.proto
#ifndef GRPC_ric_2dtasks_2frictasks_2eproto__INCLUDED
#define GRPC_ric_2dtasks_2frictasks_2eproto__INCLUDED

#include "ric-tasks/rictasks.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace ric {
namespace tasks {

class Tasks final {
 public:
  static constexpr char const* service_full_name() {
    return "ric.tasks.Tasks";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::ric::tasks::CreateRequest& request, ::ric::tasks::CreateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::CreateResponse>> AsyncCreate(::grpc::ClientContext* context, const ::ric::tasks::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::CreateResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::CreateResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::ric::tasks::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::CreateResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    // get master task by it's id or by some subtask id
    // this request always return full master task
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::ric::tasks::GetRequest& request, ::ric::tasks::GetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::GetResponse>> AsyncGet(::grpc::ClientContext* context, const ::ric::tasks::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::GetResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::GetResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::ric::tasks::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::GetResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    // this method can update master task and subtasks information
    // this method can't update (return error):
    // 1. subtasks status (use ChangeStatus)
    // 2. subtasks deadlines if status not equal to CREATED or ASSIGNED
    // 3. subtasks order (use UpdateOrder)
    // 4. begin and end location if status not equal to CREATED or ASSIGNED
    //
    // new subtasks can be added but they always append to end of subtasks list
    // use UpdateOrder after this if you need add subtask to specific position
    //
    // to update subtask -> TaskId should be present in request
    // if no TaskId then subtask treated as new
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::ric::tasks::UpdateRequest& request, ::ric::tasks::UpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::ric::tasks::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::ric::tasks::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    // this method can delete master task or specific subtask
    // if it is a last subtask then master task also will be deleted
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::ric::tasks::DeleteRequest& request, ::ric::tasks::DeleteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::DeleteResponse>> AsyncDelete(::grpc::ClientContext* context, const ::ric::tasks::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::DeleteResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::DeleteResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::ric::tasks::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::DeleteResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    // update subtasks order
    // order can be updated only if following true:
    // 1. all subtasks has status CREATED or ASSIGNED
    // 2. all subtasks has no deadlines
    //    (if subtask have deadline you can unset it via Update method)
    virtual ::grpc::Status UpdateOrder(::grpc::ClientContext* context, const ::ric::tasks::UpdateOrderRequest& request, ::ric::tasks::UpdateOrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateOrderResponse>> AsyncUpdateOrder(::grpc::ClientContext* context, const ::ric::tasks::UpdateOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateOrderResponse>>(AsyncUpdateOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateOrderResponse>> PrepareAsyncUpdateOrder(::grpc::ClientContext* context, const ::ric::tasks::UpdateOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateOrderResponse>>(PrepareAsyncUpdateOrderRaw(context, request, cq));
    }
    // change subtask status
    // this method checks master task constrain before change status
    // so if constraint ordered you can't take in work subtask if previous subtask not closed
    //
    // the following status change is allowed:
    // CREATED -> ASSIGNED
    // ASSIGNED -> IN_WORK
    // IN_WORK -> CLOSED (with success flag)
    // CLOSED -> CREATED
    // ASSIGNED -> CREATED
    // ASSIGNED -> CLOSED (method always set success flag to false)
    // CREATED -> CLOSED (method always set success flag to false)
    //
    // if subtask has begin location -> change status to IN_WORK can be done only
    // in this location
    //
    // if subtask has end location -> change status to CLOSED can be done only
    // in this location
    virtual ::grpc::Status ChangeStatus(::grpc::ClientContext* context, const ::ric::tasks::ChangeStatusRequest& request, ::ric::tasks::ChangeStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::ChangeStatusResponse>> AsyncChangeStatus(::grpc::ClientContext* context, const ::ric::tasks::ChangeStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::ChangeStatusResponse>>(AsyncChangeStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::ChangeStatusResponse>> PrepareAsyncChangeStatus(::grpc::ClientContext* context, const ::ric::tasks::ChangeStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::ChangeStatusResponse>>(PrepareAsyncChangeStatusRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Create(::grpc::ClientContext* context, const ::ric::tasks::CreateRequest* request, ::ric::tasks::CreateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::CreateResponse* response, std::function<void(::grpc::Status)>) = 0;
      // get master task by it's id or by some subtask id
      // this request always return full master task
      virtual void Get(::grpc::ClientContext* context, const ::ric::tasks::GetRequest* request, ::ric::tasks::GetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::GetResponse* response, std::function<void(::grpc::Status)>) = 0;
      // this method can update master task and subtasks information
      // this method can't update (return error):
      // 1. subtasks status (use ChangeStatus)
      // 2. subtasks deadlines if status not equal to CREATED or ASSIGNED
      // 3. subtasks order (use UpdateOrder)
      // 4. begin and end location if status not equal to CREATED or ASSIGNED
      //
      // new subtasks can be added but they always append to end of subtasks list
      // use UpdateOrder after this if you need add subtask to specific position
      //
      // to update subtask -> TaskId should be present in request
      // if no TaskId then subtask treated as new
      virtual void Update(::grpc::ClientContext* context, const ::ric::tasks::UpdateRequest* request, ::ric::tasks::UpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::UpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      // this method can delete master task or specific subtask
      // if it is a last subtask then master task also will be deleted
      virtual void Delete(::grpc::ClientContext* context, const ::ric::tasks::DeleteRequest* request, ::ric::tasks::DeleteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::DeleteResponse* response, std::function<void(::grpc::Status)>) = 0;
      // update subtasks order
      // order can be updated only if following true:
      // 1. all subtasks has status CREATED or ASSIGNED
      // 2. all subtasks has no deadlines
      //    (if subtask have deadline you can unset it via Update method)
      virtual void UpdateOrder(::grpc::ClientContext* context, const ::ric::tasks::UpdateOrderRequest* request, ::ric::tasks::UpdateOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::UpdateOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      // change subtask status
      // this method checks master task constrain before change status
      // so if constraint ordered you can't take in work subtask if previous subtask not closed
      //
      // the following status change is allowed:
      // CREATED -> ASSIGNED
      // ASSIGNED -> IN_WORK
      // IN_WORK -> CLOSED (with success flag)
      // CLOSED -> CREATED
      // ASSIGNED -> CREATED
      // ASSIGNED -> CLOSED (method always set success flag to false)
      // CREATED -> CLOSED (method always set success flag to false)
      //
      // if subtask has begin location -> change status to IN_WORK can be done only
      // in this location
      //
      // if subtask has end location -> change status to CLOSED can be done only
      // in this location
      virtual void ChangeStatus(::grpc::ClientContext* context, const ::ric::tasks::ChangeStatusRequest* request, ::ric::tasks::ChangeStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ChangeStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::ChangeStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::CreateResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::ric::tasks::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::CreateResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::ric::tasks::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::GetResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::ric::tasks::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::GetResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::ric::tasks::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::DeleteResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::ric::tasks::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::DeleteResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::ric::tasks::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateOrderResponse>* AsyncUpdateOrderRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateOrderResponse>* PrepareAsyncUpdateOrderRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::ChangeStatusResponse>* AsyncChangeStatusRaw(::grpc::ClientContext* context, const ::ric::tasks::ChangeStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::ChangeStatusResponse>* PrepareAsyncChangeStatusRaw(::grpc::ClientContext* context, const ::ric::tasks::ChangeStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Create(::grpc::ClientContext* context, const ::ric::tasks::CreateRequest& request, ::ric::tasks::CreateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::CreateResponse>> AsyncCreate(::grpc::ClientContext* context, const ::ric::tasks::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::CreateResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::CreateResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::ric::tasks::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::CreateResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    ::grpc::Status Get(::grpc::ClientContext* context, const ::ric::tasks::GetRequest& request, ::ric::tasks::GetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::GetResponse>> AsyncGet(::grpc::ClientContext* context, const ::ric::tasks::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::GetResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::GetResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::ric::tasks::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::GetResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::ric::tasks::UpdateRequest& request, ::ric::tasks::UpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::ric::tasks::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::ric::tasks::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::ric::tasks::DeleteRequest& request, ::ric::tasks::DeleteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::DeleteResponse>> AsyncDelete(::grpc::ClientContext* context, const ::ric::tasks::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::DeleteResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::DeleteResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::ric::tasks::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::DeleteResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    ::grpc::Status UpdateOrder(::grpc::ClientContext* context, const ::ric::tasks::UpdateOrderRequest& request, ::ric::tasks::UpdateOrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateOrderResponse>> AsyncUpdateOrder(::grpc::ClientContext* context, const ::ric::tasks::UpdateOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateOrderResponse>>(AsyncUpdateOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateOrderResponse>> PrepareAsyncUpdateOrder(::grpc::ClientContext* context, const ::ric::tasks::UpdateOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateOrderResponse>>(PrepareAsyncUpdateOrderRaw(context, request, cq));
    }
    ::grpc::Status ChangeStatus(::grpc::ClientContext* context, const ::ric::tasks::ChangeStatusRequest& request, ::ric::tasks::ChangeStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::ChangeStatusResponse>> AsyncChangeStatus(::grpc::ClientContext* context, const ::ric::tasks::ChangeStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::ChangeStatusResponse>>(AsyncChangeStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::ChangeStatusResponse>> PrepareAsyncChangeStatus(::grpc::ClientContext* context, const ::ric::tasks::ChangeStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::ChangeStatusResponse>>(PrepareAsyncChangeStatusRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Create(::grpc::ClientContext* context, const ::ric::tasks::CreateRequest* request, ::ric::tasks::CreateResponse* response, std::function<void(::grpc::Status)>) override;
      void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::CreateResponse* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::ric::tasks::GetRequest* request, ::ric::tasks::GetResponse* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::GetResponse* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::ric::tasks::UpdateRequest* request, ::ric::tasks::UpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::UpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::ric::tasks::DeleteRequest* request, ::ric::tasks::DeleteResponse* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::DeleteResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateOrder(::grpc::ClientContext* context, const ::ric::tasks::UpdateOrderRequest* request, ::ric::tasks::UpdateOrderResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::UpdateOrderResponse* response, std::function<void(::grpc::Status)>) override;
      void ChangeStatus(::grpc::ClientContext* context, const ::ric::tasks::ChangeStatusRequest* request, ::ric::tasks::ChangeStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void ChangeStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::ChangeStatusResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::CreateResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::ric::tasks::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::CreateResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::ric::tasks::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::GetResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::ric::tasks::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::GetResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::ric::tasks::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::DeleteResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::ric::tasks::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::DeleteResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::ric::tasks::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateOrderResponse>* AsyncUpdateOrderRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateOrderResponse>* PrepareAsyncUpdateOrderRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::ChangeStatusResponse>* AsyncChangeStatusRaw(::grpc::ClientContext* context, const ::ric::tasks::ChangeStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::ChangeStatusResponse>* PrepareAsyncChangeStatusRaw(::grpc::ClientContext* context, const ::ric::tasks::ChangeStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_ChangeStatus_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::ric::tasks::CreateRequest* request, ::ric::tasks::CreateResponse* response);
    // get master task by it's id or by some subtask id
    // this request always return full master task
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::ric::tasks::GetRequest* request, ::ric::tasks::GetResponse* response);
    // this method can update master task and subtasks information
    // this method can't update (return error):
    // 1. subtasks status (use ChangeStatus)
    // 2. subtasks deadlines if status not equal to CREATED or ASSIGNED
    // 3. subtasks order (use UpdateOrder)
    // 4. begin and end location if status not equal to CREATED or ASSIGNED
    //
    // new subtasks can be added but they always append to end of subtasks list
    // use UpdateOrder after this if you need add subtask to specific position
    //
    // to update subtask -> TaskId should be present in request
    // if no TaskId then subtask treated as new
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateRequest* request, ::ric::tasks::UpdateResponse* response);
    // this method can delete master task or specific subtask
    // if it is a last subtask then master task also will be deleted
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteRequest* request, ::ric::tasks::DeleteResponse* response);
    // update subtasks order
    // order can be updated only if following true:
    // 1. all subtasks has status CREATED or ASSIGNED
    // 2. all subtasks has no deadlines
    //    (if subtask have deadline you can unset it via Update method)
    virtual ::grpc::Status UpdateOrder(::grpc::ServerContext* context, const ::ric::tasks::UpdateOrderRequest* request, ::ric::tasks::UpdateOrderResponse* response);
    // change subtask status
    // this method checks master task constrain before change status
    // so if constraint ordered you can't take in work subtask if previous subtask not closed
    //
    // the following status change is allowed:
    // CREATED -> ASSIGNED
    // ASSIGNED -> IN_WORK
    // IN_WORK -> CLOSED (with success flag)
    // CLOSED -> CREATED
    // ASSIGNED -> CREATED
    // ASSIGNED -> CLOSED (method always set success flag to false)
    // CREATED -> CLOSED (method always set success flag to false)
    //
    // if subtask has begin location -> change status to IN_WORK can be done only
    // in this location
    //
    // if subtask has end location -> change status to CLOSED can be done only
    // in this location
    virtual ::grpc::Status ChangeStatus(::grpc::ServerContext* context, const ::ric::tasks::ChangeStatusRequest* request, ::ric::tasks::ChangeStatusResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::ric::tasks::CreateRequest* request, ::ric::tasks::CreateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::ric::tasks::CreateRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::tasks::CreateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::ric::tasks::GetRequest* request, ::ric::tasks::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::ric::tasks::GetRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::tasks::GetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateRequest* request, ::ric::tasks::UpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::ric::tasks::UpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::tasks::UpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteRequest* request, ::ric::tasks::DeleteResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::ric::tasks::DeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::tasks::DeleteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateOrder() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrder(::grpc::ServerContext* context, const ::ric::tasks::UpdateOrderRequest* request, ::ric::tasks::UpdateOrderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrder(::grpc::ServerContext* context, ::ric::tasks::UpdateOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::tasks::UpdateOrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ChangeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ChangeStatus() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ChangeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeStatus(::grpc::ServerContext* context, const ::ric::tasks::ChangeStatusRequest* request, ::ric::tasks::ChangeStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChangeStatus(::grpc::ServerContext* context, ::ric::tasks::ChangeStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::tasks::ChangeStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Create<WithAsyncMethod_Get<WithAsyncMethod_Update<WithAsyncMethod_Delete<WithAsyncMethod_UpdateOrder<WithAsyncMethod_ChangeStatus<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Create() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::tasks::CreateRequest, ::ric::tasks::CreateResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::tasks::CreateRequest* request,
                 ::ric::tasks::CreateResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Create(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::ric::tasks::CreateRequest* request, ::ric::tasks::CreateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Create(::grpc::ServerContext* context, const ::ric::tasks::CreateRequest* request, ::ric::tasks::CreateResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Get() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::tasks::GetRequest, ::ric::tasks::GetResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::tasks::GetRequest* request,
                 ::ric::tasks::GetResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Get(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::ric::tasks::GetRequest* request, ::ric::tasks::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Get(::grpc::ServerContext* context, const ::ric::tasks::GetRequest* request, ::ric::tasks::GetResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Update() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::tasks::UpdateRequest, ::ric::tasks::UpdateResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::tasks::UpdateRequest* request,
                 ::ric::tasks::UpdateResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Update(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateRequest* request, ::ric::tasks::UpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateRequest* request, ::ric::tasks::UpdateResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Delete() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::tasks::DeleteRequest, ::ric::tasks::DeleteResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::tasks::DeleteRequest* request,
                 ::ric::tasks::DeleteResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Delete(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteRequest* request, ::ric::tasks::DeleteResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteRequest* request, ::ric::tasks::DeleteResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_UpdateOrder() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::tasks::UpdateOrderRequest, ::ric::tasks::UpdateOrderResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::tasks::UpdateOrderRequest* request,
                 ::ric::tasks::UpdateOrderResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->UpdateOrder(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_UpdateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrder(::grpc::ServerContext* context, const ::ric::tasks::UpdateOrderRequest* request, ::ric::tasks::UpdateOrderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateOrder(::grpc::ServerContext* context, const ::ric::tasks::UpdateOrderRequest* request, ::ric::tasks::UpdateOrderResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ChangeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ChangeStatus() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::tasks::ChangeStatusRequest, ::ric::tasks::ChangeStatusResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::tasks::ChangeStatusRequest* request,
                 ::ric::tasks::ChangeStatusResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ChangeStatus(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ChangeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeStatus(::grpc::ServerContext* context, const ::ric::tasks::ChangeStatusRequest* request, ::ric::tasks::ChangeStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ChangeStatus(::grpc::ServerContext* context, const ::ric::tasks::ChangeStatusRequest* request, ::ric::tasks::ChangeStatusResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Create<ExperimentalWithCallbackMethod_Get<ExperimentalWithCallbackMethod_Update<ExperimentalWithCallbackMethod_Delete<ExperimentalWithCallbackMethod_UpdateOrder<ExperimentalWithCallbackMethod_ChangeStatus<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::ric::tasks::CreateRequest* request, ::ric::tasks::CreateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::ric::tasks::GetRequest* request, ::ric::tasks::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateRequest* request, ::ric::tasks::UpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteRequest* request, ::ric::tasks::DeleteResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateOrder() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrder(::grpc::ServerContext* context, const ::ric::tasks::UpdateOrderRequest* request, ::ric::tasks::UpdateOrderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ChangeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ChangeStatus() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ChangeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeStatus(::grpc::ServerContext* context, const ::ric::tasks::ChangeStatusRequest* request, ::ric::tasks::ChangeStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::ric::tasks::CreateRequest* request, ::ric::tasks::CreateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::ric::tasks::GetRequest* request, ::ric::tasks::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Update() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateRequest* request, ::ric::tasks::UpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteRequest* request, ::ric::tasks::DeleteResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateOrder() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrder(::grpc::ServerContext* context, const ::ric::tasks::UpdateOrderRequest* request, ::ric::tasks::UpdateOrderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ChangeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ChangeStatus() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ChangeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeStatus(::grpc::ServerContext* context, const ::ric::tasks::ChangeStatusRequest* request, ::ric::tasks::ChangeStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChangeStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Create() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Create(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::ric::tasks::CreateRequest* request, ::ric::tasks::CreateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Create(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Get() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Get(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::ric::tasks::GetRequest* request, ::ric::tasks::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Get(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Update() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Update(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateRequest* request, ::ric::tasks::UpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Update(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Delete() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Delete(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteRequest* request, ::ric::tasks::DeleteResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Delete(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateOrder() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->UpdateOrder(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrder(::grpc::ServerContext* context, const ::ric::tasks::UpdateOrderRequest* request, ::ric::tasks::UpdateOrderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateOrder(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ChangeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ChangeStatus() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ChangeStatus(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ChangeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeStatus(::grpc::ServerContext* context, const ::ric::tasks::ChangeStatusRequest* request, ::ric::tasks::ChangeStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ChangeStatus(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::tasks::CreateRequest, ::ric::tasks::CreateResponse>(std::bind(&WithStreamedUnaryMethod_Create<BaseClass>::StreamedCreate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::ric::tasks::CreateRequest* request, ::ric::tasks::CreateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::tasks::CreateRequest,::ric::tasks::CreateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::tasks::GetRequest, ::ric::tasks::GetResponse>(std::bind(&WithStreamedUnaryMethod_Get<BaseClass>::StreamedGet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::ric::tasks::GetRequest* request, ::ric::tasks::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::tasks::GetRequest,::ric::tasks::GetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::tasks::UpdateRequest, ::ric::tasks::UpdateResponse>(std::bind(&WithStreamedUnaryMethod_Update<BaseClass>::StreamedUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateRequest* request, ::ric::tasks::UpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::tasks::UpdateRequest,::ric::tasks::UpdateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::tasks::DeleteRequest, ::ric::tasks::DeleteResponse>(std::bind(&WithStreamedUnaryMethod_Delete<BaseClass>::StreamedDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteRequest* request, ::ric::tasks::DeleteResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::tasks::DeleteRequest,::ric::tasks::DeleteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateOrder() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::tasks::UpdateOrderRequest, ::ric::tasks::UpdateOrderResponse>(std::bind(&WithStreamedUnaryMethod_UpdateOrder<BaseClass>::StreamedUpdateOrder, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateOrder(::grpc::ServerContext* context, const ::ric::tasks::UpdateOrderRequest* request, ::ric::tasks::UpdateOrderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::tasks::UpdateOrderRequest,::ric::tasks::UpdateOrderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ChangeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ChangeStatus() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::tasks::ChangeStatusRequest, ::ric::tasks::ChangeStatusResponse>(std::bind(&WithStreamedUnaryMethod_ChangeStatus<BaseClass>::StreamedChangeStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ChangeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ChangeStatus(::grpc::ServerContext* context, const ::ric::tasks::ChangeStatusRequest* request, ::ric::tasks::ChangeStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedChangeStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::tasks::ChangeStatusRequest,::ric::tasks::ChangeStatusResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_UpdateOrder<WithStreamedUnaryMethod_ChangeStatus<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_UpdateOrder<WithStreamedUnaryMethod_ChangeStatus<Service > > > > > > StreamedService;
};

}  // namespace tasks
}  // namespace ric


#endif  // GRPC_ric_2dtasks_2frictasks_2eproto__INCLUDED
