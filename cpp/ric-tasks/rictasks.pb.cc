// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ric-tasks/rictasks.proto

#include "ric-tasks/rictasks.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dtasks_2frictasks_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IndoorLocation_ric_2dtasks_2frictasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dtasks_2frictasks_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dtasks_2frictasks_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TaskId_ric_2dtasks_2frictasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dtasks_2frictasks_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UpdateOrderRequest_PositionsEntry_DoNotUse_ric_2dtasks_2frictasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dtasks_2frictasks_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserContext_ric_2dtasks_2frictasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dtasks_2frictasks_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Deadline_ric_2dtasks_2frictasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dtasks_2frictasks_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Location_ric_2dtasks_2frictasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dtasks_2frictasks_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MasterTask_ric_2dtasks_2frictasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dtasks_2frictasks_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Task_ric_2dtasks_2frictasks_2eproto;
namespace ric {
namespace tasks {
class UserContextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserContext> _instance;
} _UserContext_default_instance_;
class ObjectIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObjectId> _instance;
} _ObjectId_default_instance_;
class TaskIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskId> _instance;
} _TaskId_default_instance_;
class LocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Location> _instance;
} _Location_default_instance_;
class IndoorLocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IndoorLocation> _instance;
} _IndoorLocation_default_instance_;
class TaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Task> _instance;
} _Task_default_instance_;
class DeadlineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Deadline> _instance;
} _Deadline_default_instance_;
class MasterTaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MasterTask> _instance;
} _MasterTask_default_instance_;
class CreateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateRequest> _instance;
} _CreateRequest_default_instance_;
class CreateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateResponse> _instance;
} _CreateResponse_default_instance_;
class GetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRequest> _instance;
  const ::ric::tasks::ObjectId* oid_;
  const ::ric::tasks::TaskId* tid_;
} _GetRequest_default_instance_;
class GetResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetResponse> _instance;
} _GetResponse_default_instance_;
class DeleteRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteRequest> _instance;
  const ::ric::tasks::ObjectId* oid_;
  const ::ric::tasks::TaskId* tid_;
} _DeleteRequest_default_instance_;
class DeleteResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteResponse> _instance;
} _DeleteResponse_default_instance_;
class UpdateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateRequest> _instance;
} _UpdateRequest_default_instance_;
class UpdateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateResponse> _instance;
} _UpdateResponse_default_instance_;
class UpdateOrderRequest_PositionsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateOrderRequest_PositionsEntry_DoNotUse> _instance;
} _UpdateOrderRequest_PositionsEntry_DoNotUse_default_instance_;
class UpdateOrderRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateOrderRequest> _instance;
} _UpdateOrderRequest_default_instance_;
class UpdateOrderResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateOrderResponse> _instance;
} _UpdateOrderResponse_default_instance_;
class ChangeStatusRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChangeStatusRequest> _instance;
} _ChangeStatusRequest_default_instance_;
class ChangeStatusResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChangeStatusResponse> _instance;
} _ChangeStatusResponse_default_instance_;
}  // namespace tasks
}  // namespace ric
static void InitDefaultsUserContext_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_UserContext_default_instance_;
    new (ptr) ::ric::tasks::UserContext();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::UserContext::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserContext_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserContext_ric_2dtasks_2frictasks_2eproto}, {}};

static void InitDefaultsObjectId_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_ObjectId_default_instance_;
    new (ptr) ::ric::tasks::ObjectId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::ObjectId::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsObjectId_ric_2dtasks_2frictasks_2eproto}, {}};

static void InitDefaultsTaskId_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_TaskId_default_instance_;
    new (ptr) ::ric::tasks::TaskId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::TaskId::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TaskId_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTaskId_ric_2dtasks_2frictasks_2eproto}, {}};

static void InitDefaultsLocation_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_Location_default_instance_;
    new (ptr) ::ric::tasks::Location();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::Location::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Location_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLocation_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_IndoorLocation_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsIndoorLocation_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_IndoorLocation_default_instance_;
    new (ptr) ::ric::tasks::IndoorLocation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::IndoorLocation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IndoorLocation_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIndoorLocation_ric_2dtasks_2frictasks_2eproto}, {}};

static void InitDefaultsTask_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_Task_default_instance_;
    new (ptr) ::ric::tasks::Task();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::Task::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_Task_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsTask_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_TaskId_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_Location_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_Deadline_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsDeadline_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_Deadline_default_instance_;
    new (ptr) ::ric::tasks::Deadline();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::Deadline::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Deadline_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDeadline_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsMasterTask_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_MasterTask_default_instance_;
    new (ptr) ::ric::tasks::MasterTask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::MasterTask::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MasterTask_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMasterTask_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_Task_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsCreateRequest_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_CreateRequest_default_instance_;
    new (ptr) ::ric::tasks::CreateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::CreateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CreateRequest_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCreateRequest_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_UserContext_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_MasterTask_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsCreateResponse_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_CreateResponse_default_instance_;
    new (ptr) ::ric::tasks::CreateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::CreateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CreateResponse_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCreateResponse_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_TaskId_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsGetRequest_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_GetRequest_default_instance_;
    new (ptr) ::ric::tasks::GetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::GetRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GetRequest_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGetRequest_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_TaskId_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsGetResponse_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_GetResponse_default_instance_;
    new (ptr) ::ric::tasks::GetResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::GetResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetResponse_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetResponse_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_MasterTask_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsDeleteRequest_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_DeleteRequest_default_instance_;
    new (ptr) ::ric::tasks::DeleteRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::DeleteRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_DeleteRequest_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsDeleteRequest_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_UserContext_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_TaskId_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsDeleteResponse_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_DeleteResponse_default_instance_;
    new (ptr) ::ric::tasks::DeleteResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::DeleteResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteResponse_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteResponse_ric_2dtasks_2frictasks_2eproto}, {}};

static void InitDefaultsUpdateRequest_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_UpdateRequest_default_instance_;
    new (ptr) ::ric::tasks::UpdateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::UpdateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UpdateRequest_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUpdateRequest_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_UserContext_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_MasterTask_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsUpdateResponse_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_UpdateResponse_default_instance_;
    new (ptr) ::ric::tasks::UpdateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::UpdateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UpdateResponse_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUpdateResponse_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_MasterTask_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsUpdateOrderRequest_PositionsEntry_DoNotUse_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_UpdateOrderRequest_PositionsEntry_DoNotUse_default_instance_;
    new (ptr) ::ric::tasks::UpdateOrderRequest_PositionsEntry_DoNotUse();
  }
  ::ric::tasks::UpdateOrderRequest_PositionsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UpdateOrderRequest_PositionsEntry_DoNotUse_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUpdateOrderRequest_PositionsEntry_DoNotUse_ric_2dtasks_2frictasks_2eproto}, {}};

static void InitDefaultsUpdateOrderRequest_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_UpdateOrderRequest_default_instance_;
    new (ptr) ::ric::tasks::UpdateOrderRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::UpdateOrderRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_UpdateOrderRequest_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsUpdateOrderRequest_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_UserContext_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_UpdateOrderRequest_PositionsEntry_DoNotUse_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsUpdateOrderResponse_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_UpdateOrderResponse_default_instance_;
    new (ptr) ::ric::tasks::UpdateOrderResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::UpdateOrderResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UpdateOrderResponse_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUpdateOrderResponse_ric_2dtasks_2frictasks_2eproto}, {}};

static void InitDefaultsChangeStatusRequest_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_ChangeStatusRequest_default_instance_;
    new (ptr) ::ric::tasks::ChangeStatusRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::ChangeStatusRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_ChangeStatusRequest_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsChangeStatusRequest_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_UserContext_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_TaskId_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_Location_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsChangeStatusResponse_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_ChangeStatusResponse_default_instance_;
    new (ptr) ::ric::tasks::ChangeStatusResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::ChangeStatusResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChangeStatusResponse_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChangeStatusResponse_ric_2dtasks_2frictasks_2eproto}, {}};

void InitDefaults_ric_2dtasks_2frictasks_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_UserContext_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskId_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Location_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IndoorLocation_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Task_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Deadline_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MasterTask_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateResponse_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetResponse_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteResponse_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateResponse_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateOrderRequest_PositionsEntry_DoNotUse_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateOrderRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateOrderResponse_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChangeStatusRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChangeStatusResponse_ric_2dtasks_2frictasks_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_ric_2dtasks_2frictasks_2eproto[21];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_ric_2dtasks_2frictasks_2eproto[3];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_ric_2dtasks_2frictasks_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_ric_2dtasks_2frictasks_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UserContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UserContext, group_id_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UserContext, user_id_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UserContext, span_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ObjectId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ObjectId, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::TaskId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::TaskId, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Location, lat_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Location, lng_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Location, radius_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Location, address_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Location, indoor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::IndoorLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::IndoorLocation, x_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::IndoorLocation, y_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::IndoorLocation, z_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::IndoorLocation, radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, id_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, name_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, kind_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, description_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, status_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, object_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, begin_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, end_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, created_at_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, deadlines_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, owner_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, success_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, comment_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, files_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, assignee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Deadline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Deadline, timestamp_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Deadline, notify_until_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Deadline, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::MasterTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::MasterTask, oid_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::MasterTask, owner_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::MasterTask, group_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::MasterTask, subtasks_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::MasterTask, constrain_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::MasterTask, tags_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::MasterTask, priority_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::MasterTask, time_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::MasterTask, object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::CreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::CreateRequest, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::CreateRequest, master_task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::CreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::CreateResponse, oid_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::CreateResponse, sub_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::GetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::GetRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ric::tasks::GetRequestDefaultTypeInternal, oid_),
  offsetof(::ric::tasks::GetRequestDefaultTypeInternal, tid_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::GetRequest, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::GetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::GetResponse, master_task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::DeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::DeleteRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::DeleteRequest, ctx_),
  offsetof(::ric::tasks::DeleteRequestDefaultTypeInternal, oid_),
  offsetof(::ric::tasks::DeleteRequestDefaultTypeInternal, tid_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::DeleteRequest, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::DeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateRequest, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateRequest, master_task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateResponse, master_task_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateOrderRequest_PositionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateOrderRequest_PositionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateOrderRequest_PositionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateOrderRequest_PositionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateOrderRequest, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateOrderRequest, id_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateOrderRequest, positions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ChangeStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ChangeStatusRequest, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ChangeStatusRequest, id_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ChangeStatusRequest, new_status_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ChangeStatusRequest, location_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ChangeStatusRequest, success_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ChangeStatusRequest, comment_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ChangeStatusRequest, files_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ChangeStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ric::tasks::UserContext)},
  { 8, -1, sizeof(::ric::tasks::ObjectId)},
  { 14, -1, sizeof(::ric::tasks::TaskId)},
  { 20, -1, sizeof(::ric::tasks::Location)},
  { 30, -1, sizeof(::ric::tasks::IndoorLocation)},
  { 39, -1, sizeof(::ric::tasks::Task)},
  { 59, -1, sizeof(::ric::tasks::Deadline)},
  { 67, -1, sizeof(::ric::tasks::MasterTask)},
  { 81, -1, sizeof(::ric::tasks::CreateRequest)},
  { 88, -1, sizeof(::ric::tasks::CreateResponse)},
  { 95, -1, sizeof(::ric::tasks::GetRequest)},
  { 103, -1, sizeof(::ric::tasks::GetResponse)},
  { 109, -1, sizeof(::ric::tasks::DeleteRequest)},
  { 118, -1, sizeof(::ric::tasks::DeleteResponse)},
  { 123, -1, sizeof(::ric::tasks::UpdateRequest)},
  { 130, -1, sizeof(::ric::tasks::UpdateResponse)},
  { 136, 143, sizeof(::ric::tasks::UpdateOrderRequest_PositionsEntry_DoNotUse)},
  { 145, -1, sizeof(::ric::tasks::UpdateOrderRequest)},
  { 153, -1, sizeof(::ric::tasks::UpdateOrderResponse)},
  { 158, -1, sizeof(::ric::tasks::ChangeStatusRequest)},
  { 170, -1, sizeof(::ric::tasks::ChangeStatusResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_UserContext_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_ObjectId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_TaskId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_Location_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_IndoorLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_Task_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_Deadline_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_MasterTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_CreateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_CreateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_GetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_GetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_DeleteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_DeleteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_UpdateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_UpdateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_UpdateOrderRequest_PositionsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_UpdateOrderRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_UpdateOrderResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_ChangeStatusRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_ChangeStatusResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_ric_2dtasks_2frictasks_2eproto = {
  {}, AddDescriptors_ric_2dtasks_2frictasks_2eproto, "ric-tasks/rictasks.proto", schemas,
  file_default_instances, TableStruct_ric_2dtasks_2frictasks_2eproto::offsets,
  file_level_metadata_ric_2dtasks_2frictasks_2eproto, 21, file_level_enum_descriptors_ric_2dtasks_2frictasks_2eproto, file_level_service_descriptors_ric_2dtasks_2frictasks_2eproto,
};

const char descriptor_table_protodef_ric_2dtasks_2frictasks_2eproto[] =
  "\n\030ric-tasks/rictasks.proto\022\tric.tasks\032\036g"
  "oogle/protobuf/wrappers.proto\"A\n\013UserCon"
  "text\022\020\n\010group_id\030\001 \001(\t\022\017\n\007user_id\030\002 \001(\t\022"
  "\017\n\007span_id\030\003 \001(\t\"\026\n\010ObjectId\022\n\n\002id\030\001 \001(\t"
  "\"\024\n\006TaskId\022\n\n\002id\030\001 \001(\t\"p\n\010Location\022\013\n\003la"
  "t\030\001 \001(\001\022\013\n\003lng\030\002 \001(\001\022\016\n\006radius\030\003 \001(\001\022\017\n\007"
  "address\030\004 \001(\t\022)\n\006indoor\030\005 \001(\0132\031.ric.task"
  "s.IndoorLocation\"A\n\016IndoorLocation\022\t\n\001x\030"
  "\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\016\n\006radius\030\004 "
  "\001(\001\"\210\004\n\004Task\022\035\n\002id\030\001 \001(\0132\021.ric.tasks.Tas"
  "kId\022\014\n\004name\030\002 \001(\t\022\014\n\004kind\030\003 \001(\t\022\023\n\013descr"
  "iption\030\004 \001(\t\022&\n\006status\030\005 \001(\0162\026.ric.tasks"
  ".Task.Status\022#\n\006object\030\006 \001(\0132\023.ric.tasks"
  ".ObjectId\022\"\n\005begin\030\007 \001(\0132\023.ric.tasks.Loc"
  "ation\022 \n\003end\030\010 \001(\0132\023.ric.tasks.Location\022"
  "\022\n\ncreated_at\030\t \001(\003\022&\n\tdeadlines\030\n \003(\0132\023"
  ".ric.tasks.Deadline\022\"\n\005owner\030\013 \001(\0132\023.ric"
  ".tasks.ObjectId\022+\n\007success\030\014 \001(\0132\032.googl"
  "e.protobuf.BoolValue\022\017\n\007comment\030\r \001(\t\022\r\n"
  "\005files\030\016 \003(\t\022%\n\010assignee\030\017 \001(\0132\023.ric.tas"
  "ks.ObjectId\"I\n\006Status\022\013\n\007INVALID\020\000\022\013\n\007CR"
  "EATED\020\001\022\014\n\010ASSIGNED\020\002\022\013\n\007IN_WORK\020\003\022\n\n\006CL"
  "OSED\020\004\"x\n\010Deadline\022\021\n\ttimestamp\030\001 \001(\003\0221\n"
  "\014notify_until\030\002 \001(\0132\033.google.protobuf.In"
  "t64Value\022&\n\006status\030\003 \001(\0162\026.ric.tasks.Tas"
  "k.Status\"\260\003\n\nMasterTask\022 \n\003oid\030\001 \001(\0132\023.r"
  "ic.tasks.ObjectId\022\"\n\005owner\030\002 \001(\0132\023.ric.t"
  "asks.ObjectId\022\"\n\005group\030\003 \001(\0132\023.ric.tasks"
  ".ObjectId\022!\n\010subtasks\030\004 \003(\0132\017.ric.tasks."
  "Task\0222\n\tconstrain\030\005 \001(\0162\037.ric.tasks.Mast"
  "erTask.Constrain\022\014\n\004tags\030\006 \003(\t\0220\n\010priori"
  "ty\030\007 \001(\0162\036.ric.tasks.MasterTask.Priority"
  "\022\014\n\004time\030\010 \001(\003\022#\n\006object\030\t \001(\0132\023.ric.tas"
  "ks.ObjectId\"4\n\tConstrain\022\013\n\007INVALID\020\000\022\r\n"
  "\tUNORDERED\020\001\022\013\n\007ORDERED\020\002\"8\n\010Priority\022\r\n"
  "\tUNDEFINED\020\000\022\007\n\003LOW\020\001\022\n\n\006NORMAL\020\002\022\010\n\004HIG"
  "H\020\003\"`\n\rCreateRequest\022#\n\003ctx\030\001 \001(\0132\026.ric."
  "tasks.UserContext\022*\n\013master_task\030\002 \001(\0132\025"
  ".ric.tasks.MasterTask\"V\n\016CreateResponse\022"
  " \n\003oid\030\001 \001(\0132\023.ric.tasks.ObjectId\022\"\n\007sub"
  "_ids\030\002 \003(\0132\021.ric.tasks.TaskId\"]\n\nGetRequ"
  "est\022\"\n\003oid\030\001 \001(\0132\023.ric.tasks.ObjectIdH\000\022"
  " \n\003tid\030\002 \001(\0132\021.ric.tasks.TaskIdH\000B\t\n\007pay"
  "load\"9\n\013GetResponse\022*\n\013master_task\030\001 \001(\013"
  "2\025.ric.tasks.MasterTask\"\205\001\n\rDeleteReques"
  "t\022#\n\003ctx\030\001 \001(\0132\026.ric.tasks.UserContext\022\""
  "\n\003oid\030\002 \001(\0132\023.ric.tasks.ObjectIdH\000\022 \n\003ti"
  "d\030\003 \001(\0132\021.ric.tasks.TaskIdH\000B\t\n\007payload\""
  "\020\n\016DeleteResponse\"`\n\rUpdateRequest\022#\n\003ct"
  "x\030\001 \001(\0132\026.ric.tasks.UserContext\022*\n\013maste"
  "r_task\030\002 \001(\0132\025.ric.tasks.MasterTask\"<\n\016U"
  "pdateResponse\022*\n\013master_task\030\001 \001(\0132\025.ric"
  ".tasks.MasterTask\"\315\001\n\022UpdateOrderRequest"
  "\022#\n\003ctx\030\001 \001(\0132\026.ric.tasks.UserContext\022\037\n"
  "\002id\030\002 \001(\0132\023.ric.tasks.ObjectId\022\?\n\tpositi"
  "ons\030\003 \003(\0132,.ric.tasks.UpdateOrderRequest"
  ".PositionsEntry\0320\n\016PositionsEntry\022\013\n\003key"
  "\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\"\025\n\023UpdateOrder"
  "Response\"\371\001\n\023ChangeStatusRequest\022#\n\003ctx\030"
  "\001 \001(\0132\026.ric.tasks.UserContext\022\035\n\002id\030\002 \001("
  "\0132\021.ric.tasks.TaskId\022*\n\nnew_status\030\003 \001(\016"
  "2\026.ric.tasks.Task.Status\022%\n\010location\030\004 \001"
  "(\0132\023.ric.tasks.Location\022+\n\007success\030\005 \001(\013"
  "2\032.google.protobuf.BoolValue\022\017\n\007comment\030"
  "\006 \001(\t\022\r\n\005files\030\007 \003(\t\"\026\n\024ChangeStatusResp"
  "onse2\231\003\n\005Tasks\022=\n\006Create\022\030.ric.tasks.Cre"
  "ateRequest\032\031.ric.tasks.CreateResponse\0224\n"
  "\003Get\022\025.ric.tasks.GetRequest\032\026.ric.tasks."
  "GetResponse\022=\n\006Update\022\030.ric.tasks.Update"
  "Request\032\031.ric.tasks.UpdateResponse\022=\n\006De"
  "lete\022\030.ric.tasks.DeleteRequest\032\031.ric.tas"
  "ks.DeleteResponse\022L\n\013UpdateOrder\022\035.ric.t"
  "asks.UpdateOrderRequest\032\036.ric.tasks.Upda"
  "teOrderResponse\022O\n\014ChangeStatus\022\036.ric.ta"
  "sks.ChangeStatusRequest\032\037.ric.tasks.Chan"
  "geStatusResponseB\026Z\024./ric-tasks;rictasks"
  "b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_ric_2dtasks_2frictasks_2eproto = {
  false, InitDefaults_ric_2dtasks_2frictasks_2eproto, 
  descriptor_table_protodef_ric_2dtasks_2frictasks_2eproto,
  "ric-tasks/rictasks.proto", &assign_descriptors_table_ric_2dtasks_2frictasks_2eproto, 3048,
};

void AddDescriptors_ric_2dtasks_2frictasks_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_google_2fprotobuf_2fwrappers_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_ric_2dtasks_2frictasks_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ric_2dtasks_2frictasks_2eproto = []() { AddDescriptors_ric_2dtasks_2frictasks_2eproto(); return true; }();
namespace ric {
namespace tasks {
const ::google::protobuf::EnumDescriptor* Task_Status_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return file_level_enum_descriptors_ric_2dtasks_2frictasks_2eproto[0];
}
bool Task_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Task_Status Task::INVALID;
const Task_Status Task::CREATED;
const Task_Status Task::ASSIGNED;
const Task_Status Task::IN_WORK;
const Task_Status Task::CLOSED;
const Task_Status Task::Status_MIN;
const Task_Status Task::Status_MAX;
const int Task::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MasterTask_Constrain_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return file_level_enum_descriptors_ric_2dtasks_2frictasks_2eproto[1];
}
bool MasterTask_Constrain_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MasterTask_Constrain MasterTask::INVALID;
const MasterTask_Constrain MasterTask::UNORDERED;
const MasterTask_Constrain MasterTask::ORDERED;
const MasterTask_Constrain MasterTask::Constrain_MIN;
const MasterTask_Constrain MasterTask::Constrain_MAX;
const int MasterTask::Constrain_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MasterTask_Priority_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return file_level_enum_descriptors_ric_2dtasks_2frictasks_2eproto[2];
}
bool MasterTask_Priority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MasterTask_Priority MasterTask::UNDEFINED;
const MasterTask_Priority MasterTask::LOW;
const MasterTask_Priority MasterTask::NORMAL;
const MasterTask_Priority MasterTask::HIGH;
const MasterTask_Priority MasterTask::Priority_MIN;
const MasterTask_Priority MasterTask::Priority_MAX;
const int MasterTask::Priority_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void UserContext::InitAsDefaultInstance() {
}
class UserContext::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserContext::kGroupIdFieldNumber;
const int UserContext::kUserIdFieldNumber;
const int UserContext::kSpanIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserContext::UserContext()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.UserContext)
}
UserContext::UserContext(const UserContext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  span_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.span_id().size() > 0) {
    span_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.span_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.UserContext)
}

void UserContext::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UserContext_ric_2dtasks_2frictasks_2eproto.base);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserContext::~UserContext() {
  // @@protoc_insertion_point(destructor:ric.tasks.UserContext)
  SharedDtor();
}

void UserContext::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserContext& UserContext::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserContext_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void UserContext::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.UserContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserContext::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserContext*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string group_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.tasks.UserContext.group_id");
        object = msg->mutable_group_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string user_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.tasks.UserContext.user_id");
        object = msg->mutable_user_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string span_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.tasks.UserContext.span_id");
        object = msg->mutable_span_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.UserContext)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), static_cast<int>(this->group_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.UserContext.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.UserContext.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string span_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_span_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->span_id().data(), static_cast<int>(this->span_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.UserContext.span_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.UserContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.UserContext)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.UserContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.UserContext.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.UserContext.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // string span_id = 3;
  if (this->span_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->span_id().data(), static_cast<int>(this->span_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.UserContext.span_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->span_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.UserContext)
}

::google::protobuf::uint8* UserContext::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.UserContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.UserContext.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.UserContext.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // string span_id = 3;
  if (this->span_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->span_id().data(), static_cast<int>(this->span_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.UserContext.span_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->span_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.UserContext)
  return target;
}

size_t UserContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.UserContext)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string span_id = 3;
  if (this->span_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->span_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.UserContext)
  GOOGLE_DCHECK_NE(&from, this);
  const UserContext* source =
      ::google::protobuf::DynamicCastToGenerated<UserContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.UserContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.UserContext)
    MergeFrom(*source);
  }
}

void UserContext::MergeFrom(const UserContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.UserContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.span_id().size() > 0) {

    span_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.span_id_);
  }
}

void UserContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.UserContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserContext::CopyFrom(const UserContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.UserContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserContext::IsInitialized() const {
  return true;
}

void UserContext::Swap(UserContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserContext::InternalSwap(UserContext* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  group_id_.Swap(&other->group_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  span_id_.Swap(&other->span_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata UserContext::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ObjectId::InitAsDefaultInstance() {
}
class ObjectId::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectId::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectId::ObjectId()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.ObjectId)
}
ObjectId::ObjectId(const ObjectId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.ObjectId)
}

void ObjectId::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ObjectId::~ObjectId() {
  // @@protoc_insertion_point(destructor:ric.tasks.ObjectId)
  SharedDtor();
}

void ObjectId::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ObjectId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectId& ObjectId::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void ObjectId::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.ObjectId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObjectId::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ObjectId*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.tasks.ObjectId.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObjectId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.ObjectId)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.ObjectId.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.ObjectId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.ObjectId)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObjectId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.ObjectId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.ObjectId.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.ObjectId)
}

::google::protobuf::uint8* ObjectId::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.ObjectId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.ObjectId.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.ObjectId)
  return target;
}

size_t ObjectId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.ObjectId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.ObjectId)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectId* source =
      ::google::protobuf::DynamicCastToGenerated<ObjectId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.ObjectId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.ObjectId)
    MergeFrom(*source);
  }
}

void ObjectId::MergeFrom(const ObjectId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.ObjectId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void ObjectId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.ObjectId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectId::CopyFrom(const ObjectId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.ObjectId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectId::IsInitialized() const {
  return true;
}

void ObjectId::Swap(ObjectId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectId::InternalSwap(ObjectId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ObjectId::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TaskId::InitAsDefaultInstance() {
}
class TaskId::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskId::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskId::TaskId()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.TaskId)
}
TaskId::TaskId(const TaskId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.TaskId)
}

void TaskId::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TaskId_ric_2dtasks_2frictasks_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TaskId::~TaskId() {
  // @@protoc_insertion_point(destructor:ric.tasks.TaskId)
  SharedDtor();
}

void TaskId::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TaskId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskId& TaskId::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TaskId_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void TaskId::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.TaskId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TaskId::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TaskId*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.tasks.TaskId.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.TaskId)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.TaskId.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.TaskId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.TaskId)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TaskId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.TaskId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.TaskId.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.TaskId)
}

::google::protobuf::uint8* TaskId::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.TaskId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.TaskId.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.TaskId)
  return target;
}

size_t TaskId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.TaskId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.TaskId)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskId* source =
      ::google::protobuf::DynamicCastToGenerated<TaskId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.TaskId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.TaskId)
    MergeFrom(*source);
  }
}

void TaskId::MergeFrom(const TaskId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.TaskId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void TaskId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.TaskId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskId::CopyFrom(const TaskId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.TaskId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskId::IsInitialized() const {
  return true;
}

void TaskId::Swap(TaskId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskId::InternalSwap(TaskId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TaskId::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Location::InitAsDefaultInstance() {
  ::ric::tasks::_Location_default_instance_._instance.get_mutable()->indoor_ = const_cast< ::ric::tasks::IndoorLocation*>(
      ::ric::tasks::IndoorLocation::internal_default_instance());
}
class Location::HasBitSetters {
 public:
  static const ::ric::tasks::IndoorLocation& indoor(const Location* msg);
};

const ::ric::tasks::IndoorLocation&
Location::HasBitSetters::indoor(const Location* msg) {
  return *msg->indoor_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Location::kLatFieldNumber;
const int Location::kLngFieldNumber;
const int Location::kRadiusFieldNumber;
const int Location::kAddressFieldNumber;
const int Location::kIndoorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Location::Location()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.Location)
}
Location::Location(const Location& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.has_indoor()) {
    indoor_ = new ::ric::tasks::IndoorLocation(*from.indoor_);
  } else {
    indoor_ = nullptr;
  }
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(radius_));
  // @@protoc_insertion_point(copy_constructor:ric.tasks.Location)
}

void Location::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Location_ric_2dtasks_2frictasks_2eproto.base);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&indoor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&indoor_)) + sizeof(radius_));
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:ric.tasks.Location)
  SharedDtor();
}

void Location::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete indoor_;
}

void Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Location& Location::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Location_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && indoor_ != nullptr) {
    delete indoor_;
  }
  indoor_ = nullptr;
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(radius_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Location::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Location*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double lat = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_lat(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double lng = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_lng(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double radius = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_radius(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // string address = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.tasks.Location.address");
        object = msg->mutable_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ric.tasks.IndoorLocation indoor = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::IndoorLocation::_InternalParse;
        object = msg->mutable_indoor();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.Location)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double lat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lng = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lng_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double radius = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.Location.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.IndoorLocation indoor = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_indoor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.Location)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // double lng = 2;
  if (this->lng() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lng(), output);
  }

  // double radius = 3;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->radius(), output);
  }

  // string address = 4;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Location.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->address(), output);
  }

  // .ric.tasks.IndoorLocation indoor = 5;
  if (this->has_indoor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::indoor(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.Location)
}

::google::protobuf::uint8* Location::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lat(), target);
  }

  // double lng = 2;
  if (this->lng() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lng(), target);
  }

  // double radius = 3;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->radius(), target);
  }

  // string address = 4;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Location.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->address(), target);
  }

  // .ric.tasks.IndoorLocation indoor = 5;
  if (this->has_indoor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::indoor(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.Location)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 4;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // .ric.tasks.IndoorLocation indoor = 5;
  if (this->has_indoor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *indoor_);
  }

  // double lat = 1;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // double lng = 2;
  if (this->lng() != 0) {
    total_size += 1 + 8;
  }

  // double radius = 3;
  if (this->radius() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const Location* source =
      ::google::protobuf::DynamicCastToGenerated<Location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.Location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.has_indoor()) {
    mutable_indoor()->::ric::tasks::IndoorLocation::MergeFrom(from.indoor());
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lng() != 0) {
    set_lng(from.lng());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
}

void Location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::Swap(Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(indoor_, other->indoor_);
  swap(lat_, other->lat_);
  swap(lng_, other->lng_);
  swap(radius_, other->radius_);
}

::google::protobuf::Metadata Location::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void IndoorLocation::InitAsDefaultInstance() {
}
class IndoorLocation::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndoorLocation::kXFieldNumber;
const int IndoorLocation::kYFieldNumber;
const int IndoorLocation::kZFieldNumber;
const int IndoorLocation::kRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndoorLocation::IndoorLocation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.IndoorLocation)
}
IndoorLocation::IndoorLocation(const IndoorLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&x_)) + sizeof(radius_));
  // @@protoc_insertion_point(copy_constructor:ric.tasks.IndoorLocation)
}

void IndoorLocation::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&x_)) + sizeof(radius_));
}

IndoorLocation::~IndoorLocation() {
  // @@protoc_insertion_point(destructor:ric.tasks.IndoorLocation)
  SharedDtor();
}

void IndoorLocation::SharedDtor() {
}

void IndoorLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IndoorLocation& IndoorLocation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_IndoorLocation_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void IndoorLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.IndoorLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&x_)) + sizeof(radius_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IndoorLocation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IndoorLocation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double z = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_z(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double radius = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_radius(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IndoorLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.IndoorLocation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double radius = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.IndoorLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.IndoorLocation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IndoorLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.IndoorLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // double radius = 4;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.IndoorLocation)
}

::google::protobuf::uint8* IndoorLocation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.IndoorLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // double radius = 4;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.IndoorLocation)
  return target;
}

size_t IndoorLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.IndoorLocation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  // double radius = 4;
  if (this->radius() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndoorLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.IndoorLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const IndoorLocation* source =
      ::google::protobuf::DynamicCastToGenerated<IndoorLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.IndoorLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.IndoorLocation)
    MergeFrom(*source);
  }
}

void IndoorLocation::MergeFrom(const IndoorLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.IndoorLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
}

void IndoorLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.IndoorLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndoorLocation::CopyFrom(const IndoorLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.IndoorLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndoorLocation::IsInitialized() const {
  return true;
}

void IndoorLocation::Swap(IndoorLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndoorLocation::InternalSwap(IndoorLocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(radius_, other->radius_);
}

::google::protobuf::Metadata IndoorLocation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Task::InitAsDefaultInstance() {
  ::ric::tasks::_Task_default_instance_._instance.get_mutable()->id_ = const_cast< ::ric::tasks::TaskId*>(
      ::ric::tasks::TaskId::internal_default_instance());
  ::ric::tasks::_Task_default_instance_._instance.get_mutable()->object_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
  ::ric::tasks::_Task_default_instance_._instance.get_mutable()->begin_ = const_cast< ::ric::tasks::Location*>(
      ::ric::tasks::Location::internal_default_instance());
  ::ric::tasks::_Task_default_instance_._instance.get_mutable()->end_ = const_cast< ::ric::tasks::Location*>(
      ::ric::tasks::Location::internal_default_instance());
  ::ric::tasks::_Task_default_instance_._instance.get_mutable()->owner_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
  ::ric::tasks::_Task_default_instance_._instance.get_mutable()->success_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::ric::tasks::_Task_default_instance_._instance.get_mutable()->assignee_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
}
class Task::HasBitSetters {
 public:
  static const ::ric::tasks::TaskId& id(const Task* msg);
  static const ::ric::tasks::ObjectId& object(const Task* msg);
  static const ::ric::tasks::Location& begin(const Task* msg);
  static const ::ric::tasks::Location& end(const Task* msg);
  static const ::ric::tasks::ObjectId& owner(const Task* msg);
  static const ::google::protobuf::BoolValue& success(const Task* msg);
  static const ::ric::tasks::ObjectId& assignee(const Task* msg);
};

const ::ric::tasks::TaskId&
Task::HasBitSetters::id(const Task* msg) {
  return *msg->id_;
}
const ::ric::tasks::ObjectId&
Task::HasBitSetters::object(const Task* msg) {
  return *msg->object_;
}
const ::ric::tasks::Location&
Task::HasBitSetters::begin(const Task* msg) {
  return *msg->begin_;
}
const ::ric::tasks::Location&
Task::HasBitSetters::end(const Task* msg) {
  return *msg->end_;
}
const ::ric::tasks::ObjectId&
Task::HasBitSetters::owner(const Task* msg) {
  return *msg->owner_;
}
const ::google::protobuf::BoolValue&
Task::HasBitSetters::success(const Task* msg) {
  return *msg->success_;
}
const ::ric::tasks::ObjectId&
Task::HasBitSetters::assignee(const Task* msg) {
  return *msg->assignee_;
}
void Task::clear_success() {
  if (GetArenaNoVirtual() == nullptr && success_ != nullptr) {
    delete success_;
  }
  success_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Task::kIdFieldNumber;
const int Task::kNameFieldNumber;
const int Task::kKindFieldNumber;
const int Task::kDescriptionFieldNumber;
const int Task::kStatusFieldNumber;
const int Task::kObjectFieldNumber;
const int Task::kBeginFieldNumber;
const int Task::kEndFieldNumber;
const int Task::kCreatedAtFieldNumber;
const int Task::kDeadlinesFieldNumber;
const int Task::kOwnerFieldNumber;
const int Task::kSuccessFieldNumber;
const int Task::kCommentFieldNumber;
const int Task::kFilesFieldNumber;
const int Task::kAssigneeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Task::Task()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.Task)
}
Task::Task(const Task& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      deadlines_(from.deadlines_),
      files_(from.files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kind().size() > 0) {
    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_id()) {
    id_ = new ::ric::tasks::TaskId(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_object()) {
    object_ = new ::ric::tasks::ObjectId(*from.object_);
  } else {
    object_ = nullptr;
  }
  if (from.has_begin()) {
    begin_ = new ::ric::tasks::Location(*from.begin_);
  } else {
    begin_ = nullptr;
  }
  if (from.has_end()) {
    end_ = new ::ric::tasks::Location(*from.end_);
  } else {
    end_ = nullptr;
  }
  if (from.has_owner()) {
    owner_ = new ::ric::tasks::ObjectId(*from.owner_);
  } else {
    owner_ = nullptr;
  }
  if (from.has_success()) {
    success_ = new ::google::protobuf::BoolValue(*from.success_);
  } else {
    success_ = nullptr;
  }
  if (from.has_assignee()) {
    assignee_ = new ::ric::tasks::ObjectId(*from.assignee_);
  } else {
    assignee_ = nullptr;
  }
  ::memcpy(&created_at_, &from.created_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:ric.tasks.Task)
}

void Task::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Task_ric_2dtasks_2frictasks_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&id_)) + sizeof(status_));
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:ric.tasks.Task)
  SharedDtor();
}

void Task::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete object_;
  if (this != internal_default_instance()) delete begin_;
  if (this != internal_default_instance()) delete end_;
  if (this != internal_default_instance()) delete owner_;
  if (this != internal_default_instance()) delete success_;
  if (this != internal_default_instance()) delete assignee_;
}

void Task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Task& Task::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Task_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deadlines_.Clear();
  files_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && begin_ != nullptr) {
    delete begin_;
  }
  begin_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && success_ != nullptr) {
    delete success_;
  }
  success_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && assignee_ != nullptr) {
    delete assignee_;
  }
  assignee_ = nullptr;
  ::memset(&created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Task::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Task*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.TaskId id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::TaskId::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.tasks.Task.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string kind = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.tasks.Task.kind");
        object = msg->mutable_kind();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string description = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.tasks.Task.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ric.tasks.Task.Status status = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_status(static_cast<::ric::tasks::Task_Status>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .ric.tasks.ObjectId object = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_object();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.Location begin = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::Location::_InternalParse;
        object = msg->mutable_begin();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.Location end = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::Location::_InternalParse;
        object = msg->mutable_end();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 created_at = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_created_at(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .ric.tasks.Deadline deadlines = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ric::tasks::Deadline::_InternalParse;
          object = msg->add_deadlines();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 82 && (ptr += 1));
        break;
      }
      // .ric.tasks.ObjectId owner = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_owner();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.BoolValue success = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::BoolValue::_InternalParse;
        object = msg->mutable_success();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string comment = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.tasks.Task.comment");
        object = msg->mutable_comment();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string files = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("ric.tasks.Task.files");
          object = msg->add_files();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 114 && (ptr += 1));
        break;
      }
      // .ric.tasks.ObjectId assignee = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_assignee();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.Task)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.TaskId id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.Task.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kind = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kind()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kind().data(), static_cast<int>(this->kind().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.Task.kind"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.Task.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.Task.Status status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ric::tasks::Task_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId object = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.Location begin = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_begin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.Location end = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 created_at = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_at_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ric.tasks.Deadline deadlines = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_deadlines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId owner = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_owner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue success = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_success()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.Task.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string files = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_files()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->files(this->files_size() - 1).data(),
            static_cast<int>(this->files(this->files_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.Task.files"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId assignee = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_assignee()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.Task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.Task)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.TaskId id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Task.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string kind = 3;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Task.kind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->kind(), output);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Task.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // .ric.tasks.Task.Status status = 5;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // .ric.tasks.ObjectId object = 6;
  if (this->has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::object(this), output);
  }

  // .ric.tasks.Location begin = 7;
  if (this->has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::begin(this), output);
  }

  // .ric.tasks.Location end = 8;
  if (this->has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::end(this), output);
  }

  // int64 created_at = 9;
  if (this->created_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->created_at(), output);
  }

  // repeated .ric.tasks.Deadline deadlines = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deadlines_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->deadlines(static_cast<int>(i)),
      output);
  }

  // .ric.tasks.ObjectId owner = 11;
  if (this->has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::owner(this), output);
  }

  // .google.protobuf.BoolValue success = 12;
  if (this->has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::success(this), output);
  }

  // string comment = 13;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Task.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->comment(), output);
  }

  // repeated string files = 14;
  for (int i = 0, n = this->files_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->files(i).data(), static_cast<int>(this->files(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Task.files");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->files(i), output);
  }

  // .ric.tasks.ObjectId assignee = 15;
  if (this->has_assignee()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::assignee(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.Task)
}

::google::protobuf::uint8* Task::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.TaskId id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Task.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string kind = 3;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Task.kind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->kind(), target);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Task.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // .ric.tasks.Task.Status status = 5;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  // .ric.tasks.ObjectId object = 6;
  if (this->has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::object(this), target);
  }

  // .ric.tasks.Location begin = 7;
  if (this->has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::begin(this), target);
  }

  // .ric.tasks.Location end = 8;
  if (this->has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::end(this), target);
  }

  // int64 created_at = 9;
  if (this->created_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->created_at(), target);
  }

  // repeated .ric.tasks.Deadline deadlines = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deadlines_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->deadlines(static_cast<int>(i)), target);
  }

  // .ric.tasks.ObjectId owner = 11;
  if (this->has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::owner(this), target);
  }

  // .google.protobuf.BoolValue success = 12;
  if (this->has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::success(this), target);
  }

  // string comment = 13;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Task.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->comment(), target);
  }

  // repeated string files = 14;
  for (int i = 0, n = this->files_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->files(i).data(), static_cast<int>(this->files(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Task.files");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->files(i), target);
  }

  // .ric.tasks.ObjectId assignee = 15;
  if (this->has_assignee()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::assignee(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.Task)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ric.tasks.Deadline deadlines = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->deadlines_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->deadlines(static_cast<int>(i)));
    }
  }

  // repeated string files = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->files_size());
  for (int i = 0, n = this->files_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->files(i));
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string kind = 3;
  if (this->kind().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kind());
  }

  // string description = 4;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string comment = 13;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // .ric.tasks.TaskId id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .ric.tasks.ObjectId object = 6;
  if (this->has_object()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *object_);
  }

  // .ric.tasks.Location begin = 7;
  if (this->has_begin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *begin_);
  }

  // .ric.tasks.Location end = 8;
  if (this->has_end()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_);
  }

  // .ric.tasks.ObjectId owner = 11;
  if (this->has_owner()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *owner_);
  }

  // .google.protobuf.BoolValue success = 12;
  if (this->has_success()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *success_);
  }

  // .ric.tasks.ObjectId assignee = 15;
  if (this->has_assignee()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *assignee_);
  }

  // int64 created_at = 9;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->created_at());
  }

  // .ric.tasks.Task.Status status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.Task)
  GOOGLE_DCHECK_NE(&from, this);
  const Task* source =
      ::google::protobuf::DynamicCastToGenerated<Task>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.Task)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.Task)
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.Task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deadlines_.MergeFrom(from.deadlines_);
  files_.MergeFrom(from.files_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.kind().size() > 0) {

    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_id()) {
    mutable_id()->::ric::tasks::TaskId::MergeFrom(from.id());
  }
  if (from.has_object()) {
    mutable_object()->::ric::tasks::ObjectId::MergeFrom(from.object());
  }
  if (from.has_begin()) {
    mutable_begin()->::ric::tasks::Location::MergeFrom(from.begin());
  }
  if (from.has_end()) {
    mutable_end()->::ric::tasks::Location::MergeFrom(from.end());
  }
  if (from.has_owner()) {
    mutable_owner()->::ric::tasks::ObjectId::MergeFrom(from.owner());
  }
  if (from.has_success()) {
    mutable_success()->::google::protobuf::BoolValue::MergeFrom(from.success());
  }
  if (from.has_assignee()) {
    mutable_assignee()->::ric::tasks::ObjectId::MergeFrom(from.assignee());
  }
  if (from.created_at() != 0) {
    set_created_at(from.created_at());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::Swap(Task* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Task::InternalSwap(Task* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&deadlines_)->InternalSwap(CastToBase(&other->deadlines_));
  files_.InternalSwap(CastToBase(&other->files_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  kind_.Swap(&other->kind_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  comment_.Swap(&other->comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(object_, other->object_);
  swap(begin_, other->begin_);
  swap(end_, other->end_);
  swap(owner_, other->owner_);
  swap(success_, other->success_);
  swap(assignee_, other->assignee_);
  swap(created_at_, other->created_at_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata Task::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Deadline::InitAsDefaultInstance() {
  ::ric::tasks::_Deadline_default_instance_._instance.get_mutable()->notify_until_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
}
class Deadline::HasBitSetters {
 public:
  static const ::google::protobuf::Int64Value& notify_until(const Deadline* msg);
};

const ::google::protobuf::Int64Value&
Deadline::HasBitSetters::notify_until(const Deadline* msg) {
  return *msg->notify_until_;
}
void Deadline::clear_notify_until() {
  if (GetArenaNoVirtual() == nullptr && notify_until_ != nullptr) {
    delete notify_until_;
  }
  notify_until_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Deadline::kTimestampFieldNumber;
const int Deadline::kNotifyUntilFieldNumber;
const int Deadline::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Deadline::Deadline()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.Deadline)
}
Deadline::Deadline(const Deadline& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_notify_until()) {
    notify_until_ = new ::google::protobuf::Int64Value(*from.notify_until_);
  } else {
    notify_until_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:ric.tasks.Deadline)
}

void Deadline::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Deadline_ric_2dtasks_2frictasks_2eproto.base);
  ::memset(&notify_until_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&notify_until_)) + sizeof(status_));
}

Deadline::~Deadline() {
  // @@protoc_insertion_point(destructor:ric.tasks.Deadline)
  SharedDtor();
}

void Deadline::SharedDtor() {
  if (this != internal_default_instance()) delete notify_until_;
}

void Deadline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Deadline& Deadline::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Deadline_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void Deadline::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.Deadline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && notify_until_ != nullptr) {
    delete notify_until_;
  }
  notify_until_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Deadline::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Deadline*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.protobuf.Int64Value notify_until = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Int64Value::_InternalParse;
        object = msg->mutable_notify_until();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.Task.Status status = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_status(static_cast<::ric::tasks::Task_Status>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Deadline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.Deadline)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value notify_until = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_notify_until()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.Task.Status status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ric::tasks::Task_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.Deadline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.Deadline)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Deadline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.Deadline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // .google.protobuf.Int64Value notify_until = 2;
  if (this->has_notify_until()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::notify_until(this), output);
  }

  // .ric.tasks.Task.Status status = 3;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.Deadline)
}

::google::protobuf::uint8* Deadline::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.Deadline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // .google.protobuf.Int64Value notify_until = 2;
  if (this->has_notify_until()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::notify_until(this), target);
  }

  // .ric.tasks.Task.Status status = 3;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.Deadline)
  return target;
}

size_t Deadline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.Deadline)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Int64Value notify_until = 2;
  if (this->has_notify_until()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *notify_until_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // .ric.tasks.Task.Status status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Deadline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.Deadline)
  GOOGLE_DCHECK_NE(&from, this);
  const Deadline* source =
      ::google::protobuf::DynamicCastToGenerated<Deadline>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.Deadline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.Deadline)
    MergeFrom(*source);
  }
}

void Deadline::MergeFrom(const Deadline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.Deadline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_notify_until()) {
    mutable_notify_until()->::google::protobuf::Int64Value::MergeFrom(from.notify_until());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Deadline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.Deadline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Deadline::CopyFrom(const Deadline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.Deadline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deadline::IsInitialized() const {
  return true;
}

void Deadline::Swap(Deadline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Deadline::InternalSwap(Deadline* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(notify_until_, other->notify_until_);
  swap(timestamp_, other->timestamp_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata Deadline::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MasterTask::InitAsDefaultInstance() {
  ::ric::tasks::_MasterTask_default_instance_._instance.get_mutable()->oid_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
  ::ric::tasks::_MasterTask_default_instance_._instance.get_mutable()->owner_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
  ::ric::tasks::_MasterTask_default_instance_._instance.get_mutable()->group_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
  ::ric::tasks::_MasterTask_default_instance_._instance.get_mutable()->object_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
}
class MasterTask::HasBitSetters {
 public:
  static const ::ric::tasks::ObjectId& oid(const MasterTask* msg);
  static const ::ric::tasks::ObjectId& owner(const MasterTask* msg);
  static const ::ric::tasks::ObjectId& group(const MasterTask* msg);
  static const ::ric::tasks::ObjectId& object(const MasterTask* msg);
};

const ::ric::tasks::ObjectId&
MasterTask::HasBitSetters::oid(const MasterTask* msg) {
  return *msg->oid_;
}
const ::ric::tasks::ObjectId&
MasterTask::HasBitSetters::owner(const MasterTask* msg) {
  return *msg->owner_;
}
const ::ric::tasks::ObjectId&
MasterTask::HasBitSetters::group(const MasterTask* msg) {
  return *msg->group_;
}
const ::ric::tasks::ObjectId&
MasterTask::HasBitSetters::object(const MasterTask* msg) {
  return *msg->object_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MasterTask::kOidFieldNumber;
const int MasterTask::kOwnerFieldNumber;
const int MasterTask::kGroupFieldNumber;
const int MasterTask::kSubtasksFieldNumber;
const int MasterTask::kConstrainFieldNumber;
const int MasterTask::kTagsFieldNumber;
const int MasterTask::kPriorityFieldNumber;
const int MasterTask::kTimeFieldNumber;
const int MasterTask::kObjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MasterTask::MasterTask()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.MasterTask)
}
MasterTask::MasterTask(const MasterTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      subtasks_(from.subtasks_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_oid()) {
    oid_ = new ::ric::tasks::ObjectId(*from.oid_);
  } else {
    oid_ = nullptr;
  }
  if (from.has_owner()) {
    owner_ = new ::ric::tasks::ObjectId(*from.owner_);
  } else {
    owner_ = nullptr;
  }
  if (from.has_group()) {
    group_ = new ::ric::tasks::ObjectId(*from.group_);
  } else {
    group_ = nullptr;
  }
  if (from.has_object()) {
    object_ = new ::ric::tasks::ObjectId(*from.object_);
  } else {
    object_ = nullptr;
  }
  ::memcpy(&constrain_, &from.constrain_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&constrain_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:ric.tasks.MasterTask)
}

void MasterTask::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MasterTask_ric_2dtasks_2frictasks_2eproto.base);
  ::memset(&oid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&oid_)) + sizeof(time_));
}

MasterTask::~MasterTask() {
  // @@protoc_insertion_point(destructor:ric.tasks.MasterTask)
  SharedDtor();
}

void MasterTask::SharedDtor() {
  if (this != internal_default_instance()) delete oid_;
  if (this != internal_default_instance()) delete owner_;
  if (this != internal_default_instance()) delete group_;
  if (this != internal_default_instance()) delete object_;
}

void MasterTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MasterTask& MasterTask::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MasterTask_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void MasterTask::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.MasterTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subtasks_.Clear();
  tags_.Clear();
  if (GetArenaNoVirtual() == nullptr && oid_ != nullptr) {
    delete oid_;
  }
  oid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  ::memset(&constrain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&constrain_)) + sizeof(time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MasterTask::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MasterTask*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.ObjectId oid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_oid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.ObjectId owner = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_owner();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.ObjectId group = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_group();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .ric.tasks.Task subtasks = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ric::tasks::Task::_InternalParse;
          object = msg->add_subtasks();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // .ric.tasks.MasterTask.Constrain constrain = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_constrain(static_cast<::ric::tasks::MasterTask_Constrain>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string tags = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("ric.tasks.MasterTask.tags");
          object = msg->add_tags();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // .ric.tasks.MasterTask.Priority priority = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_priority(static_cast<::ric::tasks::MasterTask_Priority>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 time = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .ric.tasks.ObjectId object = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_object();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MasterTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.MasterTask)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.ObjectId oid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_oid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId owner = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_owner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId group = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ric.tasks.Task subtasks = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_subtasks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.MasterTask.Constrain constrain = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_constrain(static_cast< ::ric::tasks::MasterTask_Constrain >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.MasterTask.tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.MasterTask.Priority priority = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_priority(static_cast< ::ric::tasks::MasterTask_Priority >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId object = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.MasterTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.MasterTask)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MasterTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.MasterTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.ObjectId oid = 1;
  if (this->has_oid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::oid(this), output);
  }

  // .ric.tasks.ObjectId owner = 2;
  if (this->has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::owner(this), output);
  }

  // .ric.tasks.ObjectId group = 3;
  if (this->has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::group(this), output);
  }

  // repeated .ric.tasks.Task subtasks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subtasks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->subtasks(static_cast<int>(i)),
      output);
  }

  // .ric.tasks.MasterTask.Constrain constrain = 5;
  if (this->constrain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->constrain(), output);
  }

  // repeated string tags = 6;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.MasterTask.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->tags(i), output);
  }

  // .ric.tasks.MasterTask.Priority priority = 7;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->priority(), output);
  }

  // int64 time = 8;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->time(), output);
  }

  // .ric.tasks.ObjectId object = 9;
  if (this->has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::object(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.MasterTask)
}

::google::protobuf::uint8* MasterTask::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.MasterTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.ObjectId oid = 1;
  if (this->has_oid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::oid(this), target);
  }

  // .ric.tasks.ObjectId owner = 2;
  if (this->has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::owner(this), target);
  }

  // .ric.tasks.ObjectId group = 3;
  if (this->has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::group(this), target);
  }

  // repeated .ric.tasks.Task subtasks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subtasks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->subtasks(static_cast<int>(i)), target);
  }

  // .ric.tasks.MasterTask.Constrain constrain = 5;
  if (this->constrain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->constrain(), target);
  }

  // repeated string tags = 6;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.MasterTask.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->tags(i), target);
  }

  // .ric.tasks.MasterTask.Priority priority = 7;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->priority(), target);
  }

  // int64 time = 8;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->time(), target);
  }

  // .ric.tasks.ObjectId object = 9;
  if (this->has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::object(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.MasterTask)
  return target;
}

size_t MasterTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.MasterTask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ric.tasks.Task subtasks = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->subtasks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->subtasks(static_cast<int>(i)));
    }
  }

  // repeated string tags = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // .ric.tasks.ObjectId oid = 1;
  if (this->has_oid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *oid_);
  }

  // .ric.tasks.ObjectId owner = 2;
  if (this->has_owner()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *owner_);
  }

  // .ric.tasks.ObjectId group = 3;
  if (this->has_group()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *group_);
  }

  // .ric.tasks.ObjectId object = 9;
  if (this->has_object()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *object_);
  }

  // .ric.tasks.MasterTask.Constrain constrain = 5;
  if (this->constrain() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->constrain());
  }

  // .ric.tasks.MasterTask.Priority priority = 7;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
  }

  // int64 time = 8;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MasterTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.MasterTask)
  GOOGLE_DCHECK_NE(&from, this);
  const MasterTask* source =
      ::google::protobuf::DynamicCastToGenerated<MasterTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.MasterTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.MasterTask)
    MergeFrom(*source);
  }
}

void MasterTask::MergeFrom(const MasterTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.MasterTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subtasks_.MergeFrom(from.subtasks_);
  tags_.MergeFrom(from.tags_);
  if (from.has_oid()) {
    mutable_oid()->::ric::tasks::ObjectId::MergeFrom(from.oid());
  }
  if (from.has_owner()) {
    mutable_owner()->::ric::tasks::ObjectId::MergeFrom(from.owner());
  }
  if (from.has_group()) {
    mutable_group()->::ric::tasks::ObjectId::MergeFrom(from.group());
  }
  if (from.has_object()) {
    mutable_object()->::ric::tasks::ObjectId::MergeFrom(from.object());
  }
  if (from.constrain() != 0) {
    set_constrain(from.constrain());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void MasterTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.MasterTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterTask::CopyFrom(const MasterTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.MasterTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterTask::IsInitialized() const {
  return true;
}

void MasterTask::Swap(MasterTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MasterTask::InternalSwap(MasterTask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&subtasks_)->InternalSwap(CastToBase(&other->subtasks_));
  tags_.InternalSwap(CastToBase(&other->tags_));
  swap(oid_, other->oid_);
  swap(owner_, other->owner_);
  swap(group_, other->group_);
  swap(object_, other->object_);
  swap(constrain_, other->constrain_);
  swap(priority_, other->priority_);
  swap(time_, other->time_);
}

::google::protobuf::Metadata MasterTask::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateRequest::InitAsDefaultInstance() {
  ::ric::tasks::_CreateRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::tasks::UserContext*>(
      ::ric::tasks::UserContext::internal_default_instance());
  ::ric::tasks::_CreateRequest_default_instance_._instance.get_mutable()->master_task_ = const_cast< ::ric::tasks::MasterTask*>(
      ::ric::tasks::MasterTask::internal_default_instance());
}
class CreateRequest::HasBitSetters {
 public:
  static const ::ric::tasks::UserContext& ctx(const CreateRequest* msg);
  static const ::ric::tasks::MasterTask& master_task(const CreateRequest* msg);
};

const ::ric::tasks::UserContext&
CreateRequest::HasBitSetters::ctx(const CreateRequest* msg) {
  return *msg->ctx_;
}
const ::ric::tasks::MasterTask&
CreateRequest::HasBitSetters::master_task(const CreateRequest* msg) {
  return *msg->master_task_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateRequest::kCtxFieldNumber;
const int CreateRequest::kMasterTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateRequest::CreateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.CreateRequest)
}
CreateRequest::CreateRequest(const CreateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ctx()) {
    ctx_ = new ::ric::tasks::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  if (from.has_master_task()) {
    master_task_ = new ::ric::tasks::MasterTask(*from.master_task_);
  } else {
    master_task_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.CreateRequest)
}

void CreateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::memset(&ctx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&master_task_) -
      reinterpret_cast<char*>(&ctx_)) + sizeof(master_task_));
}

CreateRequest::~CreateRequest() {
  // @@protoc_insertion_point(destructor:ric.tasks.CreateRequest)
  SharedDtor();
}

void CreateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete ctx_;
  if (this != internal_default_instance()) delete master_task_;
}

void CreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateRequest& CreateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateRequest_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void CreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.CreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && master_task_ != nullptr) {
    delete master_task_;
  }
  master_task_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.MasterTask master_task = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::MasterTask::_InternalParse;
        object = msg->mutable_master_task();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.CreateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.MasterTask master_task = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_master_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.CreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.CreateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.CreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // .ric.tasks.MasterTask master_task = 2;
  if (this->has_master_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::master_task(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.CreateRequest)
}

::google::protobuf::uint8* CreateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.CreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // .ric.tasks.MasterTask master_task = 2;
  if (this->has_master_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::master_task(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.CreateRequest)
  return target;
}

size_t CreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.CreateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  // .ric.tasks.MasterTask master_task = 2;
  if (this->has_master_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *master_task_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.CreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CreateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.CreateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.CreateRequest)
    MergeFrom(*source);
  }
}

void CreateRequest::MergeFrom(const CreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.CreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ctx()) {
    mutable_ctx()->::ric::tasks::UserContext::MergeFrom(from.ctx());
  }
  if (from.has_master_task()) {
    mutable_master_task()->::ric::tasks::MasterTask::MergeFrom(from.master_task());
  }
}

void CreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.CreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRequest::CopyFrom(const CreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.CreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRequest::IsInitialized() const {
  return true;
}

void CreateRequest::Swap(CreateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateRequest::InternalSwap(CreateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ctx_, other->ctx_);
  swap(master_task_, other->master_task_);
}

::google::protobuf::Metadata CreateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateResponse::InitAsDefaultInstance() {
  ::ric::tasks::_CreateResponse_default_instance_._instance.get_mutable()->oid_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
}
class CreateResponse::HasBitSetters {
 public:
  static const ::ric::tasks::ObjectId& oid(const CreateResponse* msg);
};

const ::ric::tasks::ObjectId&
CreateResponse::HasBitSetters::oid(const CreateResponse* msg) {
  return *msg->oid_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateResponse::kOidFieldNumber;
const int CreateResponse::kSubIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateResponse::CreateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.CreateResponse)
}
CreateResponse::CreateResponse(const CreateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      sub_ids_(from.sub_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_oid()) {
    oid_ = new ::ric::tasks::ObjectId(*from.oid_);
  } else {
    oid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.CreateResponse)
}

void CreateResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateResponse_ric_2dtasks_2frictasks_2eproto.base);
  oid_ = nullptr;
}

CreateResponse::~CreateResponse() {
  // @@protoc_insertion_point(destructor:ric.tasks.CreateResponse)
  SharedDtor();
}

void CreateResponse::SharedDtor() {
  if (this != internal_default_instance()) delete oid_;
}

void CreateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateResponse& CreateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateResponse_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void CreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.CreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && oid_ != nullptr) {
    delete oid_;
  }
  oid_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.ObjectId oid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_oid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .ric.tasks.TaskId sub_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ric::tasks::TaskId::_InternalParse;
          object = msg->add_sub_ids();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.CreateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.ObjectId oid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_oid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ric.tasks.TaskId sub_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sub_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.CreateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.CreateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.CreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.ObjectId oid = 1;
  if (this->has_oid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::oid(this), output);
  }

  // repeated .ric.tasks.TaskId sub_ids = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sub_ids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->sub_ids(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.CreateResponse)
}

::google::protobuf::uint8* CreateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.CreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.ObjectId oid = 1;
  if (this->has_oid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::oid(this), target);
  }

  // repeated .ric.tasks.TaskId sub_ids = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sub_ids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->sub_ids(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.CreateResponse)
  return target;
}

size_t CreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.CreateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ric.tasks.TaskId sub_ids = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sub_ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sub_ids(static_cast<int>(i)));
    }
  }

  // .ric.tasks.ObjectId oid = 1;
  if (this->has_oid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *oid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.CreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CreateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.CreateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.CreateResponse)
    MergeFrom(*source);
  }
}

void CreateResponse::MergeFrom(const CreateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.CreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sub_ids_.MergeFrom(from.sub_ids_);
  if (from.has_oid()) {
    mutable_oid()->::ric::tasks::ObjectId::MergeFrom(from.oid());
  }
}

void CreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.CreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateResponse::CopyFrom(const CreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.CreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateResponse::IsInitialized() const {
  return true;
}

void CreateResponse::Swap(CreateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateResponse::InternalSwap(CreateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&sub_ids_)->InternalSwap(CastToBase(&other->sub_ids_));
  swap(oid_, other->oid_);
}

::google::protobuf::Metadata CreateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetRequest::InitAsDefaultInstance() {
  ::ric::tasks::_GetRequest_default_instance_.oid_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
  ::ric::tasks::_GetRequest_default_instance_.tid_ = const_cast< ::ric::tasks::TaskId*>(
      ::ric::tasks::TaskId::internal_default_instance());
}
class GetRequest::HasBitSetters {
 public:
  static const ::ric::tasks::ObjectId& oid(const GetRequest* msg);
  static const ::ric::tasks::TaskId& tid(const GetRequest* msg);
};

const ::ric::tasks::ObjectId&
GetRequest::HasBitSetters::oid(const GetRequest* msg) {
  return *msg->payload_.oid_;
}
const ::ric::tasks::TaskId&
GetRequest::HasBitSetters::tid(const GetRequest* msg) {
  return *msg->payload_.tid_;
}
void GetRequest::set_allocated_oid(::ric::tasks::ObjectId* oid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (oid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      oid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oid, submessage_arena);
    }
    set_has_oid();
    payload_.oid_ = oid;
  }
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.GetRequest.oid)
}
void GetRequest::set_allocated_tid(::ric::tasks::TaskId* tid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (tid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tid, submessage_arena);
    }
    set_has_tid();
    payload_.tid_ = tid;
  }
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.GetRequest.tid)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRequest::kOidFieldNumber;
const int GetRequest::kTidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRequest::GetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.GetRequest)
}
GetRequest::GetRequest(const GetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kOid: {
      mutable_oid()->::ric::tasks::ObjectId::MergeFrom(from.oid());
      break;
    }
    case kTid: {
      mutable_tid()->::ric::tasks::TaskId::MergeFrom(from.tid());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.GetRequest)
}

void GetRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetRequest_ric_2dtasks_2frictasks_2eproto.base);
  clear_has_payload();
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:ric.tasks.GetRequest)
  SharedDtor();
}

void GetRequest::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void GetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRequest& GetRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetRequest_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void GetRequest::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:ric.tasks.GetRequest)
  switch (payload_case()) {
    case kOid: {
      delete payload_.oid_;
      break;
    }
    case kTid: {
      delete payload_.tid_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.GetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.ObjectId oid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_oid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.TaskId tid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::TaskId::_InternalParse;
        object = msg->mutable_tid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.GetRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.ObjectId oid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_oid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.TaskId tid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.GetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.GetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.GetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.ObjectId oid = 1;
  if (has_oid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::oid(this), output);
  }

  // .ric.tasks.TaskId tid = 2;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::tid(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.GetRequest)
}

::google::protobuf::uint8* GetRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.GetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.ObjectId oid = 1;
  if (has_oid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::oid(this), target);
  }

  // .ric.tasks.TaskId tid = 2;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::tid(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.GetRequest)
  return target;
}

size_t GetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.GetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .ric.tasks.ObjectId oid = 1;
    case kOid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.oid_);
      break;
    }
    // .ric.tasks.TaskId tid = 2;
    case kTid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.tid_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.GetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.GetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.GetRequest)
    MergeFrom(*source);
  }
}

void GetRequest::MergeFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.GetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kOid: {
      mutable_oid()->::ric::tasks::ObjectId::MergeFrom(from.oid());
      break;
    }
    case kTid: {
      mutable_tid()->::ric::tasks::TaskId::MergeFrom(from.tid());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void GetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {
  return true;
}

void GetRequest::Swap(GetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRequest::InternalSwap(GetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata GetRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetResponse::InitAsDefaultInstance() {
  ::ric::tasks::_GetResponse_default_instance_._instance.get_mutable()->master_task_ = const_cast< ::ric::tasks::MasterTask*>(
      ::ric::tasks::MasterTask::internal_default_instance());
}
class GetResponse::HasBitSetters {
 public:
  static const ::ric::tasks::MasterTask& master_task(const GetResponse* msg);
};

const ::ric::tasks::MasterTask&
GetResponse::HasBitSetters::master_task(const GetResponse* msg) {
  return *msg->master_task_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetResponse::kMasterTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetResponse::GetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.GetResponse)
}
GetResponse::GetResponse(const GetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_master_task()) {
    master_task_ = new ::ric::tasks::MasterTask(*from.master_task_);
  } else {
    master_task_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.GetResponse)
}

void GetResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetResponse_ric_2dtasks_2frictasks_2eproto.base);
  master_task_ = nullptr;
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:ric.tasks.GetResponse)
  SharedDtor();
}

void GetResponse::SharedDtor() {
  if (this != internal_default_instance()) delete master_task_;
}

void GetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetResponse& GetResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetResponse_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void GetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.GetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && master_task_ != nullptr) {
    delete master_task_;
  }
  master_task_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.MasterTask master_task = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::MasterTask::_InternalParse;
        object = msg->mutable_master_task();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.GetResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.MasterTask master_task = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_master_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.GetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.GetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.GetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.MasterTask master_task = 1;
  if (this->has_master_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::master_task(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.GetResponse)
}

::google::protobuf::uint8* GetResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.GetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.MasterTask master_task = 1;
  if (this->has_master_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::master_task(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.GetResponse)
  return target;
}

size_t GetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.GetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.tasks.MasterTask master_task = 1;
  if (this->has_master_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *master_task_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.GetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.GetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.GetResponse)
    MergeFrom(*source);
  }
}

void GetResponse::MergeFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.GetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_master_task()) {
    mutable_master_task()->::ric::tasks::MasterTask::MergeFrom(from.master_task());
  }
}

void GetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResponse::CopyFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponse::IsInitialized() const {
  return true;
}

void GetResponse::Swap(GetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetResponse::InternalSwap(GetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(master_task_, other->master_task_);
}

::google::protobuf::Metadata GetResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeleteRequest::InitAsDefaultInstance() {
  ::ric::tasks::_DeleteRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::tasks::UserContext*>(
      ::ric::tasks::UserContext::internal_default_instance());
  ::ric::tasks::_DeleteRequest_default_instance_.oid_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
  ::ric::tasks::_DeleteRequest_default_instance_.tid_ = const_cast< ::ric::tasks::TaskId*>(
      ::ric::tasks::TaskId::internal_default_instance());
}
class DeleteRequest::HasBitSetters {
 public:
  static const ::ric::tasks::UserContext& ctx(const DeleteRequest* msg);
  static const ::ric::tasks::ObjectId& oid(const DeleteRequest* msg);
  static const ::ric::tasks::TaskId& tid(const DeleteRequest* msg);
};

const ::ric::tasks::UserContext&
DeleteRequest::HasBitSetters::ctx(const DeleteRequest* msg) {
  return *msg->ctx_;
}
const ::ric::tasks::ObjectId&
DeleteRequest::HasBitSetters::oid(const DeleteRequest* msg) {
  return *msg->payload_.oid_;
}
const ::ric::tasks::TaskId&
DeleteRequest::HasBitSetters::tid(const DeleteRequest* msg) {
  return *msg->payload_.tid_;
}
void DeleteRequest::set_allocated_oid(::ric::tasks::ObjectId* oid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (oid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      oid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oid, submessage_arena);
    }
    set_has_oid();
    payload_.oid_ = oid;
  }
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.DeleteRequest.oid)
}
void DeleteRequest::set_allocated_tid(::ric::tasks::TaskId* tid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (tid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tid, submessage_arena);
    }
    set_has_tid();
    payload_.tid_ = tid;
  }
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.DeleteRequest.tid)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRequest::kCtxFieldNumber;
const int DeleteRequest::kOidFieldNumber;
const int DeleteRequest::kTidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRequest::DeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.DeleteRequest)
}
DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ctx()) {
    ctx_ = new ::ric::tasks::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  clear_has_payload();
  switch (from.payload_case()) {
    case kOid: {
      mutable_oid()->::ric::tasks::ObjectId::MergeFrom(from.oid());
      break;
    }
    case kTid: {
      mutable_tid()->::ric::tasks::TaskId::MergeFrom(from.tid());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.DeleteRequest)
}

void DeleteRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeleteRequest_ric_2dtasks_2frictasks_2eproto.base);
  ctx_ = nullptr;
  clear_has_payload();
}

DeleteRequest::~DeleteRequest() {
  // @@protoc_insertion_point(destructor:ric.tasks.DeleteRequest)
  SharedDtor();
}

void DeleteRequest::SharedDtor() {
  if (this != internal_default_instance()) delete ctx_;
  if (has_payload()) {
    clear_payload();
  }
}

void DeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteRequest& DeleteRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeleteRequest_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void DeleteRequest::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:ric.tasks.DeleteRequest)
  switch (payload_case()) {
    case kOid: {
      delete payload_.oid_;
      break;
    }
    case kTid: {
      delete payload_.tid_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void DeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.DeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  clear_payload();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeleteRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.ObjectId oid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_oid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.TaskId tid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::TaskId::_InternalParse;
        object = msg->mutable_tid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.DeleteRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId oid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_oid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.TaskId tid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.DeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.DeleteRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.DeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (has_oid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::oid(this), output);
  }

  // .ric.tasks.TaskId tid = 3;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::tid(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.DeleteRequest)
}

::google::protobuf::uint8* DeleteRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.DeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (has_oid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::oid(this), target);
  }

  // .ric.tasks.TaskId tid = 3;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::tid(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.DeleteRequest)
  return target;
}

size_t DeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.DeleteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  switch (payload_case()) {
    // .ric.tasks.ObjectId oid = 2;
    case kOid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.oid_);
      break;
    }
    // .ric.tasks.TaskId tid = 3;
    case kTid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.tid_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.DeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRequest* source =
      ::google::protobuf::DynamicCastToGenerated<DeleteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.DeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.DeleteRequest)
    MergeFrom(*source);
  }
}

void DeleteRequest::MergeFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.DeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ctx()) {
    mutable_ctx()->::ric::tasks::UserContext::MergeFrom(from.ctx());
  }
  switch (from.payload_case()) {
    case kOid: {
      mutable_oid()->::ric::tasks::ObjectId::MergeFrom(from.oid());
      break;
    }
    case kTid: {
      mutable_tid()->::ric::tasks::TaskId::MergeFrom(from.tid());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void DeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRequest::IsInitialized() const {
  return true;
}

void DeleteRequest::Swap(DeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRequest::InternalSwap(DeleteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ctx_, other->ctx_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata DeleteRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeleteResponse::InitAsDefaultInstance() {
}
class DeleteResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteResponse::DeleteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.DeleteResponse)
}
DeleteResponse::DeleteResponse(const DeleteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ric.tasks.DeleteResponse)
}

void DeleteResponse::SharedCtor() {
}

DeleteResponse::~DeleteResponse() {
  // @@protoc_insertion_point(destructor:ric.tasks.DeleteResponse)
  SharedDtor();
}

void DeleteResponse::SharedDtor() {
}

void DeleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteResponse& DeleteResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeleteResponse_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void DeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.DeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeleteResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.DeleteResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.DeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.DeleteResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.DeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.DeleteResponse)
}

::google::protobuf::uint8* DeleteResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.DeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.DeleteResponse)
  return target;
}

size_t DeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.DeleteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.DeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteResponse* source =
      ::google::protobuf::DynamicCastToGenerated<DeleteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.DeleteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.DeleteResponse)
    MergeFrom(*source);
  }
}

void DeleteResponse::MergeFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.DeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.DeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteResponse::CopyFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.DeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResponse::IsInitialized() const {
  return true;
}

void DeleteResponse::Swap(DeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteResponse::InternalSwap(DeleteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeleteResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateRequest::InitAsDefaultInstance() {
  ::ric::tasks::_UpdateRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::tasks::UserContext*>(
      ::ric::tasks::UserContext::internal_default_instance());
  ::ric::tasks::_UpdateRequest_default_instance_._instance.get_mutable()->master_task_ = const_cast< ::ric::tasks::MasterTask*>(
      ::ric::tasks::MasterTask::internal_default_instance());
}
class UpdateRequest::HasBitSetters {
 public:
  static const ::ric::tasks::UserContext& ctx(const UpdateRequest* msg);
  static const ::ric::tasks::MasterTask& master_task(const UpdateRequest* msg);
};

const ::ric::tasks::UserContext&
UpdateRequest::HasBitSetters::ctx(const UpdateRequest* msg) {
  return *msg->ctx_;
}
const ::ric::tasks::MasterTask&
UpdateRequest::HasBitSetters::master_task(const UpdateRequest* msg) {
  return *msg->master_task_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateRequest::kCtxFieldNumber;
const int UpdateRequest::kMasterTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateRequest::UpdateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.UpdateRequest)
}
UpdateRequest::UpdateRequest(const UpdateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ctx()) {
    ctx_ = new ::ric::tasks::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  if (from.has_master_task()) {
    master_task_ = new ::ric::tasks::MasterTask(*from.master_task_);
  } else {
    master_task_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.UpdateRequest)
}

void UpdateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::memset(&ctx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&master_task_) -
      reinterpret_cast<char*>(&ctx_)) + sizeof(master_task_));
}

UpdateRequest::~UpdateRequest() {
  // @@protoc_insertion_point(destructor:ric.tasks.UpdateRequest)
  SharedDtor();
}

void UpdateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete ctx_;
  if (this != internal_default_instance()) delete master_task_;
}

void UpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateRequest& UpdateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateRequest_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void UpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.UpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && master_task_ != nullptr) {
    delete master_task_;
  }
  master_task_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.MasterTask master_task = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::MasterTask::_InternalParse;
        object = msg->mutable_master_task();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.UpdateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.MasterTask master_task = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_master_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.UpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.UpdateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.UpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // .ric.tasks.MasterTask master_task = 2;
  if (this->has_master_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::master_task(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.UpdateRequest)
}

::google::protobuf::uint8* UpdateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.UpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // .ric.tasks.MasterTask master_task = 2;
  if (this->has_master_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::master_task(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.UpdateRequest)
  return target;
}

size_t UpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.UpdateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  // .ric.tasks.MasterTask master_task = 2;
  if (this->has_master_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *master_task_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.UpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.UpdateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.UpdateRequest)
    MergeFrom(*source);
  }
}

void UpdateRequest::MergeFrom(const UpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.UpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ctx()) {
    mutable_ctx()->::ric::tasks::UserContext::MergeFrom(from.ctx());
  }
  if (from.has_master_task()) {
    mutable_master_task()->::ric::tasks::MasterTask::MergeFrom(from.master_task());
  }
}

void UpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.UpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRequest::CopyFrom(const UpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.UpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRequest::IsInitialized() const {
  return true;
}

void UpdateRequest::Swap(UpdateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateRequest::InternalSwap(UpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ctx_, other->ctx_);
  swap(master_task_, other->master_task_);
}

::google::protobuf::Metadata UpdateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateResponse::InitAsDefaultInstance() {
  ::ric::tasks::_UpdateResponse_default_instance_._instance.get_mutable()->master_task_ = const_cast< ::ric::tasks::MasterTask*>(
      ::ric::tasks::MasterTask::internal_default_instance());
}
class UpdateResponse::HasBitSetters {
 public:
  static const ::ric::tasks::MasterTask& master_task(const UpdateResponse* msg);
};

const ::ric::tasks::MasterTask&
UpdateResponse::HasBitSetters::master_task(const UpdateResponse* msg) {
  return *msg->master_task_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateResponse::kMasterTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateResponse::UpdateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.UpdateResponse)
}
UpdateResponse::UpdateResponse(const UpdateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_master_task()) {
    master_task_ = new ::ric::tasks::MasterTask(*from.master_task_);
  } else {
    master_task_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.UpdateResponse)
}

void UpdateResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateResponse_ric_2dtasks_2frictasks_2eproto.base);
  master_task_ = nullptr;
}

UpdateResponse::~UpdateResponse() {
  // @@protoc_insertion_point(destructor:ric.tasks.UpdateResponse)
  SharedDtor();
}

void UpdateResponse::SharedDtor() {
  if (this != internal_default_instance()) delete master_task_;
}

void UpdateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateResponse& UpdateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateResponse_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void UpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.UpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && master_task_ != nullptr) {
    delete master_task_;
  }
  master_task_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.MasterTask master_task = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::MasterTask::_InternalParse;
        object = msg->mutable_master_task();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.UpdateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.MasterTask master_task = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_master_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.UpdateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.UpdateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.UpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.MasterTask master_task = 1;
  if (this->has_master_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::master_task(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.UpdateResponse)
}

::google::protobuf::uint8* UpdateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.UpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.MasterTask master_task = 1;
  if (this->has_master_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::master_task(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.UpdateResponse)
  return target;
}

size_t UpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.UpdateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.tasks.MasterTask master_task = 1;
  if (this->has_master_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *master_task_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.UpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.UpdateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.UpdateResponse)
    MergeFrom(*source);
  }
}

void UpdateResponse::MergeFrom(const UpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.UpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_master_task()) {
    mutable_master_task()->::ric::tasks::MasterTask::MergeFrom(from.master_task());
  }
}

void UpdateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.UpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateResponse::CopyFrom(const UpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.UpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateResponse::IsInitialized() const {
  return true;
}

void UpdateResponse::Swap(UpdateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateResponse::InternalSwap(UpdateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(master_task_, other->master_task_);
}

::google::protobuf::Metadata UpdateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

UpdateOrderRequest_PositionsEntry_DoNotUse::UpdateOrderRequest_PositionsEntry_DoNotUse() {}
UpdateOrderRequest_PositionsEntry_DoNotUse::UpdateOrderRequest_PositionsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void UpdateOrderRequest_PositionsEntry_DoNotUse::MergeFrom(const UpdateOrderRequest_PositionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata UpdateOrderRequest_PositionsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[16];
}
void UpdateOrderRequest_PositionsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateOrderRequest_PositionsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      UpdateOrderRequest_PositionsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "ric.tasks.UpdateOrderRequest.PositionsEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void UpdateOrderRequest::InitAsDefaultInstance() {
  ::ric::tasks::_UpdateOrderRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::tasks::UserContext*>(
      ::ric::tasks::UserContext::internal_default_instance());
  ::ric::tasks::_UpdateOrderRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
}
class UpdateOrderRequest::HasBitSetters {
 public:
  static const ::ric::tasks::UserContext& ctx(const UpdateOrderRequest* msg);
  static const ::ric::tasks::ObjectId& id(const UpdateOrderRequest* msg);
};

const ::ric::tasks::UserContext&
UpdateOrderRequest::HasBitSetters::ctx(const UpdateOrderRequest* msg) {
  return *msg->ctx_;
}
const ::ric::tasks::ObjectId&
UpdateOrderRequest::HasBitSetters::id(const UpdateOrderRequest* msg) {
  return *msg->id_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateOrderRequest::kCtxFieldNumber;
const int UpdateOrderRequest::kIdFieldNumber;
const int UpdateOrderRequest::kPositionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateOrderRequest::UpdateOrderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.UpdateOrderRequest)
}
UpdateOrderRequest::UpdateOrderRequest(const UpdateOrderRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  positions_.MergeFrom(from.positions_);
  if (from.has_ctx()) {
    ctx_ = new ::ric::tasks::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  if (from.has_id()) {
    id_ = new ::ric::tasks::ObjectId(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.UpdateOrderRequest)
}

void UpdateOrderRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateOrderRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::memset(&ctx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&ctx_)) + sizeof(id_));
}

UpdateOrderRequest::~UpdateOrderRequest() {
  // @@protoc_insertion_point(destructor:ric.tasks.UpdateOrderRequest)
  SharedDtor();
}

void UpdateOrderRequest::SharedDtor() {
  if (this != internal_default_instance()) delete ctx_;
  if (this != internal_default_instance()) delete id_;
}

void UpdateOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateOrderRequest& UpdateOrderRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateOrderRequest_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void UpdateOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.UpdateOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positions_.Clear();
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateOrderRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateOrderRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.ObjectId id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // map<string, int32> positions = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::ric::tasks::UpdateOrderRequest_PositionsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->positions_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateOrderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.UpdateOrderRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int32> positions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          UpdateOrderRequest_PositionsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              UpdateOrderRequest_PositionsEntry_DoNotUse,
              ::std::string, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 > > parser(&positions_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.UpdateOrderRequest.PositionsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.UpdateOrderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.UpdateOrderRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateOrderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.UpdateOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // .ric.tasks.ObjectId id = 2;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::id(this), output);
  }

  // map<string, int32> positions = 3;
  if (!this->positions().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ric.tasks.UpdateOrderRequest.PositionsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->positions().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->positions().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->positions().begin();
          it != this->positions().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<UpdateOrderRequest_PositionsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(positions_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<UpdateOrderRequest_PositionsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->positions().begin();
          it != this->positions().end(); ++it) {
        entry.reset(positions_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.UpdateOrderRequest)
}

::google::protobuf::uint8* UpdateOrderRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.UpdateOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // .ric.tasks.ObjectId id = 2;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::id(this), target);
  }

  // map<string, int32> positions = 3;
  if (!this->positions().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ric.tasks.UpdateOrderRequest.PositionsEntry.key");
      }
    };

    if (false &&
        this->positions().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->positions().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->positions().begin();
          it != this->positions().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<UpdateOrderRequest_PositionsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(positions_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<UpdateOrderRequest_PositionsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->positions().begin();
          it != this->positions().end(); ++it) {
        entry.reset(positions_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.UpdateOrderRequest)
  return target;
}

size_t UpdateOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.UpdateOrderRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> positions = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->positions_size());
  {
    ::std::unique_ptr<UpdateOrderRequest_PositionsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
        it = this->positions().begin();
        it != this->positions().end(); ++it) {
      entry.reset(positions_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  // .ric.tasks.ObjectId id = 2;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateOrderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.UpdateOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateOrderRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.UpdateOrderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.UpdateOrderRequest)
    MergeFrom(*source);
  }
}

void UpdateOrderRequest::MergeFrom(const UpdateOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.UpdateOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  positions_.MergeFrom(from.positions_);
  if (from.has_ctx()) {
    mutable_ctx()->::ric::tasks::UserContext::MergeFrom(from.ctx());
  }
  if (from.has_id()) {
    mutable_id()->::ric::tasks::ObjectId::MergeFrom(from.id());
  }
}

void UpdateOrderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.UpdateOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateOrderRequest::CopyFrom(const UpdateOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.UpdateOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateOrderRequest::IsInitialized() const {
  return true;
}

void UpdateOrderRequest::Swap(UpdateOrderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateOrderRequest::InternalSwap(UpdateOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  positions_.Swap(&other->positions_);
  swap(ctx_, other->ctx_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata UpdateOrderRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateOrderResponse::InitAsDefaultInstance() {
}
class UpdateOrderResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateOrderResponse::UpdateOrderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.UpdateOrderResponse)
}
UpdateOrderResponse::UpdateOrderResponse(const UpdateOrderResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ric.tasks.UpdateOrderResponse)
}

void UpdateOrderResponse::SharedCtor() {
}

UpdateOrderResponse::~UpdateOrderResponse() {
  // @@protoc_insertion_point(destructor:ric.tasks.UpdateOrderResponse)
  SharedDtor();
}

void UpdateOrderResponse::SharedDtor() {
}

void UpdateOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateOrderResponse& UpdateOrderResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateOrderResponse_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void UpdateOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.UpdateOrderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateOrderResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateOrderResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateOrderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.UpdateOrderResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.UpdateOrderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.UpdateOrderResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateOrderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.UpdateOrderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.UpdateOrderResponse)
}

::google::protobuf::uint8* UpdateOrderResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.UpdateOrderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.UpdateOrderResponse)
  return target;
}

size_t UpdateOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.UpdateOrderResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateOrderResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.UpdateOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateOrderResponse* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.UpdateOrderResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.UpdateOrderResponse)
    MergeFrom(*source);
  }
}

void UpdateOrderResponse::MergeFrom(const UpdateOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.UpdateOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateOrderResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.UpdateOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateOrderResponse::CopyFrom(const UpdateOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.UpdateOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateOrderResponse::IsInitialized() const {
  return true;
}

void UpdateOrderResponse::Swap(UpdateOrderResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateOrderResponse::InternalSwap(UpdateOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UpdateOrderResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ChangeStatusRequest::InitAsDefaultInstance() {
  ::ric::tasks::_ChangeStatusRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::tasks::UserContext*>(
      ::ric::tasks::UserContext::internal_default_instance());
  ::ric::tasks::_ChangeStatusRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::ric::tasks::TaskId*>(
      ::ric::tasks::TaskId::internal_default_instance());
  ::ric::tasks::_ChangeStatusRequest_default_instance_._instance.get_mutable()->location_ = const_cast< ::ric::tasks::Location*>(
      ::ric::tasks::Location::internal_default_instance());
  ::ric::tasks::_ChangeStatusRequest_default_instance_._instance.get_mutable()->success_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
}
class ChangeStatusRequest::HasBitSetters {
 public:
  static const ::ric::tasks::UserContext& ctx(const ChangeStatusRequest* msg);
  static const ::ric::tasks::TaskId& id(const ChangeStatusRequest* msg);
  static const ::ric::tasks::Location& location(const ChangeStatusRequest* msg);
  static const ::google::protobuf::BoolValue& success(const ChangeStatusRequest* msg);
};

const ::ric::tasks::UserContext&
ChangeStatusRequest::HasBitSetters::ctx(const ChangeStatusRequest* msg) {
  return *msg->ctx_;
}
const ::ric::tasks::TaskId&
ChangeStatusRequest::HasBitSetters::id(const ChangeStatusRequest* msg) {
  return *msg->id_;
}
const ::ric::tasks::Location&
ChangeStatusRequest::HasBitSetters::location(const ChangeStatusRequest* msg) {
  return *msg->location_;
}
const ::google::protobuf::BoolValue&
ChangeStatusRequest::HasBitSetters::success(const ChangeStatusRequest* msg) {
  return *msg->success_;
}
void ChangeStatusRequest::clear_success() {
  if (GetArenaNoVirtual() == nullptr && success_ != nullptr) {
    delete success_;
  }
  success_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeStatusRequest::kCtxFieldNumber;
const int ChangeStatusRequest::kIdFieldNumber;
const int ChangeStatusRequest::kNewStatusFieldNumber;
const int ChangeStatusRequest::kLocationFieldNumber;
const int ChangeStatusRequest::kSuccessFieldNumber;
const int ChangeStatusRequest::kCommentFieldNumber;
const int ChangeStatusRequest::kFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeStatusRequest::ChangeStatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.ChangeStatusRequest)
}
ChangeStatusRequest::ChangeStatusRequest(const ChangeStatusRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      files_(from.files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_ctx()) {
    ctx_ = new ::ric::tasks::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  if (from.has_id()) {
    id_ = new ::ric::tasks::TaskId(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_location()) {
    location_ = new ::ric::tasks::Location(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from.has_success()) {
    success_ = new ::google::protobuf::BoolValue(*from.success_);
  } else {
    success_ = nullptr;
  }
  new_status_ = from.new_status_;
  // @@protoc_insertion_point(copy_constructor:ric.tasks.ChangeStatusRequest)
}

void ChangeStatusRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ChangeStatusRequest_ric_2dtasks_2frictasks_2eproto.base);
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ctx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_status_) -
      reinterpret_cast<char*>(&ctx_)) + sizeof(new_status_));
}

ChangeStatusRequest::~ChangeStatusRequest() {
  // @@protoc_insertion_point(destructor:ric.tasks.ChangeStatusRequest)
  SharedDtor();
}

void ChangeStatusRequest::SharedDtor() {
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ctx_;
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete success_;
}

void ChangeStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeStatusRequest& ChangeStatusRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ChangeStatusRequest_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void ChangeStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.ChangeStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && success_ != nullptr) {
    delete success_;
  }
  success_ = nullptr;
  new_status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChangeStatusRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ChangeStatusRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.TaskId id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::TaskId::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.Task.Status new_status = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_new_status(static_cast<::ric::tasks::Task_Status>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .ric.tasks.Location location = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::Location::_InternalParse;
        object = msg->mutable_location();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.BoolValue success = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::BoolValue::_InternalParse;
        object = msg->mutable_success();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string comment = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.tasks.ChangeStatusRequest.comment");
        object = msg->mutable_comment();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string files = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("ric.tasks.ChangeStatusRequest.files");
          object = msg->add_files();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChangeStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.ChangeStatusRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.TaskId id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.Task.Status new_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_new_status(static_cast< ::ric::tasks::Task_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.Location location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue success = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_success()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.ChangeStatusRequest.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string files = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_files()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->files(this->files_size() - 1).data(),
            static_cast<int>(this->files(this->files_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.ChangeStatusRequest.files"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.ChangeStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.ChangeStatusRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChangeStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.ChangeStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // .ric.tasks.TaskId id = 2;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::id(this), output);
  }

  // .ric.tasks.Task.Status new_status = 3;
  if (this->new_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->new_status(), output);
  }

  // .ric.tasks.Location location = 4;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::location(this), output);
  }

  // .google.protobuf.BoolValue success = 5;
  if (this->has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::success(this), output);
  }

  // string comment = 6;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.ChangeStatusRequest.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->comment(), output);
  }

  // repeated string files = 7;
  for (int i = 0, n = this->files_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->files(i).data(), static_cast<int>(this->files(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.ChangeStatusRequest.files");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->files(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.ChangeStatusRequest)
}

::google::protobuf::uint8* ChangeStatusRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.ChangeStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // .ric.tasks.TaskId id = 2;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::id(this), target);
  }

  // .ric.tasks.Task.Status new_status = 3;
  if (this->new_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->new_status(), target);
  }

  // .ric.tasks.Location location = 4;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::location(this), target);
  }

  // .google.protobuf.BoolValue success = 5;
  if (this->has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::success(this), target);
  }

  // string comment = 6;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.ChangeStatusRequest.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->comment(), target);
  }

  // repeated string files = 7;
  for (int i = 0, n = this->files_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->files(i).data(), static_cast<int>(this->files(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.ChangeStatusRequest.files");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->files(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.ChangeStatusRequest)
  return target;
}

size_t ChangeStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.ChangeStatusRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string files = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->files_size());
  for (int i = 0, n = this->files_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->files(i));
  }

  // string comment = 6;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  // .ric.tasks.TaskId id = 2;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .ric.tasks.Location location = 4;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .google.protobuf.BoolValue success = 5;
  if (this->has_success()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *success_);
  }

  // .ric.tasks.Task.Status new_status = 3;
  if (this->new_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->new_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.ChangeStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeStatusRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ChangeStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.ChangeStatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.ChangeStatusRequest)
    MergeFrom(*source);
  }
}

void ChangeStatusRequest::MergeFrom(const ChangeStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.ChangeStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_ctx()) {
    mutable_ctx()->::ric::tasks::UserContext::MergeFrom(from.ctx());
  }
  if (from.has_id()) {
    mutable_id()->::ric::tasks::TaskId::MergeFrom(from.id());
  }
  if (from.has_location()) {
    mutable_location()->::ric::tasks::Location::MergeFrom(from.location());
  }
  if (from.has_success()) {
    mutable_success()->::google::protobuf::BoolValue::MergeFrom(from.success());
  }
  if (from.new_status() != 0) {
    set_new_status(from.new_status());
  }
}

void ChangeStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.ChangeStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeStatusRequest::CopyFrom(const ChangeStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.ChangeStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeStatusRequest::IsInitialized() const {
  return true;
}

void ChangeStatusRequest::Swap(ChangeStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeStatusRequest::InternalSwap(ChangeStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  files_.InternalSwap(CastToBase(&other->files_));
  comment_.Swap(&other->comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ctx_, other->ctx_);
  swap(id_, other->id_);
  swap(location_, other->location_);
  swap(success_, other->success_);
  swap(new_status_, other->new_status_);
}

::google::protobuf::Metadata ChangeStatusRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ChangeStatusResponse::InitAsDefaultInstance() {
}
class ChangeStatusResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeStatusResponse::ChangeStatusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.ChangeStatusResponse)
}
ChangeStatusResponse::ChangeStatusResponse(const ChangeStatusResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ric.tasks.ChangeStatusResponse)
}

void ChangeStatusResponse::SharedCtor() {
}

ChangeStatusResponse::~ChangeStatusResponse() {
  // @@protoc_insertion_point(destructor:ric.tasks.ChangeStatusResponse)
  SharedDtor();
}

void ChangeStatusResponse::SharedDtor() {
}

void ChangeStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeStatusResponse& ChangeStatusResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ChangeStatusResponse_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void ChangeStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.ChangeStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChangeStatusResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ChangeStatusResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChangeStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.ChangeStatusResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.ChangeStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.ChangeStatusResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChangeStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.ChangeStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.ChangeStatusResponse)
}

::google::protobuf::uint8* ChangeStatusResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.ChangeStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.ChangeStatusResponse)
  return target;
}

size_t ChangeStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.ChangeStatusResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.ChangeStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeStatusResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ChangeStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.ChangeStatusResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.ChangeStatusResponse)
    MergeFrom(*source);
  }
}

void ChangeStatusResponse::MergeFrom(const ChangeStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.ChangeStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChangeStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.ChangeStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeStatusResponse::CopyFrom(const ChangeStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.ChangeStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeStatusResponse::IsInitialized() const {
  return true;
}

void ChangeStatusResponse::Swap(ChangeStatusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeStatusResponse::InternalSwap(ChangeStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChangeStatusResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tasks
}  // namespace ric
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::ric::tasks::UserContext* Arena::CreateMaybeMessage< ::ric::tasks::UserContext >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::UserContext >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::ObjectId* Arena::CreateMaybeMessage< ::ric::tasks::ObjectId >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::ObjectId >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::TaskId* Arena::CreateMaybeMessage< ::ric::tasks::TaskId >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::TaskId >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::Location* Arena::CreateMaybeMessage< ::ric::tasks::Location >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::IndoorLocation* Arena::CreateMaybeMessage< ::ric::tasks::IndoorLocation >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::IndoorLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::Task* Arena::CreateMaybeMessage< ::ric::tasks::Task >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::Task >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::Deadline* Arena::CreateMaybeMessage< ::ric::tasks::Deadline >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::Deadline >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::MasterTask* Arena::CreateMaybeMessage< ::ric::tasks::MasterTask >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::MasterTask >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::CreateRequest* Arena::CreateMaybeMessage< ::ric::tasks::CreateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::CreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::CreateResponse* Arena::CreateMaybeMessage< ::ric::tasks::CreateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::CreateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::GetRequest* Arena::CreateMaybeMessage< ::ric::tasks::GetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::GetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::GetResponse* Arena::CreateMaybeMessage< ::ric::tasks::GetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::GetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::DeleteRequest* Arena::CreateMaybeMessage< ::ric::tasks::DeleteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::DeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::DeleteResponse* Arena::CreateMaybeMessage< ::ric::tasks::DeleteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::DeleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::UpdateRequest* Arena::CreateMaybeMessage< ::ric::tasks::UpdateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::UpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::UpdateResponse* Arena::CreateMaybeMessage< ::ric::tasks::UpdateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::UpdateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::UpdateOrderRequest_PositionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ric::tasks::UpdateOrderRequest_PositionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::UpdateOrderRequest_PositionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::UpdateOrderRequest* Arena::CreateMaybeMessage< ::ric::tasks::UpdateOrderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::UpdateOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::UpdateOrderResponse* Arena::CreateMaybeMessage< ::ric::tasks::UpdateOrderResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::UpdateOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::ChangeStatusRequest* Arena::CreateMaybeMessage< ::ric::tasks::ChangeStatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::ChangeStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::ChangeStatusResponse* Arena::CreateMaybeMessage< ::ric::tasks::ChangeStatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::ChangeStatusResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
