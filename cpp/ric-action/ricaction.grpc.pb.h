// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ric-action/ricaction.proto
#ifndef GRPC_ric_2daction_2fricaction_2eproto__INCLUDED
#define GRPC_ric_2daction_2fricaction_2eproto__INCLUDED

#include "ric-action/ricaction.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace ric {
namespace action {

class FunctionControl final {
 public:
  static constexpr char const* service_full_name() {
    return "ric.action.FunctionControl";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Call(::grpc::ClientContext* context, const ::ric::action::CallRequest& request, ::ric::action::CallResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::CallResponse>> AsyncCall(::grpc::ClientContext* context, const ::ric::action::CallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::CallResponse>>(AsyncCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::CallResponse>> PrepareAsyncCall(::grpc::ClientContext* context, const ::ric::action::CallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::CallResponse>>(PrepareAsyncCallRaw(context, request, cq));
    }
    virtual ::grpc::Status Scale(::grpc::ClientContext* context, const ::ric::action::ScaleRequest& request, ::ric::action::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::EmptyResponse>> AsyncScale(::grpc::ClientContext* context, const ::ric::action::ScaleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::EmptyResponse>>(AsyncScaleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::EmptyResponse>> PrepareAsyncScale(::grpc::ClientContext* context, const ::ric::action::ScaleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::EmptyResponse>>(PrepareAsyncScaleRaw(context, request, cq));
    }
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::ric::action::DeleteRequest& request, ::ric::action::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::EmptyResponse>> AsyncDelete(::grpc::ClientContext* context, const ::ric::action::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::EmptyResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::EmptyResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::ric::action::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::EmptyResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateOrDeploy(::grpc::ClientContext* context, const ::ric::action::UpdateOrDeployRequest& request, ::ric::action::UpdateOrDeployResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::UpdateOrDeployResponse>> AsyncUpdateOrDeploy(::grpc::ClientContext* context, const ::ric::action::UpdateOrDeployRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::UpdateOrDeployResponse>>(AsyncUpdateOrDeployRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::UpdateOrDeployResponse>> PrepareAsyncUpdateOrDeploy(::grpc::ClientContext* context, const ::ric::action::UpdateOrDeployRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::UpdateOrDeployResponse>>(PrepareAsyncUpdateOrDeployRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::ric::action::LogsResponse>> Logs(::grpc::ClientContext* context, const ::ric::action::LogsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::ric::action::LogsResponse>>(LogsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ric::action::LogsResponse>> AsyncLogs(::grpc::ClientContext* context, const ::ric::action::LogsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ric::action::LogsResponse>>(AsyncLogsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ric::action::LogsResponse>> PrepareAsyncLogs(::grpc::ClientContext* context, const ::ric::action::LogsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ric::action::LogsResponse>>(PrepareAsyncLogsRaw(context, request, cq));
    }
    virtual ::grpc::Status Info(::grpc::ClientContext* context, const ::ric::action::InfoRequest& request, ::ric::action::InfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::InfoResponse>> AsyncInfo(::grpc::ClientContext* context, const ::ric::action::InfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::InfoResponse>>(AsyncInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::InfoResponse>> PrepareAsyncInfo(::grpc::ClientContext* context, const ::ric::action::InfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::InfoResponse>>(PrepareAsyncInfoRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Call(::grpc::ClientContext* context, const ::ric::action::CallRequest* request, ::ric::action::CallResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Call(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::CallResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Call(::grpc::ClientContext* context, const ::ric::action::CallRequest* request, ::ric::action::CallResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Call(::grpc::ClientContext* context, const ::ric::action::CallRequest* request, ::ric::action::CallResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Call(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::CallResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Call(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::CallResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Scale(::grpc::ClientContext* context, const ::ric::action::ScaleRequest* request, ::ric::action::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Scale(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Scale(::grpc::ClientContext* context, const ::ric::action::ScaleRequest* request, ::ric::action::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Scale(::grpc::ClientContext* context, const ::ric::action::ScaleRequest* request, ::ric::action::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Scale(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Scale(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Delete(::grpc::ClientContext* context, const ::ric::action::DeleteRequest* request, ::ric::action::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Delete(::grpc::ClientContext* context, const ::ric::action::DeleteRequest* request, ::ric::action::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Delete(::grpc::ClientContext* context, const ::ric::action::DeleteRequest* request, ::ric::action::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void UpdateOrDeploy(::grpc::ClientContext* context, const ::ric::action::UpdateOrDeployRequest* request, ::ric::action::UpdateOrDeployResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateOrDeploy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::UpdateOrDeployResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateOrDeploy(::grpc::ClientContext* context, const ::ric::action::UpdateOrDeployRequest* request, ::ric::action::UpdateOrDeployResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateOrDeploy(::grpc::ClientContext* context, const ::ric::action::UpdateOrDeployRequest* request, ::ric::action::UpdateOrDeployResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateOrDeploy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::UpdateOrDeployResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateOrDeploy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::UpdateOrDeployResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Logs(::grpc::ClientContext* context, ::ric::action::LogsRequest* request, ::grpc::ClientReadReactor< ::ric::action::LogsResponse>* reactor) = 0;
      #else
      virtual void Logs(::grpc::ClientContext* context, ::ric::action::LogsRequest* request, ::grpc::experimental::ClientReadReactor< ::ric::action::LogsResponse>* reactor) = 0;
      #endif
      virtual void Info(::grpc::ClientContext* context, const ::ric::action::InfoRequest* request, ::ric::action::InfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Info(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::InfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Info(::grpc::ClientContext* context, const ::ric::action::InfoRequest* request, ::ric::action::InfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Info(::grpc::ClientContext* context, const ::ric::action::InfoRequest* request, ::ric::action::InfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Info(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::InfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Info(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::InfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::CallResponse>* AsyncCallRaw(::grpc::ClientContext* context, const ::ric::action::CallRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::CallResponse>* PrepareAsyncCallRaw(::grpc::ClientContext* context, const ::ric::action::CallRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::EmptyResponse>* AsyncScaleRaw(::grpc::ClientContext* context, const ::ric::action::ScaleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::EmptyResponse>* PrepareAsyncScaleRaw(::grpc::ClientContext* context, const ::ric::action::ScaleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::EmptyResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::ric::action::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::EmptyResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::ric::action::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::UpdateOrDeployResponse>* AsyncUpdateOrDeployRaw(::grpc::ClientContext* context, const ::ric::action::UpdateOrDeployRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::UpdateOrDeployResponse>* PrepareAsyncUpdateOrDeployRaw(::grpc::ClientContext* context, const ::ric::action::UpdateOrDeployRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::ric::action::LogsResponse>* LogsRaw(::grpc::ClientContext* context, const ::ric::action::LogsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ric::action::LogsResponse>* AsyncLogsRaw(::grpc::ClientContext* context, const ::ric::action::LogsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ric::action::LogsResponse>* PrepareAsyncLogsRaw(::grpc::ClientContext* context, const ::ric::action::LogsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::InfoResponse>* AsyncInfoRaw(::grpc::ClientContext* context, const ::ric::action::InfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::InfoResponse>* PrepareAsyncInfoRaw(::grpc::ClientContext* context, const ::ric::action::InfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Call(::grpc::ClientContext* context, const ::ric::action::CallRequest& request, ::ric::action::CallResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::action::CallResponse>> AsyncCall(::grpc::ClientContext* context, const ::ric::action::CallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::action::CallResponse>>(AsyncCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::action::CallResponse>> PrepareAsyncCall(::grpc::ClientContext* context, const ::ric::action::CallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::action::CallResponse>>(PrepareAsyncCallRaw(context, request, cq));
    }
    ::grpc::Status Scale(::grpc::ClientContext* context, const ::ric::action::ScaleRequest& request, ::ric::action::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::action::EmptyResponse>> AsyncScale(::grpc::ClientContext* context, const ::ric::action::ScaleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::action::EmptyResponse>>(AsyncScaleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::action::EmptyResponse>> PrepareAsyncScale(::grpc::ClientContext* context, const ::ric::action::ScaleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::action::EmptyResponse>>(PrepareAsyncScaleRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::ric::action::DeleteRequest& request, ::ric::action::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::action::EmptyResponse>> AsyncDelete(::grpc::ClientContext* context, const ::ric::action::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::action::EmptyResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::action::EmptyResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::ric::action::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::action::EmptyResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    ::grpc::Status UpdateOrDeploy(::grpc::ClientContext* context, const ::ric::action::UpdateOrDeployRequest& request, ::ric::action::UpdateOrDeployResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::action::UpdateOrDeployResponse>> AsyncUpdateOrDeploy(::grpc::ClientContext* context, const ::ric::action::UpdateOrDeployRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::action::UpdateOrDeployResponse>>(AsyncUpdateOrDeployRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::action::UpdateOrDeployResponse>> PrepareAsyncUpdateOrDeploy(::grpc::ClientContext* context, const ::ric::action::UpdateOrDeployRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::action::UpdateOrDeployResponse>>(PrepareAsyncUpdateOrDeployRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::ric::action::LogsResponse>> Logs(::grpc::ClientContext* context, const ::ric::action::LogsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::ric::action::LogsResponse>>(LogsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ric::action::LogsResponse>> AsyncLogs(::grpc::ClientContext* context, const ::ric::action::LogsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ric::action::LogsResponse>>(AsyncLogsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ric::action::LogsResponse>> PrepareAsyncLogs(::grpc::ClientContext* context, const ::ric::action::LogsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ric::action::LogsResponse>>(PrepareAsyncLogsRaw(context, request, cq));
    }
    ::grpc::Status Info(::grpc::ClientContext* context, const ::ric::action::InfoRequest& request, ::ric::action::InfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::action::InfoResponse>> AsyncInfo(::grpc::ClientContext* context, const ::ric::action::InfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::action::InfoResponse>>(AsyncInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::action::InfoResponse>> PrepareAsyncInfo(::grpc::ClientContext* context, const ::ric::action::InfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::action::InfoResponse>>(PrepareAsyncInfoRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Call(::grpc::ClientContext* context, const ::ric::action::CallRequest* request, ::ric::action::CallResponse* response, std::function<void(::grpc::Status)>) override;
      void Call(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::CallResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Call(::grpc::ClientContext* context, const ::ric::action::CallRequest* request, ::ric::action::CallResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Call(::grpc::ClientContext* context, const ::ric::action::CallRequest* request, ::ric::action::CallResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Call(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::CallResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Call(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::CallResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Scale(::grpc::ClientContext* context, const ::ric::action::ScaleRequest* request, ::ric::action::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void Scale(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Scale(::grpc::ClientContext* context, const ::ric::action::ScaleRequest* request, ::ric::action::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Scale(::grpc::ClientContext* context, const ::ric::action::ScaleRequest* request, ::ric::action::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Scale(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Scale(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Delete(::grpc::ClientContext* context, const ::ric::action::DeleteRequest* request, ::ric::action::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Delete(::grpc::ClientContext* context, const ::ric::action::DeleteRequest* request, ::ric::action::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Delete(::grpc::ClientContext* context, const ::ric::action::DeleteRequest* request, ::ric::action::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateOrDeploy(::grpc::ClientContext* context, const ::ric::action::UpdateOrDeployRequest* request, ::ric::action::UpdateOrDeployResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateOrDeploy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::UpdateOrDeployResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateOrDeploy(::grpc::ClientContext* context, const ::ric::action::UpdateOrDeployRequest* request, ::ric::action::UpdateOrDeployResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateOrDeploy(::grpc::ClientContext* context, const ::ric::action::UpdateOrDeployRequest* request, ::ric::action::UpdateOrDeployResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateOrDeploy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::UpdateOrDeployResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateOrDeploy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::UpdateOrDeployResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Logs(::grpc::ClientContext* context, ::ric::action::LogsRequest* request, ::grpc::ClientReadReactor< ::ric::action::LogsResponse>* reactor) override;
      #else
      void Logs(::grpc::ClientContext* context, ::ric::action::LogsRequest* request, ::grpc::experimental::ClientReadReactor< ::ric::action::LogsResponse>* reactor) override;
      #endif
      void Info(::grpc::ClientContext* context, const ::ric::action::InfoRequest* request, ::ric::action::InfoResponse* response, std::function<void(::grpc::Status)>) override;
      void Info(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::InfoResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Info(::grpc::ClientContext* context, const ::ric::action::InfoRequest* request, ::ric::action::InfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Info(::grpc::ClientContext* context, const ::ric::action::InfoRequest* request, ::ric::action::InfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Info(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::InfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Info(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::InfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ric::action::CallResponse>* AsyncCallRaw(::grpc::ClientContext* context, const ::ric::action::CallRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::action::CallResponse>* PrepareAsyncCallRaw(::grpc::ClientContext* context, const ::ric::action::CallRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::action::EmptyResponse>* AsyncScaleRaw(::grpc::ClientContext* context, const ::ric::action::ScaleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::action::EmptyResponse>* PrepareAsyncScaleRaw(::grpc::ClientContext* context, const ::ric::action::ScaleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::action::EmptyResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::ric::action::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::action::EmptyResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::ric::action::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::action::UpdateOrDeployResponse>* AsyncUpdateOrDeployRaw(::grpc::ClientContext* context, const ::ric::action::UpdateOrDeployRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::action::UpdateOrDeployResponse>* PrepareAsyncUpdateOrDeployRaw(::grpc::ClientContext* context, const ::ric::action::UpdateOrDeployRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::ric::action::LogsResponse>* LogsRaw(::grpc::ClientContext* context, const ::ric::action::LogsRequest& request) override;
    ::grpc::ClientAsyncReader< ::ric::action::LogsResponse>* AsyncLogsRaw(::grpc::ClientContext* context, const ::ric::action::LogsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::ric::action::LogsResponse>* PrepareAsyncLogsRaw(::grpc::ClientContext* context, const ::ric::action::LogsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::action::InfoResponse>* AsyncInfoRaw(::grpc::ClientContext* context, const ::ric::action::InfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::action::InfoResponse>* PrepareAsyncInfoRaw(::grpc::ClientContext* context, const ::ric::action::InfoRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Call_;
    const ::grpc::internal::RpcMethod rpcmethod_Scale_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateOrDeploy_;
    const ::grpc::internal::RpcMethod rpcmethod_Logs_;
    const ::grpc::internal::RpcMethod rpcmethod_Info_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Call(::grpc::ServerContext* context, const ::ric::action::CallRequest* request, ::ric::action::CallResponse* response);
    virtual ::grpc::Status Scale(::grpc::ServerContext* context, const ::ric::action::ScaleRequest* request, ::ric::action::EmptyResponse* response);
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::ric::action::DeleteRequest* request, ::ric::action::EmptyResponse* response);
    virtual ::grpc::Status UpdateOrDeploy(::grpc::ServerContext* context, const ::ric::action::UpdateOrDeployRequest* request, ::ric::action::UpdateOrDeployResponse* response);
    virtual ::grpc::Status Logs(::grpc::ServerContext* context, const ::ric::action::LogsRequest* request, ::grpc::ServerWriter< ::ric::action::LogsResponse>* writer);
    virtual ::grpc::Status Info(::grpc::ServerContext* context, const ::ric::action::InfoRequest* request, ::ric::action::InfoResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Call() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::ric::action::CallRequest* /*request*/, ::ric::action::CallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCall(::grpc::ServerContext* context, ::ric::action::CallRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::action::CallResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Scale : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Scale() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Scale() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Scale(::grpc::ServerContext* /*context*/, const ::ric::action::ScaleRequest* /*request*/, ::ric::action::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScale(::grpc::ServerContext* context, ::ric::action::ScaleRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::action::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::ric::action::DeleteRequest* /*request*/, ::ric::action::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::ric::action::DeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::action::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateOrDeploy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateOrDeploy() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateOrDeploy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrDeploy(::grpc::ServerContext* /*context*/, const ::ric::action::UpdateOrDeployRequest* /*request*/, ::ric::action::UpdateOrDeployResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrDeploy(::grpc::ServerContext* context, ::ric::action::UpdateOrDeployRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::action::UpdateOrDeployResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Logs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Logs() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Logs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logs(::grpc::ServerContext* /*context*/, const ::ric::action::LogsRequest* /*request*/, ::grpc::ServerWriter< ::ric::action::LogsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogs(::grpc::ServerContext* context, ::ric::action::LogsRequest* request, ::grpc::ServerAsyncWriter< ::ric::action::LogsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Info() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::ric::action::InfoRequest* /*request*/, ::ric::action::InfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInfo(::grpc::ServerContext* context, ::ric::action::InfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::action::InfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Call<WithAsyncMethod_Scale<WithAsyncMethod_Delete<WithAsyncMethod_UpdateOrDeploy<WithAsyncMethod_Logs<WithAsyncMethod_Info<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Call() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ric::action::CallRequest, ::ric::action::CallResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ric::action::CallRequest* request, ::ric::action::CallResponse* response) { return this->Call(context, request, response); }));}
    void SetMessageAllocatorFor_Call(
        ::grpc::experimental::MessageAllocator< ::ric::action::CallRequest, ::ric::action::CallResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ric::action::CallRequest, ::ric::action::CallResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::ric::action::CallRequest* /*request*/, ::ric::action::CallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Call(
      ::grpc::CallbackServerContext* /*context*/, const ::ric::action::CallRequest* /*request*/, ::ric::action::CallResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Call(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ric::action::CallRequest* /*request*/, ::ric::action::CallResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Scale : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Scale() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ric::action::ScaleRequest, ::ric::action::EmptyResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ric::action::ScaleRequest* request, ::ric::action::EmptyResponse* response) { return this->Scale(context, request, response); }));}
    void SetMessageAllocatorFor_Scale(
        ::grpc::experimental::MessageAllocator< ::ric::action::ScaleRequest, ::ric::action::EmptyResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ric::action::ScaleRequest, ::ric::action::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Scale() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Scale(::grpc::ServerContext* /*context*/, const ::ric::action::ScaleRequest* /*request*/, ::ric::action::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Scale(
      ::grpc::CallbackServerContext* /*context*/, const ::ric::action::ScaleRequest* /*request*/, ::ric::action::EmptyResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Scale(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ric::action::ScaleRequest* /*request*/, ::ric::action::EmptyResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Delete() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ric::action::DeleteRequest, ::ric::action::EmptyResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ric::action::DeleteRequest* request, ::ric::action::EmptyResponse* response) { return this->Delete(context, request, response); }));}
    void SetMessageAllocatorFor_Delete(
        ::grpc::experimental::MessageAllocator< ::ric::action::DeleteRequest, ::ric::action::EmptyResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ric::action::DeleteRequest, ::ric::action::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::ric::action::DeleteRequest* /*request*/, ::ric::action::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::ric::action::DeleteRequest* /*request*/, ::ric::action::EmptyResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Delete(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ric::action::DeleteRequest* /*request*/, ::ric::action::EmptyResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateOrDeploy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateOrDeploy() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ric::action::UpdateOrDeployRequest, ::ric::action::UpdateOrDeployResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ric::action::UpdateOrDeployRequest* request, ::ric::action::UpdateOrDeployResponse* response) { return this->UpdateOrDeploy(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateOrDeploy(
        ::grpc::experimental::MessageAllocator< ::ric::action::UpdateOrDeployRequest, ::ric::action::UpdateOrDeployResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ric::action::UpdateOrDeployRequest, ::ric::action::UpdateOrDeployResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateOrDeploy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrDeploy(::grpc::ServerContext* /*context*/, const ::ric::action::UpdateOrDeployRequest* /*request*/, ::ric::action::UpdateOrDeployResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateOrDeploy(
      ::grpc::CallbackServerContext* /*context*/, const ::ric::action::UpdateOrDeployRequest* /*request*/, ::ric::action::UpdateOrDeployResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateOrDeploy(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ric::action::UpdateOrDeployRequest* /*request*/, ::ric::action::UpdateOrDeployResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Logs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Logs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::ric::action::LogsRequest, ::ric::action::LogsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ric::action::LogsRequest* request) { return this->Logs(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_Logs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logs(::grpc::ServerContext* /*context*/, const ::ric::action::LogsRequest* /*request*/, ::grpc::ServerWriter< ::ric::action::LogsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::ric::action::LogsResponse>* Logs(
      ::grpc::CallbackServerContext* /*context*/, const ::ric::action::LogsRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::ric::action::LogsResponse>* Logs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ric::action::LogsRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Info() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ric::action::InfoRequest, ::ric::action::InfoResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ric::action::InfoRequest* request, ::ric::action::InfoResponse* response) { return this->Info(context, request, response); }));}
    void SetMessageAllocatorFor_Info(
        ::grpc::experimental::MessageAllocator< ::ric::action::InfoRequest, ::ric::action::InfoResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ric::action::InfoRequest, ::ric::action::InfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::ric::action::InfoRequest* /*request*/, ::ric::action::InfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Info(
      ::grpc::CallbackServerContext* /*context*/, const ::ric::action::InfoRequest* /*request*/, ::ric::action::InfoResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Info(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ric::action::InfoRequest* /*request*/, ::ric::action::InfoResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Call<ExperimentalWithCallbackMethod_Scale<ExperimentalWithCallbackMethod_Delete<ExperimentalWithCallbackMethod_UpdateOrDeploy<ExperimentalWithCallbackMethod_Logs<ExperimentalWithCallbackMethod_Info<Service > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Call<ExperimentalWithCallbackMethod_Scale<ExperimentalWithCallbackMethod_Delete<ExperimentalWithCallbackMethod_UpdateOrDeploy<ExperimentalWithCallbackMethod_Logs<ExperimentalWithCallbackMethod_Info<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Call() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::ric::action::CallRequest* /*request*/, ::ric::action::CallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Scale : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Scale() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Scale() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Scale(::grpc::ServerContext* /*context*/, const ::ric::action::ScaleRequest* /*request*/, ::ric::action::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::ric::action::DeleteRequest* /*request*/, ::ric::action::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateOrDeploy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateOrDeploy() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateOrDeploy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrDeploy(::grpc::ServerContext* /*context*/, const ::ric::action::UpdateOrDeployRequest* /*request*/, ::ric::action::UpdateOrDeployResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Logs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Logs() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Logs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logs(::grpc::ServerContext* /*context*/, const ::ric::action::LogsRequest* /*request*/, ::grpc::ServerWriter< ::ric::action::LogsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Info() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::ric::action::InfoRequest* /*request*/, ::ric::action::InfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Call() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::ric::action::CallRequest* /*request*/, ::ric::action::CallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCall(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Scale : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Scale() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Scale() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Scale(::grpc::ServerContext* /*context*/, const ::ric::action::ScaleRequest* /*request*/, ::ric::action::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScale(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::ric::action::DeleteRequest* /*request*/, ::ric::action::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateOrDeploy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateOrDeploy() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateOrDeploy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrDeploy(::grpc::ServerContext* /*context*/, const ::ric::action::UpdateOrDeployRequest* /*request*/, ::ric::action::UpdateOrDeployResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrDeploy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Logs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Logs() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Logs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logs(::grpc::ServerContext* /*context*/, const ::ric::action::LogsRequest* /*request*/, ::grpc::ServerWriter< ::ric::action::LogsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Info() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::ric::action::InfoRequest* /*request*/, ::ric::action::InfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Call() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Call(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::ric::action::CallRequest* /*request*/, ::ric::action::CallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Call(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Call(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Scale : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Scale() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Scale(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Scale() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Scale(::grpc::ServerContext* /*context*/, const ::ric::action::ScaleRequest* /*request*/, ::ric::action::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Scale(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Scale(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Delete() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Delete(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::ric::action::DeleteRequest* /*request*/, ::ric::action::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Delete(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateOrDeploy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateOrDeploy() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateOrDeploy(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateOrDeploy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrDeploy(::grpc::ServerContext* /*context*/, const ::ric::action::UpdateOrDeployRequest* /*request*/, ::ric::action::UpdateOrDeployResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateOrDeploy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateOrDeploy(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Logs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Logs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->Logs(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_Logs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logs(::grpc::ServerContext* /*context*/, const ::ric::action::LogsRequest* /*request*/, ::grpc::ServerWriter< ::ric::action::LogsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Logs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* Logs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Info() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Info(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::ric::action::InfoRequest* /*request*/, ::ric::action::InfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Info(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Info(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Call() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::action::CallRequest, ::ric::action::CallResponse>(std::bind(&WithStreamedUnaryMethod_Call<BaseClass>::StreamedCall, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::ric::action::CallRequest* /*request*/, ::ric::action::CallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCall(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::action::CallRequest,::ric::action::CallResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Scale : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Scale() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::action::ScaleRequest, ::ric::action::EmptyResponse>(std::bind(&WithStreamedUnaryMethod_Scale<BaseClass>::StreamedScale, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Scale() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Scale(::grpc::ServerContext* /*context*/, const ::ric::action::ScaleRequest* /*request*/, ::ric::action::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedScale(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::action::ScaleRequest,::ric::action::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::action::DeleteRequest, ::ric::action::EmptyResponse>(std::bind(&WithStreamedUnaryMethod_Delete<BaseClass>::StreamedDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::ric::action::DeleteRequest* /*request*/, ::ric::action::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::action::DeleteRequest,::ric::action::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateOrDeploy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateOrDeploy() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::action::UpdateOrDeployRequest, ::ric::action::UpdateOrDeployResponse>(std::bind(&WithStreamedUnaryMethod_UpdateOrDeploy<BaseClass>::StreamedUpdateOrDeploy, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateOrDeploy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateOrDeploy(::grpc::ServerContext* /*context*/, const ::ric::action::UpdateOrDeployRequest* /*request*/, ::ric::action::UpdateOrDeployResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateOrDeploy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::action::UpdateOrDeployRequest,::ric::action::UpdateOrDeployResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Info() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::action::InfoRequest, ::ric::action::InfoResponse>(std::bind(&WithStreamedUnaryMethod_Info<BaseClass>::StreamedInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::ric::action::InfoRequest* /*request*/, ::ric::action::InfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::action::InfoRequest,::ric::action::InfoResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Call<WithStreamedUnaryMethod_Scale<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_UpdateOrDeploy<WithStreamedUnaryMethod_Info<Service > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Logs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Logs() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler< ::ric::action::LogsRequest, ::ric::action::LogsResponse>(std::bind(&WithSplitStreamingMethod_Logs<BaseClass>::StreamedLogs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Logs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Logs(::grpc::ServerContext* /*context*/, const ::ric::action::LogsRequest* /*request*/, ::grpc::ServerWriter< ::ric::action::LogsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedLogs(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::ric::action::LogsRequest,::ric::action::LogsResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Logs<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Call<WithStreamedUnaryMethod_Scale<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_UpdateOrDeploy<WithSplitStreamingMethod_Logs<WithStreamedUnaryMethod_Info<Service > > > > > > StreamedService;
};

class PublicAPI final {
 public:
  static constexpr char const* service_full_name() {
    return "ric.action.PublicAPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::ric::action::HistoryResponse>> History(::grpc::ClientContext* context, const ::ric::action::HistoryRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::ric::action::HistoryResponse>>(HistoryRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ric::action::HistoryResponse>> AsyncHistory(::grpc::ClientContext* context, const ::ric::action::HistoryRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ric::action::HistoryResponse>>(AsyncHistoryRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ric::action::HistoryResponse>> PrepareAsyncHistory(::grpc::ClientContext* context, const ::ric::action::HistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ric::action::HistoryResponse>>(PrepareAsyncHistoryRaw(context, request, cq));
    }
    virtual ::grpc::Status SendEvent(::grpc::ClientContext* context, const ::ric::action::EventRequest& request, ::ric::action::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::EmptyResponse>> AsyncSendEvent(::grpc::ClientContext* context, const ::ric::action::EventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::EmptyResponse>>(AsyncSendEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::EmptyResponse>> PrepareAsyncSendEvent(::grpc::ClientContext* context, const ::ric::action::EventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::EmptyResponse>>(PrepareAsyncSendEventRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void History(::grpc::ClientContext* context, ::ric::action::HistoryRequest* request, ::grpc::ClientReadReactor< ::ric::action::HistoryResponse>* reactor) = 0;
      #else
      virtual void History(::grpc::ClientContext* context, ::ric::action::HistoryRequest* request, ::grpc::experimental::ClientReadReactor< ::ric::action::HistoryResponse>* reactor) = 0;
      #endif
      virtual void SendEvent(::grpc::ClientContext* context, const ::ric::action::EventRequest* request, ::ric::action::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendEvent(::grpc::ClientContext* context, const ::ric::action::EventRequest* request, ::ric::action::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendEvent(::grpc::ClientContext* context, const ::ric::action::EventRequest* request, ::ric::action::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::ric::action::HistoryResponse>* HistoryRaw(::grpc::ClientContext* context, const ::ric::action::HistoryRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ric::action::HistoryResponse>* AsyncHistoryRaw(::grpc::ClientContext* context, const ::ric::action::HistoryRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ric::action::HistoryResponse>* PrepareAsyncHistoryRaw(::grpc::ClientContext* context, const ::ric::action::HistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::EmptyResponse>* AsyncSendEventRaw(::grpc::ClientContext* context, const ::ric::action::EventRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::action::EmptyResponse>* PrepareAsyncSendEventRaw(::grpc::ClientContext* context, const ::ric::action::EventRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::ric::action::HistoryResponse>> History(::grpc::ClientContext* context, const ::ric::action::HistoryRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::ric::action::HistoryResponse>>(HistoryRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ric::action::HistoryResponse>> AsyncHistory(::grpc::ClientContext* context, const ::ric::action::HistoryRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ric::action::HistoryResponse>>(AsyncHistoryRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ric::action::HistoryResponse>> PrepareAsyncHistory(::grpc::ClientContext* context, const ::ric::action::HistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ric::action::HistoryResponse>>(PrepareAsyncHistoryRaw(context, request, cq));
    }
    ::grpc::Status SendEvent(::grpc::ClientContext* context, const ::ric::action::EventRequest& request, ::ric::action::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::action::EmptyResponse>> AsyncSendEvent(::grpc::ClientContext* context, const ::ric::action::EventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::action::EmptyResponse>>(AsyncSendEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::action::EmptyResponse>> PrepareAsyncSendEvent(::grpc::ClientContext* context, const ::ric::action::EventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::action::EmptyResponse>>(PrepareAsyncSendEventRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void History(::grpc::ClientContext* context, ::ric::action::HistoryRequest* request, ::grpc::ClientReadReactor< ::ric::action::HistoryResponse>* reactor) override;
      #else
      void History(::grpc::ClientContext* context, ::ric::action::HistoryRequest* request, ::grpc::experimental::ClientReadReactor< ::ric::action::HistoryResponse>* reactor) override;
      #endif
      void SendEvent(::grpc::ClientContext* context, const ::ric::action::EventRequest* request, ::ric::action::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void SendEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendEvent(::grpc::ClientContext* context, const ::ric::action::EventRequest* request, ::ric::action::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendEvent(::grpc::ClientContext* context, const ::ric::action::EventRequest* request, ::ric::action::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::action::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::ric::action::HistoryResponse>* HistoryRaw(::grpc::ClientContext* context, const ::ric::action::HistoryRequest& request) override;
    ::grpc::ClientAsyncReader< ::ric::action::HistoryResponse>* AsyncHistoryRaw(::grpc::ClientContext* context, const ::ric::action::HistoryRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::ric::action::HistoryResponse>* PrepareAsyncHistoryRaw(::grpc::ClientContext* context, const ::ric::action::HistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::action::EmptyResponse>* AsyncSendEventRaw(::grpc::ClientContext* context, const ::ric::action::EventRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::action::EmptyResponse>* PrepareAsyncSendEventRaw(::grpc::ClientContext* context, const ::ric::action::EventRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_History_;
    const ::grpc::internal::RpcMethod rpcmethod_SendEvent_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status History(::grpc::ServerContext* context, const ::ric::action::HistoryRequest* request, ::grpc::ServerWriter< ::ric::action::HistoryResponse>* writer);
    virtual ::grpc::Status SendEvent(::grpc::ServerContext* context, const ::ric::action::EventRequest* request, ::ric::action::EmptyResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_History : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_History() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_History() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status History(::grpc::ServerContext* /*context*/, const ::ric::action::HistoryRequest* /*request*/, ::grpc::ServerWriter< ::ric::action::HistoryResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHistory(::grpc::ServerContext* context, ::ric::action::HistoryRequest* request, ::grpc::ServerAsyncWriter< ::ric::action::HistoryResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendEvent() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendEvent(::grpc::ServerContext* /*context*/, const ::ric::action::EventRequest* /*request*/, ::ric::action::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendEvent(::grpc::ServerContext* context, ::ric::action::EventRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::action::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_History<WithAsyncMethod_SendEvent<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_History : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_History() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::ric::action::HistoryRequest, ::ric::action::HistoryResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ric::action::HistoryRequest* request) { return this->History(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_History() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status History(::grpc::ServerContext* /*context*/, const ::ric::action::HistoryRequest* /*request*/, ::grpc::ServerWriter< ::ric::action::HistoryResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::ric::action::HistoryResponse>* History(
      ::grpc::CallbackServerContext* /*context*/, const ::ric::action::HistoryRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::ric::action::HistoryResponse>* History(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ric::action::HistoryRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendEvent() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ric::action::EventRequest, ::ric::action::EmptyResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ric::action::EventRequest* request, ::ric::action::EmptyResponse* response) { return this->SendEvent(context, request, response); }));}
    void SetMessageAllocatorFor_SendEvent(
        ::grpc::experimental::MessageAllocator< ::ric::action::EventRequest, ::ric::action::EmptyResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ric::action::EventRequest, ::ric::action::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendEvent(::grpc::ServerContext* /*context*/, const ::ric::action::EventRequest* /*request*/, ::ric::action::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::ric::action::EventRequest* /*request*/, ::ric::action::EmptyResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendEvent(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ric::action::EventRequest* /*request*/, ::ric::action::EmptyResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_History<ExperimentalWithCallbackMethod_SendEvent<Service > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_History<ExperimentalWithCallbackMethod_SendEvent<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_History : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_History() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_History() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status History(::grpc::ServerContext* /*context*/, const ::ric::action::HistoryRequest* /*request*/, ::grpc::ServerWriter< ::ric::action::HistoryResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendEvent() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendEvent(::grpc::ServerContext* /*context*/, const ::ric::action::EventRequest* /*request*/, ::ric::action::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_History : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_History() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_History() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status History(::grpc::ServerContext* /*context*/, const ::ric::action::HistoryRequest* /*request*/, ::grpc::ServerWriter< ::ric::action::HistoryResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHistory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendEvent() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendEvent(::grpc::ServerContext* /*context*/, const ::ric::action::EventRequest* /*request*/, ::ric::action::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendEvent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_History : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_History() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->History(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_History() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status History(::grpc::ServerContext* /*context*/, const ::ric::action::HistoryRequest* /*request*/, ::grpc::ServerWriter< ::ric::action::HistoryResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* History(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* History(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendEvent() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendEvent(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendEvent(::grpc::ServerContext* /*context*/, const ::ric::action::EventRequest* /*request*/, ::ric::action::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendEvent(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendEvent() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::action::EventRequest, ::ric::action::EmptyResponse>(std::bind(&WithStreamedUnaryMethod_SendEvent<BaseClass>::StreamedSendEvent, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendEvent(::grpc::ServerContext* /*context*/, const ::ric::action::EventRequest* /*request*/, ::ric::action::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendEvent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::action::EventRequest,::ric::action::EmptyResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendEvent<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_History : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_History() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::ric::action::HistoryRequest, ::ric::action::HistoryResponse>(std::bind(&WithSplitStreamingMethod_History<BaseClass>::StreamedHistory, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_History() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status History(::grpc::ServerContext* /*context*/, const ::ric::action::HistoryRequest* /*request*/, ::grpc::ServerWriter< ::ric::action::HistoryResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedHistory(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::ric::action::HistoryRequest,::ric::action::HistoryResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_History<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_History<WithStreamedUnaryMethod_SendEvent<Service > > StreamedService;
};

}  // namespace action
}  // namespace ric


#endif  // GRPC_ric_2daction_2fricaction_2eproto__INCLUDED
