syntax = "proto3";

package ric.logic.v3;

option go_package = "riclogicv3";

service RicLogicV3 {
  rpc StartAutomaton(StartAutomatonRequest) returns (StartAutomatonResponse);
  rpc StopAutomaton(StopAutomatonRequest) returns (StopAutomatonResponse);
  rpc GetAutomatons(GetAutomatonsRequest) returns (stream AutomatonInfo);
  rpc EmitEvent(EmitEventRequest) returns (EmitEventResponse);

  rpc GetAutomatonStats(GetRuntimeInfoRequest) returns (AutomatonStats);
  rpc GetAutomatonLogs(GetRuntimeInfoRequest) returns (stream RuntimeLogResponse);
  
}

enum StepCategory {
  INVALID = 0;
  INFO = 1;
  LOG = 2;
  TRANSITION = 3;
  ACTION = 4;
  ERROR = 5;
  HALTED = 6;
}

message AutomatonStats {
  int32 started = 1;
  int32 transitions = 2;
  int32 actions = 3;
  int32 packets = 4;
  int32 events = 5;
  string halted = 6;
}

message StartAutomatonRequest {
  string object_id = 1;
  string automaton_id = 2;
}

message StartAutomatonResponse {}

message GetAutomatonsRequest {
  string object_id = 1;
}

message EmitEventRequest {
  string object_id = 1;
  string automaton_id = 2;
  string event = 3;
  string payload = 4;
}

message EmitEventResponse {}

message AutomatonInfo {
  string object_id = 1;
  string automaton_id = 2;

  string status = 3;
  string state = 4;
  string transition = 5;

  AutomatonStats stats = 6;
}

message GetRuntimeInfoRequest {
  string object_id = 1;
  string automaton_id = 2;
}

message StopAutomatonRequest {
  string object_id = 1;
  string automaton_id = 2;
}

message StopAutomatonResponse {}

message RuntimeLogResponse {
  string object_id = 1;
  string automaton_id = 2;
  int32 ts = 3;
  string state = 4;
  string transition = 5;
  StepCategory category = 6;
  string message = 7;
  string ctx = 8;
  bool final = 9;
}
