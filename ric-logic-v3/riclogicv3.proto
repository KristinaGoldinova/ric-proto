syntax = "proto3";

package ric.logic.v3;

option go_package = "riclogicv3";

service RicLogicV3 {
  rpc GetInstanceInfo(GetInstanceInfoRequest) returns (GetInstanceInfoResponse);
  rpc GetAutomatons(GetAutomatonsRequest) returns (GetAutomatonsResponse);
  rpc GetAutomatonsStream(GetAutomatonsRequest) returns (stream AutomatonInfo);
  
  rpc StartAutomaton(StartAutomatonRequest) returns (StartAutomatonResponse);
  rpc StopAutomaton(StopAutomatonRequest) returns (StopAutomatonResponse);
  rpc EmitEvent(EmitEventRequest) returns (EmitEventResponse);  
}

message UserContext {
  string group_id = 1;
  string user_id = 2;
  string span_id = 3;
}

message AutomatonStats {
  int32 started = 1;
  int32 transitions = 2;
  int32 actions = 3;
  int32 packets = 4;
  int32 events = 5;
  string halted = 6;
}

message AutomatonInfo {
  string object_id = 1;
  string automaton_id = 2;
  string hash_id = 3;
  string revision = 4;

  string status = 5;
  string state = 6;
  string transition = 7;

  AutomatonStats stats = 8;
  repeated LogEntry logs = 9;
}

message LogEntry {
  string id = 1;
  int32 ts = 2;

  string object_id = 3;
  string automaton_id = 4;
  string hash_id = 5;
  string revision = 6;
  
  string instance = 7;
  string category = 8;
  string message = 9;

  string event = 10;
  string state = 11;
  string transition = 12;

  UserContext ctx = 13;
}



message GetInstanceInfoRequest {}
message GetInstanceInfoResponse {
  string hostname = 1;
  string status = 2;
  int32 started_at = 3;

  int32 objects_total = 4;
  int32 containers_total = 5;
  int32 containers_running = 6;

  repeated string object_ids = 7;
}


message StartAutomatonRequest {
  UserContext ctx = 1;

  string object_id = 2;
  string automaton_id = 3;
}

message StartAutomatonResponse {}


message StopAutomatonRequest {
  UserContext ctx = 1;

  string object_id = 2;
  string automaton_id = 3;
}

message StopAutomatonResponse {}


message GetAutomatonsRequest {
  string object_id = 1;
}

message GetAutomatonsResponse {
  repeated AutomatonInfo automatons = 1;
}


message EmitEventRequest {
  UserContext ctx = 1;

  string object_id = 2;
  string automaton_id = 3;
  string event = 4;
  string payload = 5;
}

message EmitEventResponse {}


message GetRuntimeInfoRequest {
  string object_id = 1;
  string automaton_id = 2;
}

