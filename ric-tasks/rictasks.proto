syntax = "proto3";

package ric.tasks;

option go_package = "rictasks";

service Tasks {
  rpc Create(CreateRequest) returns (CreateResponse);
  rpc Get(GetRequest) returns (GetResponse);
  rpc Update(UpdateRequest) returns (UpdateResponse);
  rpc Delete(DeleteRequest) returns (DeleteResponse);
}

message ObjectId {
  string id = 1;
}

message TaskId {
  string id = 1;
}

message Location {
  double lat = 1;
  double lng = 2;
  double radius = 3;
  string address = 4;
  IndoorLocation indoor = 5;
}

message IndoorLocation {
  double x = 1;
  double y = 2;
  double z = 3;
  double redius = 4;
}

message Task {
  enum Status {
    INVALID = 0; // error
    CREATED = 1;
    ASSIGNED = 2;
    IN_WORK = 3;
    CLOSED = 4;
  }
  TaskId id = 1;
  string name = 2;
  string kind = 3;
  string description = 4;
  Status status = 5;
  ObjectId object = 6;
  Location begin = 7;
  Location end = 8;
  // @inject_tag: bson:"created_at"
  int64 created_at = 9; // milliseconds
  repeated Deadline deadlines = 10;
  ObjectId owner = 11;
  bool success = 12;
  string comment = 13;
  repeated string files = 14;
}

message Deadline {
  int64 timestamp = 1;
  Task.Status status = 2;
}

message MasterTask {
  enum Constrain {
    INVALID = 0; // error
    UNORDERED = 1; // all subtasks should be done (order doesn't matter)
    ORDERED = 2; // all subtasks shuld be done step by step
  }
  enum Priority {
    UNDEFINED = 0;
    LOW = 1;
    NORMAL = 2;
    HIGH = 3;
  }
  // @inject_tag: bson:"_id"
  ObjectId _id = 1;
  ObjectId owner = 2;
  ObjectId group = 3;
  repeated Task subtasks = 4;
  Constrain constrain = 5;
  repeated string tags = 6;
  ObjectId assignee = 7;
  Priority priority = 8;
  int64 time = 9;
  ObjectId object = 10;
}

message CreateRequest {
  MasterTask master_task = 1;
}

message CreateResponse {
  ObjectId _id = 1;
  repeated TaskId sub_ids = 2;
}

// get master task by oid or by tid
// this request always return full master task
message GetRequest {
  oneof payload {
    ObjectId oid = 1;
    TaskId tid = 2;
  }
}

message GetResponse {
  MasterTask master_task = 1;
}

// delete master task by oid or subtask by tid
// if it is a last subtask then master task also will be deleted
message DeleteRequest {
  oneof payload {
    ObjectId oid = 1;
    TaskId tid = 2;
  }
}

message DeleteResponse {}

message UpdateRequest {
  MasterTask master_task = 1;
}

message UpdateResponse {
  MasterTask master_task = 1;
}
