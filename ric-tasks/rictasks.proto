syntax = "proto3";

package ric.tasks;

option go_package = "rictasks";

import "google/protobuf/wrappers.proto";

service Tasks {
  rpc Create(CreateRequest) returns (CreateResponse);
  // get master task by it's id or by some subtask id
  // this request always return full master task
  rpc Get(GetRequest) returns (GetResponse);
  // this method can update master task and subtasks information
  // this method can't update (return error):
  // 1. subtasks status (use ChangeStatus)
  // 2. subtasks deadlines if status not equal to CREATED or ASSIGNED
  // 3. subtasks order (use UpdateOrder)
  // 4. begin and end location if status not equal to CREATED or ASSIGNED
  //
  // new subtasks can be added but they always append to end of subtasks list
  // use UpdateOrder after this if you need add subtask to specific position
  //
  // to update subtask -> TaskId should be present in request
  // if no TaskId then subtask treated as new
  rpc Update(UpdateRequest) returns (UpdateResponse);
  // this method can delete master task or specific subtask
  // if it is a last subtask then master task also will be deleted
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  // update subtasks order
  // order can be updated only if following true:
  // 1. all subtasks has status CREATED or ASSIGNED
  // 2. all subtasks has no deadlines
  //    (if subtask have deadline you can unset it via Update method)
  rpc UpdateOrder(UpdateOrderRequest) returns (UpdateOrderResponse);
  // change subtask status
  // this method checks master task constrain before change status
  // so if constraint ordered you can't take in work subtask if previous subtask
  // not closed
  //
  // the following status change is allowed:
  // CREATED -> ASSIGNED
  // ASSIGNED -> IN_WORK
  // IN_WORK -> CLOSED (with success flag)
  // CLOSED -> CREATED
  // ASSIGNED -> CREATED
  // ASSIGNED -> CLOSED (method always set success flag to false)
  // CREATED -> CLOSED (method always set success flag to false)
  //
  // if subtask has begin location -> change status to IN_WORK can be done only
  // in this location
  //
  // if subtask has end location -> change status to CLOSED can be done only
  // in this location
  rpc ChangeStatus(ChangeStatusRequest) returns (ChangeStatusResponse);
}

message ObjectId {
  string id = 1;
}

message TaskId {
  string id = 1;
}

message Location {
  double lat = 1;
  double lng = 2;
  double radius = 3;
  // @inject_tag: bson:",omitempty"
  string address = 4;
  // @inject_tag: bson:",omitempty"
  IndoorLocation indoor = 5;
}

message IndoorLocation {
  double x = 1;
  double y = 2;
  double z = 3;
  double radius = 4;
}

message Task {
  enum Status {
    INVALID = 0; // error
    CREATED = 1;
    ASSIGNED = 2;
    IN_WORK = 3;
    CLOSED = 4;
  }
  TaskId id = 1;
  // @inject_tag: bson:",omitempty"
  string name = 2;
  // @inject_tag: bson:",omitempty"
  string kind = 3;
  // @inject_tag: bson:",omitempty"
  string description = 4;
  Status status = 5;
  // @inject_tag: bson:",omitempty"
  ObjectId object = 6;
  // @inject_tag: bson:",omitempty"
  Location begin = 7;
  // @inject_tag: bson:",omitempty"
  Location end = 8;
  // @inject_tag: bson:"created_at"
  int64 created_at = 9; // milliseconds
  // @inject_tag: bson:",omitempty"
  repeated Deadline deadlines = 10;
  // @inject_tag: bson:",omitempty"
  ObjectId owner = 11;
  // @inject_tag: bson:",omitempty"
  google.protobuf.BoolValue success = 12;
  // @inject_tag: bson:",omitempty"
  string comment = 13;
  // @inject_tag: bson:",omitempty"
  repeated string files = 14;
  // @inject_tag: bson:",omitempty"
  ObjectId assignee = 15;
}

message Deadline {
  int64 timestamp = 1; // milliseconds
  // number of milliseconds before deadline when service should send
  // notification
  // @inject_tag: bson:",omitempty"
  google.protobuf.Int64Value notify_until = 2;
  Task.Status status = 3;
}

message MasterTask {
  enum Constrain {
    INVALID = 0; // error
    UNORDERED = 1; // all subtasks should be done (order doesn't matter)
    ORDERED = 2; // all subtasks shuld be done step by step
  }
  enum Priority {
    UNDEFINED = 0;
    LOW = 1;
    NORMAL = 2;
    HIGH = 3;
  }
  // @inject_tag: bson:"_id"
  ObjectId oid = 1;
  // @inject_tag: bson:",omitempty"
  ObjectId owner = 2;
  // @inject_tag: bson:",omitempty"
  ObjectId group = 3;
  repeated Task subtasks = 4;
  Constrain constrain = 5;
  // @inject_tag: bson:",omitempty"
  repeated string tags = 6;
  Priority priority = 7;
  int64 time = 8; // milliseconds
  // @inject_tag: bson:",omitempty"
  ObjectId object = 9;
}

message CreateRequest {
  MasterTask master_task = 1;
}

message CreateResponse {
  ObjectId oid = 1;
  repeated TaskId sub_ids = 2;
}

message GetRequest {
  oneof payload {
    ObjectId oid = 1;
    TaskId tid = 2;
  }
}

message GetResponse {
  MasterTask master_task = 1;
}

message DeleteRequest {
  oneof payload {
    ObjectId oid = 1;
    TaskId tid = 2;
  }
}

message DeleteResponse {}

message UpdateRequest {
  MasterTask master_task = 1;
}

message UpdateResponse {
  MasterTask master_task = 1;
}

message UpdateOrderRequest {
  ObjectId id = 1; // master task id
  // new position to task id
  // if new position greater then subtasks length
  // error returned
  map<string, int32> positions = 2;
}

message UpdateOrderResponse {}

message ChangeStatusRequest {
  TaskId id = 1;
  Task.Status new_status = 2;
  // current location
  Location location = 3;
  // required only if new_status == CLOSED
  google.protobuf.BoolValue success = 4;
  string comment = 5;
  repeated string files = 6;
}

message ChangeStatusResponse {}
